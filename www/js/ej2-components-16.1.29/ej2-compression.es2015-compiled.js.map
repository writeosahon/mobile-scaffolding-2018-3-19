{"version":3,"sources":["ej2-compression.es2015.js"],"names":[],"mappings":"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","file":"ej2-compression.es2015-compiled.js","sourcesContent":["import { Encoding, Save } from '@syncfusion/ej2-file-utils';\n\n/**\n * array literal codes\n */\nconst arrLiteralCodes = new Int16Array(286);\nconst arrLiteralLengths = new Uint8Array(286);\nconst arrDistanceCodes = new Int16Array(30);\nconst arrDistanceLengths = new Uint8Array(30);\n/**\n * represent compression stream writer\n * ```typescript\n * let compressedWriter = new CompressedStreamWriter();\n * let text: string = 'Hello world!!!';\n * compressedWriter.write(text, 0, text.length);\n * compressedWriter.close();\n * ```\n */\nclass CompressedStreamWriter {\n    /**\n     * Initializes compressor and writes ZLib header if needed.\n     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.\n     */\n    constructor(noWrap) {\n        this.pendingBuffer = new Uint8Array(1 << 16);\n        this.pendingBufLength = 0;\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.currentHash = 0;\n        this.matchStart = 0;\n        this.matchLength = 0;\n        this.matchPrevAvail = false;\n        this.blockStart = 0;\n        this.stringStart = 0;\n        this.lookAhead = 0;\n        this.totalBytesIn = 0;\n        this.inputOffset = 0;\n        this.inputEnd = 0;\n        this.windowSize = 1 << 15;\n        this.windowMask = this.windowSize - 1;\n        this.hashSize = 1 << 15;\n        this.hashMask = this.hashSize - 1;\n        this.hashShift = Math.floor((15 + 3 - 1) / 3);\n        this.maxDist = this.windowSize - 262;\n        this.checkSum = 1;\n        this.noWrap = false;\n        this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);\n        this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);\n        this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);\n        this.arrDistances = new Uint16Array((1 << 14));\n        this.arrLiterals = new Uint8Array((1 << 14));\n        this.stream = [];\n        this.dataWindow = new Uint8Array(2 * this.windowSize);\n        this.hashHead = new Int16Array(this.hashSize);\n        this.hashPrevious = new Int16Array(this.windowSize);\n        this.blockStart = this.stringStart = 1;\n        this.noWrap = noWrap;\n        if (!noWrap) {\n            this.writeZLibHeader();\n        }\n    }\n    /**\n     * get compressed data\n     */\n    get compressedData() {\n        return this.stream;\n    }\n    get getCompressedString() {\n        let compressedString = '';\n        if (this.stream !== undefined) {\n            for (let i = 0; i < this.stream.length; i++) {\n                compressedString += String.fromCharCode.apply(null, this.stream[i]);\n            }\n        }\n        return compressedString;\n    }\n    /**\n     * Compresses data and writes it to the stream.\n     * @param {Uint8Array} data - data to compress\n     * @param {number} offset - offset in data\n     * @param {number} length - length of the data\n     * @returns {void}\n     */\n    write(data, offset, length) {\n        if (data === undefined || data === null) {\n            throw new Error('ArgumentException: data cannot null or undefined');\n        }\n        let end = offset + length;\n        if (0 > offset || offset > end || end > data.length) {\n            throw new Error('ArgumentOutOfRangeException: Offset or length is incorrect');\n        }\n        if (typeof data === 'string') {\n            let encode = new Encoding(false);\n            encode.type = 'Utf8';\n            data = new Uint8Array(encode.getBytes(data, 0, data.length));\n            end = offset + data.length;\n        }\n        this.inputBuffer = data;\n        this.inputOffset = offset;\n        this.inputEnd = end;\n        if (!this.noWrap) {\n            this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);\n        }\n        while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {\n            this.pendingBufferFlush();\n            this.compressData(false);\n        }\n    }\n    /**\n     * write ZLib header to the compressed data\n     * @return {void}\n     */\n    writeZLibHeader() {\n        /* Initialize header.*/\n        let headerDate = (8 + (7 << 4)) << 8;\n        /* Save compression level.*/\n        headerDate |= ((5 >> 2) & 3) << 6;\n        /* Align header.*/\n        headerDate += 31 - (headerDate % 31);\n        /* Write header to stream.*/\n        this.pendingBufferWriteShortBytes(headerDate);\n    }\n    /**\n     *  Write Most Significant Bytes in to stream\n     * @param {number} s - check sum value\n     */\n    pendingBufferWriteShortBytes(s) {\n        this.pendingBuffer[this.pendingBufLength++] = s >> 8;\n        this.pendingBuffer[this.pendingBufLength++] = s;\n    }\n    compressData(finish) {\n        let success;\n        do {\n            this.fillWindow();\n            let canFlush = (finish && this.inputEnd === this.inputOffset);\n            success = this.compressSlow(canFlush, finish);\n        } while (this.pendingBufLength === 0 && success);\n        return success;\n    }\n    compressSlow(flush, finish) {\n        if (this.lookAhead < 262 && !flush) {\n            return false;\n        }\n        while (this.lookAhead >= 262 || flush) {\n            if (this.lookAhead === 0) {\n                return this.lookAheadCompleted(finish);\n            }\n            if (this.stringStart >= 2 * this.windowSize - 262) {\n                this.slideWindow();\n            }\n            let prevMatch = this.matchStart;\n            let prevLen = this.matchLength;\n            if (this.lookAhead >= 3) {\n                this.discardMatch();\n            }\n            if (prevLen >= 3 && this.matchLength <= prevLen) {\n                prevLen = this.matchPreviousBest(prevMatch, prevLen);\n            }\n            else {\n                this.matchPreviousAvailable();\n            }\n            if (this.bufferPosition >= (1 << 14)) {\n                return this.huffmanIsFull(finish);\n            }\n        }\n        return true;\n    }\n    discardMatch() {\n        let hashHead = this.insertString();\n        if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {\n            if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {\n                this.matchLength = 3 - 1;\n            }\n        }\n    }\n    matchPreviousAvailable() {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = true;\n        this.stringStart++;\n        this.lookAhead--;\n    }\n    matchPreviousBest(prevMatch, prevLen) {\n        this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);\n        prevLen -= 2;\n        do {\n            this.stringStart++;\n            this.lookAhead--;\n            if (this.lookAhead >= 3) {\n                this.insertString();\n            }\n        } while (--prevLen > 0);\n        this.stringStart++;\n        this.lookAhead--;\n        this.matchPrevAvail = false;\n        this.matchLength = 3 - 1;\n        return prevLen;\n    }\n    lookAheadCompleted(finish) {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = false;\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);\n        this.blockStart = this.stringStart;\n        return false;\n    }\n    huffmanIsFull(finish) {\n        let len = this.stringStart - this.blockStart;\n        if (this.matchPrevAvail) {\n            len--;\n        }\n        let lastBlock = (finish && this.lookAhead === 0 && !this.matchPrevAvail);\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);\n        this.blockStart += len;\n        return !lastBlock;\n    }\n    fillWindow() {\n        if (this.stringStart >= this.windowSize + this.maxDist) {\n            this.slideWindow();\n        }\n        while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {\n            let more = 2 * this.windowSize - this.lookAhead - this.stringStart;\n            if (more > this.inputEnd - this.inputOffset) {\n                more = this.inputEnd - this.inputOffset;\n            }\n            this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);\n            this.inputOffset += more;\n            this.totalBytesIn += more;\n            this.lookAhead += more;\n        }\n        if (this.lookAhead >= 3) {\n            this.updateHash();\n        }\n    }\n    slideWindow() {\n        this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);\n        this.matchStart -= this.windowSize;\n        this.stringStart -= this.windowSize;\n        this.blockStart -= this.windowSize;\n        for (let i = 0; i < this.hashSize; ++i) {\n            let m = this.hashHead[i] & 0xffff;\n            this.hashHead[i] = (((m >= this.windowSize) ? (m - this.windowSize) : 0));\n        }\n        for (let i = 0; i < this.windowSize; i++) {\n            let m = this.hashPrevious[i] & 0xffff;\n            this.hashPrevious[i] = ((m >= this.windowSize) ? (m - this.windowSize) : 0);\n        }\n    }\n    insertString() {\n        let match;\n        let hash = ((this.currentHash << this.hashShift) ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;\n        this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];\n        this.hashHead[hash] = this.stringStart;\n        this.currentHash = hash;\n        return match & 0xffff;\n    }\n    findLongestMatch(curMatch) {\n        let chainLen = 4096;\n        let niceLen = 258;\n        let scan = this.stringStart;\n        let match;\n        let bestEnd = this.stringStart + this.matchLength;\n        let bestLength = Math.max(this.matchLength, 3 - 1);\n        let limit = Math.max(this.stringStart - this.maxDist, 0);\n        let stringEnd = this.stringStart + 258 - 1;\n        let scanEnd1 = this.dataWindow[bestEnd - 1];\n        let scanEnd = this.dataWindow[bestEnd];\n        let data = this.dataWindow;\n        if (bestLength >= 32) {\n            chainLen >>= 2;\n        }\n        if (niceLen > this.lookAhead) {\n            niceLen = this.lookAhead;\n        }\n        do {\n            if (data[curMatch + bestLength] !== scanEnd ||\n                data[curMatch + bestLength - 1] !== scanEnd1 ||\n                data[curMatch] !== data[scan] ||\n                data[curMatch + 1] !== data[scan + 1]) {\n                continue;\n            }\n            match = curMatch + 2;\n            scan += 2;\n            /* tslint:disable */\n            while (data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {\n                /* tslint:disable */\n            }\n            if (scan > bestEnd) {\n                this.matchStart = curMatch;\n                bestEnd = scan;\n                bestLength = scan - this.stringStart;\n                if (bestLength >= niceLen) {\n                    break;\n                }\n                scanEnd1 = data[bestEnd - 1];\n                scanEnd = data[bestEnd];\n            }\n            scan = this.stringStart;\n        } while ((curMatch = (this.hashPrevious[curMatch & this.windowMask] & 0xffff)) > limit && --chainLen !== 0);\n        this.matchLength = Math.min(bestLength, this.lookAhead);\n        return this.matchLength >= 3;\n    }\n    updateHash() {\n        this.currentHash = (this.dataWindow[this.stringStart] << this.hashShift) ^ this.dataWindow[this.stringStart + 1];\n    }\n    huffmanTallyLit(literal) {\n        this.arrDistances[this.bufferPosition] = 0;\n        this.arrLiterals[this.bufferPosition++] = literal;\n        this.treeLiteral.codeFrequencies[literal]++;\n        return this.bufferPosition >= (1 << 14);\n    }\n    huffmanTallyDist(dist, len) {\n        this.arrDistances[this.bufferPosition] = dist;\n        this.arrLiterals[this.bufferPosition++] = (len - 3);\n        let lc = this.huffmanLengthCode(len - 3);\n        this.treeLiteral.codeFrequencies[lc]++;\n        if (lc >= 265 && lc < 285) {\n            this.extraBits += Math.floor((lc - 261) / 4);\n        }\n        let dc = this.huffmanDistanceCode(dist - 1);\n        this.treeDistances.codeFrequencies[dc]++;\n        if (dc >= 4) {\n            this.extraBits += Math.floor((dc / 2 - 1));\n        }\n        return this.bufferPosition >= (1 << 14);\n    }\n    huffmanFlushBlock(stored, storedOffset, storedLength, lastBlock) {\n        this.treeLiteral.codeFrequencies[256]++;\n        this.treeLiteral.buildTree();\n        this.treeDistances.buildTree();\n        this.treeLiteral.calculateBLFreq(this.treeCodeLengths);\n        this.treeDistances.calculateBLFreq(this.treeCodeLengths);\n        this.treeCodeLengths.buildTree();\n        let blTreeCodes = 4;\n        for (let i = 18; i > blTreeCodes; i--) {\n            if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {\n                blTreeCodes = i + 1;\n            }\n        }\n        let opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() +\n            this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;\n        let static_len = this.extraBits;\n        for (let i = 0; i < 286; i++) {\n            static_len += this.treeLiteral.codeFrequencies[i] * arrLiteralLengths[i];\n        }\n        for (let i = 0; i < 30; i++) {\n            static_len += this.treeDistances.codeFrequencies[i] * arrDistanceLengths[i];\n        }\n        if (opt_len >= static_len) {\n            // Force static trees.\n            opt_len = static_len;\n        }\n        if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {\n            this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);\n        }\n        else if (opt_len == static_len) {\n            // Encode with static tree.\n            this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);\n            this.treeLiteral.setStaticCodes(arrLiteralCodes, arrLiteralLengths);\n            this.treeDistances.setStaticCodes(arrDistanceCodes, arrDistanceLengths);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n        else {\n            this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);\n            this.huffmanSendAllTrees(blTreeCodes);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n    }\n    huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock) {\n        this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);\n        this.pendingBufferAlignToByte();\n        this.pendingBufferWriteShort(storedLength);\n        this.pendingBufferWriteShort(~storedLength);\n        this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);\n        this.huffmanReset();\n    }\n    huffmanLengthCode(len) {\n        if (len === 255) {\n            return 285;\n        }\n        let code = 257;\n        while (len >= 8) {\n            code += 4;\n            len >>= 1;\n        }\n        return code + len;\n    }\n    huffmanDistanceCode(distance) {\n        let code = 0;\n        while (distance >= 4) {\n            code += 2;\n            distance >>= 1;\n        }\n        return code + distance;\n    }\n    huffmanSendAllTrees(blTreeCodes) {\n        this.treeCodeLengths.buildCodes();\n        this.treeLiteral.buildCodes();\n        this.treeDistances.buildCodes();\n        this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);\n        this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);\n        this.pendingBufferWriteBits(blTreeCodes - 4, 4);\n        for (let rank = 0; rank < blTreeCodes; rank++) {\n            this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);\n        }\n        this.treeLiteral.writeTree(this.treeCodeLengths);\n        this.treeDistances.writeTree(this.treeCodeLengths);\n    }\n    huffmanReset() {\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.treeLiteral.reset();\n        this.treeDistances.reset();\n        this.treeCodeLengths.reset();\n    }\n    huffmanCompressBlock() {\n        for (let i = 0; i < this.bufferPosition; i++) {\n            let literalLen = this.arrLiterals[i] & 255;\n            let dist = this.arrDistances[i];\n            if (dist-- !== 0) {\n                let lc = this.huffmanLengthCode(literalLen);\n                this.treeLiteral.writeCodeToStream(lc);\n                let bits = Math.floor((lc - 261) / 4);\n                if (bits > 0 && bits <= 5) {\n                    this.pendingBufferWriteBits(literalLen & ((1 << bits) - 1), bits);\n                }\n                let dc = this.huffmanDistanceCode(dist);\n                this.treeDistances.writeCodeToStream(dc);\n                bits = Math.floor(dc / 2 - 1);\n                if (bits > 0) {\n                    this.pendingBufferWriteBits(dist & ((1 << bits) - 1), bits);\n                }\n            }\n            else {\n                this.treeLiteral.writeCodeToStream(literalLen);\n            }\n        }\n        this.treeLiteral.writeCodeToStream(256);\n    }\n    /**\n     * write bits in to internal buffer\n     * @param {number} b - source of bits\n     * @param {number} count - count of bits to write\n     */\n    pendingBufferWriteBits(b, count) {\n        let uint = new Uint32Array(1);\n        uint[0] = this.pendingBufCache | (b << this.pendingBufBitsInCache);\n        this.pendingBufCache = uint[0];\n        this.pendingBufBitsInCache += count;\n        this.pendingBufferFlushBits();\n    }\n    pendingBufferFlush(isClose) {\n        this.pendingBufferFlushBits();\n        if (this.pendingBufLength > 0) {\n            let array = new Uint8Array(this.pendingBufLength);\n            array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);\n            this.stream.push(array);\n        }\n        this.pendingBufLength = 0;\n    }\n    pendingBufferFlushBits() {\n        let result = 0;\n        while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < (1 << 16)) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n            this.pendingBufCache >>= 8;\n            this.pendingBufBitsInCache -= 8;\n            result++;\n        }\n        return result;\n    }\n    pendingBufferWriteByteBlock(data, offset, length) {\n        let array = data.subarray(offset, offset + length);\n        this.pendingBuffer.set(array, this.pendingBufLength);\n        this.pendingBufLength += length;\n    }\n    pendingBufferWriteShort(s) {\n        this.pendingBuffer[this.pendingBufLength++] = s;\n        this.pendingBuffer[this.pendingBufLength++] = (s >> 8);\n    }\n    pendingBufferAlignToByte() {\n        if (this.pendingBufBitsInCache > 0) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n        }\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n    }\n    /**\n     * close the stream and write all pending buffer in to stream\n     * @returns {void}\n     */\n    close() {\n        do {\n            this.pendingBufferFlush(true);\n            if (!this.compressData(true)) {\n                this.pendingBufferFlush(true);\n                this.pendingBufferAlignToByte();\n                if (!this.noWrap) {\n                    this.pendingBufferWriteShortBytes(this.checkSum >> 16);\n                    this.pendingBufferWriteShortBytes(this.checkSum & 0xffff);\n                }\n                this.pendingBufferFlush(true);\n            }\n        } while (!(this.inputEnd === this.inputOffset) ||\n            !(this.pendingBufLength === 0));\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        this.stream = [];\n        this.stream = undefined;\n        this.pendingBuffer = undefined;\n        this.treeLiteral = undefined;\n        this.treeDistances = undefined;\n        this.treeCodeLengths = undefined;\n        this.arrLiterals = undefined;\n        this.arrDistances = undefined;\n        this.hashHead = undefined;\n        this.hashPrevious = undefined;\n        this.dataWindow = undefined;\n        this.inputBuffer = undefined;\n        this.pendingBufLength = undefined;\n        this.pendingBufCache = undefined;\n        this.pendingBufBitsInCache = undefined;\n        this.bufferPosition = undefined;\n        this.extraBits = undefined;\n        this.currentHash = undefined;\n        this.matchStart = undefined;\n        this.matchLength = undefined;\n        this.matchPrevAvail = undefined;\n        this.blockStart = undefined;\n        this.stringStart = undefined;\n        this.lookAhead = undefined;\n        this.totalBytesIn = undefined;\n        this.inputOffset = undefined;\n        this.inputEnd = undefined;\n        this.windowSize = undefined;\n        this.windowMask = undefined;\n        this.hashSize = undefined;\n        this.hashMask = undefined;\n        this.hashShift = undefined;\n        this.maxDist = undefined;\n        this.checkSum = undefined;\n        this.noWrap = undefined;\n    }\n}\n/**\n * represent the Huffman Tree\n */\nclass CompressorHuffmanTree {\n    /**\n     * Create new Huffman Tree\n     * @param {CompressedStreamWriter} writer instance\n     * @param {number} elementCount - element count\n     * @param {number} minCodes - minimum count\n     * @param {number} maxLength - maximum count\n     */\n    constructor(writer, elementCount, minCodes, maxLength) {\n        this.writer = writer;\n        this.codeMinCount = minCodes;\n        this.maxLength = maxLength;\n        this.codeFrequency = new Uint16Array(elementCount);\n        this.lengthCount = new Int32Array(maxLength);\n    }\n    get treeLength() {\n        return this.codeCount;\n    }\n    get codeLengths() {\n        return this.codeLength;\n    }\n    get codeFrequencies() {\n        return this.codeFrequency;\n    }\n    setStaticCodes(codes, lengths) {\n        let temp = new Int16Array(codes.length);\n        temp.set(codes, 0);\n        this.codes = temp;\n        let lengthTemp = new Uint8Array(lengths.length);\n        lengthTemp.set(lengths, 0);\n        this.codeLength = lengthTemp;\n    }\n    /**\n     * reset all code data in tree\n     * @returns {void}\n     */\n    reset() {\n        for (let i = 0; i < this.codeFrequency.length; i++) {\n            this.codeFrequency[i] = 0;\n        }\n        this.codes = undefined;\n        this.codeLength = undefined;\n    }\n    /**\n     * write code to the compressor output stream\n     * @param {number} code - code to be written\n     * @returns {void}\n     */\n    writeCodeToStream(code) {\n        this.writer.pendingBufferWriteBits(this.codes[code] & 0xffff, this.codeLength[code]);\n    }\n    /**\n     * calculate code from their frequencies\n     * @returns {void}\n     */\n    buildCodes() {\n        let nextCode = new Int32Array(this.maxLength);\n        this.codes = new Int16Array(this.codeCount);\n        let code = 0;\n        for (let bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {\n            nextCode[bitsCount] = code;\n            code += this.lengthCount[bitsCount] << (15 - bitsCount);\n        }\n        for (let i = 0; i < this.codeCount; i++) {\n            let bits = this.codeLength[i];\n            if (bits > 0) {\n                this.codes[i] = CompressorHuffmanTree.bitReverse(nextCode[bits - 1]);\n                nextCode[bits - 1] += 1 << (16 - bits);\n            }\n        }\n    }\n    static bitReverse(value) {\n        return (CompressorHuffmanTree.reverseBits[value & 15] << 12\n            | CompressorHuffmanTree.reverseBits[(value >> 4) & 15] << 8\n            | CompressorHuffmanTree.reverseBits[(value >> 8) & 15] << 4\n            | CompressorHuffmanTree.reverseBits[value >> 12]);\n    }\n    /**\n     * calculate length of compressed data\n     * @returns {number}\n     */\n    getEncodedLength() {\n        let len = 0;\n        for (let i = 0; i < this.codeFrequency.length; i++) {\n            len += this.codeFrequency[i] * this.codeLength[i];\n        }\n        return len;\n    }\n    /**\n     * calculate code frequencies\n     * @param {CompressorHuffmanTree} blTree\n     * @returns {void}\n     */\n    calculateBLFreq(blTree) {\n        let maxCount;\n        let minCount;\n        let count;\n        let curLen = -1;\n        let i = 0;\n        while (i < this.codeCount) {\n            count = 1;\n            let nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxCount = 138;\n                minCount = 3;\n            }\n            else {\n                maxCount = 6;\n                minCount = 3;\n                if (curLen !== nextLen) {\n                    blTree.codeFrequency[nextLen]++;\n                    count = 0;\n                }\n            }\n            curLen = nextLen;\n            i++;\n            while (i < this.codeCount && curLen === this.codeLength[i]) {\n                i++;\n                if (++count >= maxCount) {\n                    break;\n                }\n            }\n            if (count < minCount) {\n                blTree.codeFrequency[curLen] += count;\n            }\n            else if (curLen !== 0) {\n                blTree.codeFrequency[16]++;\n            }\n            else if (count <= 10) {\n                blTree.codeFrequency[17]++;\n            }\n            else {\n                blTree.codeFrequency[18]++;\n            }\n        }\n    }\n    /**\n     * @param {CompressorHuffmanTree} blTree - write tree to output stream\n     * @returns {void}\n     */\n    writeTree(blTree) {\n        let maxRepeatCount;\n        let minRepeatCount;\n        let currentRepeatCount;\n        let currentCodeLength = -1;\n        let i = 0;\n        while (i < this.codeCount) {\n            currentRepeatCount = 1;\n            let nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxRepeatCount = 138;\n                minRepeatCount = 3;\n            }\n            else {\n                maxRepeatCount = 6;\n                minRepeatCount = 3;\n                if (currentCodeLength !== nextLen) {\n                    blTree.writeCodeToStream(nextLen);\n                    currentRepeatCount = 0;\n                }\n            }\n            currentCodeLength = nextLen;\n            i++;\n            while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {\n                i++;\n                if (++currentRepeatCount >= maxRepeatCount) {\n                    break;\n                }\n            }\n            if (currentRepeatCount < minRepeatCount) {\n                while (currentRepeatCount-- > 0) {\n                    blTree.writeCodeToStream(currentCodeLength);\n                }\n            }\n            else if (currentCodeLength !== 0) {\n                blTree.writeCodeToStream(16);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);\n            }\n            else if (currentRepeatCount <= 10) {\n                blTree.writeCodeToStream(17);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);\n            }\n            else {\n                blTree.writeCodeToStream(18);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);\n            }\n        }\n    }\n    /**\n     * Build huffman tree\n     * @returns {void}\n     */\n    buildTree() {\n        let codesCount = this.codeFrequency.length;\n        let arrTree = new Int32Array(codesCount);\n        let treeLength = 0;\n        let maxCount = 0;\n        for (let n = 0; n < codesCount; n++) {\n            let freq = this.codeFrequency[n];\n            if (freq !== 0) {\n                let pos = treeLength++;\n                let pPos = 0;\n                while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {\n                    arrTree[pos] = arrTree[pPos];\n                    pos = pPos;\n                }\n                arrTree[pos] = n;\n                maxCount = n;\n            }\n        }\n        while (treeLength < 2) {\n            arrTree[treeLength++] =\n                (maxCount < 2) ? ++maxCount : 0;\n        }\n        this.codeCount = Math.max(maxCount + 1, this.codeMinCount);\n        let leafsCount = treeLength;\n        let nodesCount = leafsCount;\n        let child = new Int32Array(4 * treeLength - 2);\n        let values = new Int32Array(2 * treeLength - 1);\n        for (let i = 0; i < treeLength; i++) {\n            let node = arrTree[i];\n            let iIndex = 2 * i;\n            child[iIndex] = node;\n            child[iIndex + 1] = -1;\n            values[i] = (this.codeFrequency[node] << 8);\n            arrTree[i] = i;\n        }\n        this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);\n        this.buildLength(child);\n    }\n    constructHuffmanTree(arrTree, treeLength, values, nodesCount, child) {\n        do {\n            let first = arrTree[0];\n            let last = arrTree[--treeLength];\n            let lastVal = values[last];\n            let pPos = 0;\n            let path = 1;\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            }\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n            let second = arrTree[0];\n            last = nodesCount++;\n            child[2 * last] = first;\n            child[2 * last + 1] = second;\n            let minDepth = Math.min(values[first] & 0xff, values[second] & 0xff);\n            values[last] = lastVal = values[first] + values[second] - minDepth + 1;\n            pPos = 0;\n            path = 1;\n            /* tslint:disable */\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            } /* tslint:disable */\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n        } while (treeLength > 1);\n    }\n    buildLength(child) {\n        this.codeLength = new Uint8Array(this.codeFrequency.length);\n        let numNodes = Math.floor(child.length / 2);\n        let numLeafs = Math.floor((numNodes + 1) / 2);\n        let overflow = 0;\n        for (let i = 0; i < this.maxLength; i++) {\n            this.lengthCount[i] = 0;\n        }\n        overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);\n        if (overflow === 0) {\n            return;\n        }\n        let iIncreasableLength = this.maxLength - 1;\n        do {\n            while (this.lengthCount[--iIncreasableLength] === 0) {\n                /* tslint:disable */\n            }\n            do {\n                this.lengthCount[iIncreasableLength]--;\n                this.lengthCount[++iIncreasableLength]++;\n                overflow -= (1 << (this.maxLength - 1 - iIncreasableLength));\n            } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);\n        } while (overflow > 0);\n        this.recreateTree(child, overflow, numLeafs);\n    }\n    recreateTree(child, overflow, numLeafs) {\n        this.lengthCount[this.maxLength - 1] += overflow;\n        this.lengthCount[this.maxLength - 2] -= overflow;\n        let nodePtr = 2 * numLeafs;\n        for (let bits = this.maxLength; bits !== 0; bits--) {\n            let n = this.lengthCount[bits - 1];\n            while (n > 0) {\n                let childPtr = 2 * child[nodePtr++];\n                if (child[childPtr + 1] === -1) {\n                    this.codeLength[child[childPtr]] = bits;\n                    n--;\n                }\n            }\n        }\n    }\n    calculateOptimalCodeLength(child, overflow, numNodes) {\n        let lengths = new Int32Array(numNodes);\n        lengths[numNodes - 1] = 0;\n        for (let i = numNodes - 1; i >= 0; i--) {\n            let childIndex = 2 * i + 1;\n            if (child[childIndex] !== -1) {\n                let bitLength = lengths[i] + 1;\n                if (bitLength > this.maxLength) {\n                    bitLength = this.maxLength;\n                    overflow++;\n                }\n                lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;\n            }\n            else {\n                let bitLength = lengths[i];\n                this.lengthCount[bitLength - 1]++;\n                this.codeLength[child[childIndex - 1]] = lengths[i];\n            }\n        }\n        return overflow;\n    }\n}\nCompressorHuffmanTree.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nCompressorHuffmanTree.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n/**\n * Checksum calculator, based on Adler32 algorithm.\n */\nclass ChecksumCalculator {\n    /**\n     * Updates checksum by calculating checksum of the\n     * given buffer and adding it to current value.\n     * @param {number} checksum - current checksum.\n     * @param {Uint8Array} buffer - data byte array.\n     * @param {number} offset - offset in the buffer.\n     * @param {number} length - length of data to be used from the stream.\n     * @returns {number}\n     */\n    static checksumUpdate(checksum, buffer, offset, length) {\n        let uint = new Uint32Array(1);\n        uint[0] = checksum;\n        let checksum_uint = uint[0];\n        let s1 = uint[0] = checksum_uint & 65535;\n        let s2 = uint[0] = checksum_uint >> ChecksumCalculator.checkSumBitOffset;\n        while (length > 0) {\n            let steps = Math.min(length, ChecksumCalculator.checksumIterationCount);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (uint[0] = (buffer[offset++] & 255));\n                s2 = s2 + s1;\n            }\n            s1 %= ChecksumCalculator.checksumBase;\n            s2 %= ChecksumCalculator.checksumBase;\n        }\n        checksum_uint = (s2 << ChecksumCalculator.checkSumBitOffset) | s1;\n        return checksum_uint;\n    }\n}\nChecksumCalculator.checkSumBitOffset = 16;\nChecksumCalculator.checksumBase = 65521;\nChecksumCalculator.checksumIterationCount = 3800;\n/**\n * Huffman Tree literal calculation\n */\n(() => {\n    let i = 0;\n    while (i < 144) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x030 + i) << 8);\n        arrLiteralLengths[i++] = 8;\n    }\n    while (i < 256) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x190 - 144 + i) << 7);\n        arrLiteralLengths[i++] = 9;\n    }\n    while (i < 280) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x000 - 256 + i) << 9);\n        arrLiteralLengths[i++] = 7;\n    }\n    while (i < 286) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x0c0 - 280 + i) << 8);\n        arrLiteralLengths[i++] = 8;\n    }\n    for (i = 0; i < 30; i++) {\n        arrDistanceCodes[i] = CompressorHuffmanTree.bitReverse(i << 11);\n        arrDistanceLengths[i] = 5;\n    }\n})();\n\nconst crc32Table = [];\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nclass ZipArchive {\n    /**\n     * gets compression level\n     */\n    get compressionLevel() {\n        return this.level;\n    }\n    /**\n     * sets compression level\n     */\n    set compressionLevel(level) {\n        this.level = level;\n    }\n    /**\n     * gets items count\n     */\n    get length() {\n        if (this.files === undefined) {\n            return 0;\n        }\n        return this.files.length;\n    }\n    /**\n     * constructor for creating ZipArchive instance\n     */\n    constructor() {\n        this.files = [];\n        this.level = 'Normal';\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    /**\n     * add new item to archive\n     * @param {ZipArchiveItem} item - item to be added\n     * @returns {void}\n     */\n    addItem(item) {\n        if (item === null || item === undefined) {\n            throw new Error('ArgumentException: item cannot be null or undefined');\n        }\n        for (let i = 0; i < this.files.length; i++) {\n            let file = this.files[i];\n            if (file instanceof ZipArchiveItem) {\n                if (file.name === item.name) {\n                    throw new Error('item with same name already exist');\n                }\n            }\n        }\n        this.files.push(item);\n    }\n    /**\n     * add new directory to archive\n     * @param directoryName directoryName to be created\n     * @returns {void}\n     */\n    addDirectory(directoryName) {\n        if (directoryName === null || directoryName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (directoryName.length === 0) {\n            throw new Error('ArgumentException: string cannot be empty');\n        }\n        if (directoryName.slice(-1) !== '/') {\n            directoryName += '/';\n        }\n        if (this.files.indexOf(directoryName) !== -1) {\n            throw new Error('item with same name already exist');\n        }\n        this.files.push(directoryName);\n    }\n    /**\n     * gets item at specified index\n     * @param {number} index - item index\n     * @returns {ZipArchiveItem}\n     */\n    getItem(index) {\n        if (index >= 0 && index < this.files.length) {\n            return this.files[index];\n        }\n        return undefined;\n    }\n    /**\n     * determines whether an element is in the collection\n     * @param {string | ZipArchiveItem} item - item to search\n     * @returns {boolean}\n     */\n    contains(item) {\n        return this.files.indexOf(item) !== -1 ? true : false;\n    }\n    /**\n     * save archive with specified file name\n     * @param {string} fileName save archive with specified file name\n     * @returns {Promise<ZipArchive>}\n     */\n    save(fileName) {\n        if (fileName === null || fileName === undefined || fileName.length === 0) {\n            throw new Error('ArgumentException: fileName cannot be null or undefined');\n        }\n        if (this.files.length === 0) {\n            throw new Error('InvalidOperation');\n        }\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            zipArchive.saveInternal(fileName, false).then(() => {\n                resolve(zipArchive);\n            });\n        });\n    }\n    /**\n     * Save archive as blob\n     * @return {Promise<Blob>}\n     */\n    saveAsBlob() {\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            zipArchive.saveInternal('', true).then((blob) => {\n                resolve(blob);\n            });\n        });\n    }\n    saveInternal(fileName, skipFileSave) {\n        let zipArchive = this;\n        let promise;\n        return promise = new Promise((resolve, reject) => {\n            let zipData = [];\n            let dirLength = 0;\n            for (let i = 0; i < zipArchive.files.length; i++) {\n                let compressedObject = this.getCompressedData(this.files[i]);\n                compressedObject.then((data) => {\n                    dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n                    if (zipData.length === zipArchive.files.length) {\n                        let blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n                        resolve(blob);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        if (this.files !== undefined && this.files.length > 0) {\n            for (let i = 0; i < this.files.length; i++) {\n                let file = this.files[i];\n                if (file instanceof ZipArchiveItem) {\n                    file.destroy();\n                }\n                file = undefined;\n            }\n            this.files = [];\n        }\n        this.files = undefined;\n        this.level = undefined;\n    }\n    getCompressedData(item) {\n        let zipArchive = this;\n        let promise = new Promise((resolve, reject) => {\n            if (item instanceof ZipArchiveItem) {\n                let reader = new FileReader();\n                reader.onload = () => {\n                    let input = new Uint8Array(reader.result);\n                    let data = {\n                        fileName: item.name, crc32Value: 0, compressedData: [],\n                        compressedSize: undefined, uncompressedDataSize: input.length, compressionType: undefined,\n                        isDirectory: false\n                    };\n                    if (zipArchive.level === 'Normal') {\n                        zipArchive.compressData(input, data, crc32Table);\n                        let length = 0;\n                        for (let i = 0; i < data.compressedData.length; i++) {\n                            length += data.compressedData[i].length;\n                        }\n                        data.compressedSize = length;\n                        data.compressionType = '\\x08\\x00'; //Deflated = 8\n                    }\n                    else {\n                        data.compressedSize = input.length;\n                        data.crc32Value = zipArchive.calculateCrc32Value(0, input, crc32Table);\n                        data.compressionType = '\\x00\\x00'; // Stored = 0\n                        data.compressedData.push(input);\n                    }\n                    resolve(data);\n                };\n                reader.readAsArrayBuffer(item.data);\n            }\n            else {\n                let data = {\n                    fileName: item, crc32Value: 0, compressedData: '', compressedSize: 0, uncompressedDataSize: 0,\n                    compressionType: '\\x00\\x00', isDirectory: true\n                };\n                resolve(data);\n            }\n        });\n        return promise;\n    }\n    compressData(input, data, crc32Table) {\n        let compressor = new CompressedStreamWriter(true);\n        let currentIndex = 0;\n        let nextIndex = 0;\n        do {\n            if (currentIndex >= input.length) {\n                compressor.close();\n                break;\n            }\n            nextIndex = Math.min(input.length, currentIndex + 16384);\n            let subArray = input.subarray(currentIndex, nextIndex);\n            data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n            compressor.write(subArray, 0, nextIndex - currentIndex);\n            currentIndex = nextIndex;\n        } while (currentIndex <= input.length);\n        data.compressedData = compressor.compressedData;\n        compressor.destroy();\n    }\n    constructZippedObject(zipParts, data, dirLength, isDirectory) {\n        let extFileAttr = 0;\n        let date = new Date();\n        if (isDirectory) {\n            extFileAttr = extFileAttr | 0x00010; // directory flag\n        }\n        extFileAttr = extFileAttr | (0 & 0x3F);\n        let header = this.writeHeader(data, date);\n        let localHeader = 'PK\\x03\\x04' + header + data.fileName;\n        let centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n        zipParts.push({ localHeader: localHeader, centralDir: centralDir, compressedData: data });\n        return dirLength + localHeader.length + data.compressedSize;\n    }\n    writeHeader(data, date) {\n        let zipHeader = '';\n        zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n        zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n        zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n        zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n        zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n        zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n        zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n        zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n        zipHeader += this.getBytes(0, 2); // extra field length\n        return zipHeader;\n    }\n    writeZippedContent(fileName, zipData, localDirLen, skipFileSave) {\n        let cenDirLen = 0;\n        let buffer = [];\n        for (let i = 0; i < zipData.length; i++) {\n            let item = zipData[i];\n            cenDirLen += item.centralDir.length;\n            buffer.push(this.getArrayBuffer(item.localHeader));\n            while (item.compressedData.compressedData.length) {\n                buffer.push(item.compressedData.compressedData.shift().buffer);\n            }\n        }\n        for (let i = 0; i < zipData.length; i++) {\n            buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n        }\n        buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n        let blob = new Blob(buffer, { type: 'application/zip' });\n        if (!skipFileSave) {\n            Save.save(fileName, blob);\n        }\n        return blob;\n    }\n    writeCentralDirectory(data, localHeader, offset, externalFileAttribute) {\n        let directoryHeader = 'PK\\x01\\x02' +\n            this.getBytes(0x0014, 2) + localHeader + // inherit from file header\n            this.getBytes(0, 2) + // comment length\n            '\\x00\\x00' + '\\x00\\x00' + // internal file attributes \n            this.getBytes(externalFileAttribute, 4) + // external file attributes\n            this.getBytes(offset, 4) + // local fileHeader relative offset\n            data.fileName;\n        return directoryHeader;\n    }\n    writeFooter(zipData, centralLength, localLength) {\n        let dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' +\n            this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) +\n            this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) +\n            this.getBytes(0, 2);\n        return dirEnd;\n    }\n    getArrayBuffer(input) {\n        let a = new Uint8Array(input.length);\n        for (let j = 0; j < input.length; ++j) {\n            a[j] = input.charCodeAt(j) & 0xFF;\n        }\n        return a.buffer;\n    }\n    getBytes(value, offset) {\n        let bytes = '';\n        for (let i = 0; i < offset; i++) {\n            bytes += String.fromCharCode(value & 0xff);\n            value = value >>> 8;\n        }\n        return bytes;\n    }\n    getModifiedTime(date) {\n        let modTime = date.getHours();\n        modTime = modTime << 6;\n        modTime = modTime | date.getMinutes();\n        modTime = modTime << 5;\n        return modTime = modTime | date.getSeconds() / 2;\n    }\n    getModifiedDate(date) {\n        let modiDate = date.getFullYear() - 1980;\n        modiDate = modiDate << 4;\n        modiDate = modiDate | (date.getMonth() + 1);\n        modiDate = modiDate << 5;\n        return modiDate = modiDate | date.getDate();\n    }\n    calculateCrc32Value(crc32Value, input, crc32Table) {\n        crc32Value ^= -1;\n        for (let i = 0; i < input.length; i++) {\n            crc32Value = (crc32Value >>> 8) ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n        }\n        return (crc32Value ^ (-1));\n    }\n}\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nclass ZipArchiveItem {\n    /**\n     * Get the name of archive item\n     * @returns string\n     */\n    get name() {\n        return this.fileName;\n    }\n    /**\n     * Set the name of archive item\n     * @param  {string} value\n     */\n    set name(value) {\n        this.fileName = value;\n    }\n    /**\n     * constructor for creating {ZipArchiveItem} instance\n     * @param {Blob|ArrayBuffer} data file data\n     * @param {itemName} itemName absolute file path\n     */\n    constructor(data, itemName) {\n        if (data === null || data === undefined) {\n            throw new Error('ArgumentException: data cannot be null or undefined');\n        }\n        if (itemName === null || itemName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (itemName.length === 0) {\n            throw new Error('string cannot be empty');\n        }\n        this.data = data;\n        this.name = itemName;\n    }\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    destroy() {\n        this.fileName = undefined;\n        this.data = undefined;\n    }\n}\n/**\n * construct cyclic redundancy code table\n */\n(() => {\n    let i;\n    for (let j = 0; j < 256; j++) {\n        i = j;\n        for (let k = 0; k < 8; k++) {\n            i = ((i & 1) ? (0xEDB88320 ^ (i >>> 1)) : (i >>> 1));\n        }\n        crc32Table[j] = i;\n    }\n})();\n\n/**\n * export ZipArchive class\n */\n\nexport { ZipArchive, ZipArchiveItem, CompressedStreamWriter, CompressorHuffmanTree, ChecksumCalculator };\n//# sourceMappingURL=ej2-compression.es2015.js.map\n"]}