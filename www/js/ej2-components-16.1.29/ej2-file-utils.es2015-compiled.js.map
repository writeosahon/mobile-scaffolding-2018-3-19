{"version":3,"sources":["ej2-file-utils.es2015.js"],"names":[],"mappings":"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","file":"ej2-file-utils.es2015-compiled.js","sourcesContent":["/**\n * Encoding class: Contains the details about encoding type, whether to write a Unicode byte order mark (BOM).\n * ```typescript\n * let encoding : Encoding = new Encoding();\n * encoding.type = 'Utf8';\n * encoding.getBytes('Encoding', 0, 5);\n * ```\n */\nclass Encoding {\n    /**\n     * Initializes a new instance of the Encoding class. A parameter specifies whether to write a Unicode byte order mark\n     * @param  {boolean} includeBom?-true to specify that a Unicode byte order mark is written; otherwise, false.\n     */\n    constructor(includeBom) {\n        this.emitBOM = true;\n        this.encodingType = 'Ansi';\n        this.initBOM(includeBom);\n    }\n    /**\n     * Gets a value indicating whether to write a Unicode byte order mark\n     * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false\n     */\n    get includeBom() {\n        return this.emitBOM;\n    }\n    /**\n     * Gets the encoding type.\n     * @returns EncodingType\n     */\n    get type() {\n        return this.encodingType;\n    }\n    /**\n     * Sets the encoding type.\n     * @param  {EncodingType} value\n     */\n    set type(value) {\n        this.encodingType = value;\n    }\n    /**\n     * Initialize the includeBom to emit BOM or Not\n     * @param  {boolean} includeBom\n     */\n    initBOM(includeBom) {\n        if (includeBom === undefined || includeBom === null) {\n            this.emitBOM = true;\n        }\n        else {\n            this.emitBOM = includeBom;\n        }\n    }\n    /**\n     * Calculates the number of bytes produced by encoding the characters in the specified string\n     * @param  {string} chars - The string containing the set of characters to encode\n     * @returns {number} - The number of bytes produced by encoding the specified characters\n     */\n    getByteCount(chars) {\n        validateNullOrUndefined(chars, 'string');\n        if (chars === '') {\n            let byte = this.utf8Len(chars.charCodeAt(0));\n            return byte;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        return this.getByteCountInternal(chars, 0, chars.length);\n    }\n    /**\n     * Return the Byte of character\n     * @param  {number} codePoint\n     * @returns {number}\n     */\n    utf8Len(codePoint) {\n        let bytes = codePoint <= 0x7F ? 1 :\n            codePoint <= 0x7FF ? 2 :\n                codePoint <= 0xFFFF ? 3 :\n                    codePoint <= 0x1FFFFF ? 4 : 0;\n        return bytes;\n    }\n    /**\n     * for 4 byte character return surrogate pair true, otherwise false\n     * @param  {number} codeUnit\n     * @returns {boolean}\n     */\n    isHighSurrogate(codeUnit) {\n        return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;\n    }\n    /**\n     * for 4byte character generate the surrogate pair\n     * @param  {number} highCodeUnit\n     * @param  {number} lowCodeUnit\n     */\n    toCodepoint(highCodeUnit, lowCodeUnit) {\n        highCodeUnit = (0x3FF & highCodeUnit) << 10;\n        let u = highCodeUnit | (0x3FF & lowCodeUnit);\n        return u + 0x10000;\n    }\n    /**\n     * private method to get the byte count for specific charindex and count\n     * @param  {string} chars\n     * @param  {number} charIndex\n     * @param  {number} charCount\n     */\n    getByteCountInternal(chars, charIndex, charCount) {\n        let byteCount = 0;\n        if (this.encodingType === 'Utf8' || this.encodingType === 'Unicode') {\n            let isUtf8 = this.encodingType === 'Utf8';\n            for (let i = 0; i < charCount; i++) {\n                let charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);\n                if (this.isHighSurrogate(charCode)) {\n                    if (isUtf8) {\n                        let high = charCode;\n                        let low = chars.charCodeAt(++charIndex);\n                        byteCount += this.utf8Len(this.toCodepoint(high, low));\n                    }\n                    else {\n                        byteCount += 4;\n                        ++i;\n                    }\n                }\n                else {\n                    if (isUtf8) {\n                        byteCount += this.utf8Len(charCode);\n                    }\n                    else {\n                        byteCount += 2;\n                    }\n                }\n                if (isUtf8) {\n                    charIndex++;\n                }\n            }\n            return byteCount;\n        }\n        else {\n            byteCount = charCount;\n            return byteCount;\n        }\n    }\n    /**\n     * Encodes a set of characters from the specified string into the ArrayBuffer.\n     * @param  {string} s- The string containing the set of characters to encode\n     * @param  {number} charIndex-The index of the first character to encode.\n     * @param  {number} charCount- The number of characters to encode.\n     * @returns {ArrayBuffer} - The ArrayBuffer that contains the resulting sequence of bytes.\n     */\n    getBytes(s, charIndex, charCount) {\n        validateNullOrUndefined(s, 'string');\n        validateNullOrUndefined(charIndex, 'charIndex');\n        validateNullOrUndefined(charCount, 'charCount');\n        if (charIndex < 0 || charCount < 0) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex or charCount is less than zero');\n        }\n        if (s.length - charIndex < charCount) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string');\n        }\n        let bytes;\n        if (s === '') {\n            bytes = new ArrayBuffer(0);\n            return bytes;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        let byteCount = this.getByteCountInternal(s, charIndex, charCount);\n        switch (this.type) {\n            case 'Utf8':\n                bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            case 'Unicode':\n                bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            default:\n                bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n        }\n    }\n    /**\n     * Decodes a sequence of bytes from the specified ArrayBuffer into the string.\n     * @param  {ArrayBuffer} bytes- The ArrayBuffer containing the sequence of bytes to decode.\n     * @param  {number} index- The index of the first byte to decode.\n     * @param  {number} count- The number of bytes to decode.\n     * @returns {string} - The string that contains the resulting set of characters.\n     */\n    getString(bytes, index, count) {\n        validateNullOrUndefined(bytes, 'bytes');\n        validateNullOrUndefined(index, 'index');\n        validateNullOrUndefined(count, 'count');\n        if (index < 0 || count < 0) {\n            throw new RangeError('Argument Out Of Range Exception: index or count is less than zero');\n        }\n        if (bytes.byteLength - index < count) {\n            throw new RangeError('Argument Out Of Range Exception: index and count do not denote a valid range in bytes');\n        }\n        if (bytes.byteLength === 0 || count === 0) {\n            return '';\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        let out = '';\n        let byteCal = new Uint8Array(bytes);\n        switch (this.type) {\n            case 'Utf8':\n                let s = this.getStringOfUtf8Encoding(byteCal, index, count);\n                return s;\n            case 'Unicode':\n                let byteUnicode = new Uint16Array(bytes);\n                out = this.getStringofUnicodeEncoding(byteUnicode, index, count);\n                return out;\n            default:\n                let j = index;\n                for (let i = 0; i < count; i++) {\n                    let c = byteCal[j];\n                    out += String.fromCharCode(c); // 1 byte(ASCII) character                  \n                    j++;\n                }\n                return out;\n        }\n    }\n    getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount) {\n        let bytes = new ArrayBuffer(byteCount);\n        let bufview = new Uint8Array(bytes);\n        let k = 0;\n        for (let i = 0; i < charCount; i++) {\n            let charcode = s.charCodeAt(charIndex++);\n            if (charcode < 0x800) {\n                bufview[k] = charcode;\n            }\n            else {\n                bufview[k] = 63; //replacement character '?'\n            }\n            k++;\n        }\n        return bytes;\n    }\n    getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount) {\n        let bytes = new ArrayBuffer(byteCount);\n        let uint = new Uint8Array(bytes);\n        let index = charIndex;\n        let j = 0;\n        for (let i = 0; i < charCount; i++) {\n            let charcode = s.charCodeAt(index);\n            if (charcode <= 0x7F) {\n                uint[j] = charcode;\n            }\n            else if (charcode < 0x800) {\n                uint[j] = 0xc0 | (charcode >> 6);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else if ((charcode < 0xd800 || charcode >= 0xe000)) {\n                uint[j] = 0xe0 | (charcode >> 12);\n                uint[++j] = 0x80 | ((charcode >> 6) & 0x3f);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else {\n                uint[j] = 0xef;\n                uint[++j] = 0xbf;\n                uint[++j] = 0xbd; // U+FFFE \"replacement character\"\n            }\n            ++j;\n            ++index;\n        }\n        return bytes;\n    }\n    getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount) {\n        let bytes = new ArrayBuffer(byteCount);\n        let uint16 = new Uint16Array(bytes);\n        for (let i = 0; i < charCount; i++) {\n            let charcode = s.charCodeAt(i);\n            uint16[i] = charcode;\n        }\n        return bytes;\n    }\n    getStringOfUtf8Encoding(byteCal, index, count) {\n        let j = 0;\n        let i = index;\n        let s = '';\n        for (j; j < count; j++) {\n            let c = byteCal[i++];\n            while (i > byteCal.length) {\n                return s;\n            }\n            if (c > 127) {\n                if (c > 191 && c < 224 && i < count) {\n                    c = (c & 31) << 6 | byteCal[i] & 63;\n                }\n                else if (c > 223 && c < 240 && i < byteCal.byteLength) {\n                    c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                else if (c > 239 && c < 248 && i < byteCal.byteLength) {\n                    c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                ++i;\n            }\n            s += String.fromCharCode(c); // 1 byte(ASCII) character                          \n        }\n        return s;\n    }\n    getStringofUnicodeEncoding(byteUni, index, count) {\n        if (count > byteUni.length) {\n            throw new RangeError('ArgumentOutOfRange_Count');\n        }\n        let byte16 = new Uint16Array(count);\n        let out = '';\n        for (let i = 0; i < count && i < byteUni.length; i++) {\n            byte16[i] = byteUni[index++];\n        }\n        out = String.fromCharCode.apply(null, byte16);\n        return out;\n    }\n    /**\n     * To clear the encoding instance\n     * @return {void}\n     */\n    destroy() {\n        this.emitBOM = undefined;\n        this.encodingType = undefined;\n    }\n}\n/**\n * To check the object is null or undefined and throw error if it is null or undefined\n * @param {Object} value - object to check is null or undefined\n * @return {boolean}\n * @throws {ArgumentException} - if the value is null or undefined\n * @private\n */\nfunction validateNullOrUndefined(value, message) {\n    if (value === null || value === undefined) {\n        throw new Error('ArgumentException: ' + message + ' cannot be null or undefined');\n    }\n}\n\n/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nclass Save {\n    /**\n     * Initialize new instance of {save}\n     */\n    constructor() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    static save(fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        let extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        let mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            let downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    }\n    static saveInternal(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            let dataUrl = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl;\n            let event = document.createEvent('MouseEvent');\n            event.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event);\n            setTimeout(() => {\n                window.URL.revokeObjectURL(dataUrl);\n                dataUrl = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                let url = window.URL.createObjectURL(buffer);\n                let isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                let reader = new FileReader();\n                reader.onloadend = () => {\n                    let isPopupBlocked = window.open(reader.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader.result;\n                    }\n                };\n                reader.readAsDataURL(buffer);\n            }\n        }\n    }\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    static getMimeType(extension) {\n        let mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    }\n}\n\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\nclass StreamWriter {\n    /**\n     * Gets the content written to the StreamWriter as Blob.\n     * @returns Blob\n     */\n    get buffer() {\n        this.flush();\n        return this.bufferBlob;\n    }\n    /**\n     * Gets the encoding.\n     * @returns Encoding\n     */\n    get encoding() {\n        return this.enc;\n    }\n    /**\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\n     * @param  {Encoding} encoding?- The character encoding to use.\n     */\n    constructor(encoding) {\n        this.bufferBlob = new Blob(['']);\n        this.bufferText = '';\n        this.init(encoding);\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    init(encoding) {\n        if (encoding === null || encoding === undefined) {\n            this.enc = new Encoding(false);\n            this.enc.type = 'Utf8';\n        }\n        else {\n            this.enc = encoding;\n            this.setBomByte();\n        }\n    }\n    /**\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\n     */\n    setBomByte() {\n        if (this.encoding.includeBom) {\n            switch (this.encoding.type) {\n                case 'Unicode':\n                    let arrayUnicode = new ArrayBuffer(2);\n                    let uint8 = new Uint8Array(arrayUnicode);\n                    uint8[0] = 255;\n                    uint8[1] = 254;\n                    this.bufferBlob = new Blob([arrayUnicode]);\n                    break;\n                case 'Utf8':\n                    let arrayUtf8 = new ArrayBuffer(3);\n                    let utf8 = new Uint8Array(arrayUtf8);\n                    utf8[0] = 239;\n                    utf8[1] = 187;\n                    utf8[2] = 191;\n                    this.bufferBlob = new Blob([arrayUtf8]);\n                    break;\n                default:\n                    this.bufferBlob = new Blob(['']);\n                    break;\n            }\n        }\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName - The file name to save\n     * @returns {void}\n     */\n    save(fileName) {\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    }\n    /**\n     * Writes the specified string.\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n     * @returns {void}\n     */\n    write(value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText += value;\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    }\n    flush() {\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n            return;\n        }\n        let bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n        this.bufferText = '';\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n    }\n    /**\n     * Writes the specified string followed by a line terminator\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n     * @returns {void}\n     */\n    writeLine(value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText = this.bufferText + value + '\\r\\n';\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    }\n    /**\n     * Releases the resources used by the StreamWriter\n     * @returns {void}\n     */\n    destroy() {\n        this.bufferBlob = undefined;\n        this.bufferText = undefined;\n        if (this.enc instanceof Encoding) {\n            this.enc.destroy();\n        }\n        this.enc = undefined;\n    }\n}\n\n// export all modules from current location\n// example: export * from './module'\n/**\n * file utils modules\n */\n\nexport { StreamWriter, Encoding, validateNullOrUndefined, Save };\n//# sourceMappingURL=ej2-file-utils.es2015.js.map\n"]}