{"version":3,"sources":["ej2-pdf-export.es2015.js"],"names":[],"mappings":"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","file":"ej2-pdf-export.es2015-compiled.js","sourcesContent":["import { CompressedStreamWriter } from '@syncfusion/ej2-compression';\nimport { Encoding, StreamWriter } from '@syncfusion/ej2-file-utils';\n\n/**\n * @private\n * @hidden\n */\nfunction defaultToString(item) {\n    // if (item === null) {\n    //     return 'COLLECTION_NULL';\n    // } else if (typeof item === 'undefined') {\n    //     return 'COLLECTION_UNDEFINED';\n    // } else if (Object.prototype.toString.call(item) === '[object String]') {\n    if (Object.prototype.toString.call(item) === '[object String]') {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\n\n/**\n * Dictionary.ts class for EJ2-PDF\n * @private\n * @hidden\n */\n/**\n * @private\n * @hidden\n */\nclass Dictionary {\n    /**\n     * @private\n     * @hidden\n     */\n    constructor(toStringFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStringFunction || defaultToString;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    getValue(key) {\n        const pair = this.table['$' + this.toStr(key)];\n        if (typeof pair === 'undefined') {\n            return undefined;\n        }\n        return pair.value;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    setValue(key, value) {\n        // if (typeof key === 'undefined' || typeof value === 'undefined') {\n        //     return undefined;\n        // }\n        let ret;\n        const k = '$' + this.toStr(key);\n        const previousElement = this.table[k];\n        // if (typeof previousElement === 'undefined') {\n        this.nElements++;\n        ret = undefined;\n        // }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    remove(key) {\n        const k = '$' + this.toStr(key);\n        const previousElement = this.table[k];\n        // if (typeof previousElement !== 'undefined') {\n        delete this.table[k];\n        this.nElements--;\n        return previousElement.value;\n        // }\n        // return undefined;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    keys() {\n        const keysArray = [];\n        let namesOfKeys = Object.keys(this.table);\n        for (let index1 = 0; index1 < namesOfKeys.length; index1++) {\n            // if (Object.prototype.hasOwnProperty.call(this.table, namesOfKeys[index1])) {\n            const pair1 = this.table[namesOfKeys[index1]];\n            keysArray.push(pair1.key);\n            // }\n        }\n        return keysArray;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    values() {\n        const valuesArray = [];\n        let namesOfValues = Object.keys(this.table);\n        for (let index2 = 0; index2 < namesOfValues.length; index2++) {\n            // if (Object.prototype.hasOwnProperty.call(this.table, namesOfValues[index2])) {\n            const pair2 = this.table[namesOfValues[index2]];\n            valuesArray.push(pair2.value);\n            // }\n        }\n        return valuesArray;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    containsKey(key) {\n        let retutnValue = true;\n        if (typeof this.getValue(key) === 'undefined') {\n            retutnValue = true;\n        }\n        else {\n            retutnValue = false;\n        }\n        return !retutnValue;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    clear() {\n        this.table = {};\n        this.nElements = 0;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    size() {\n        return this.nElements;\n    }\n} // End of dictionary\n\n/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nclass PdfName {\n    constructor(value) {\n        /**\n         * `Start symbol` of the name object.\n         * @default /\n         * @private\n         */\n        this.stringStartMark = '/';\n        /**\n         * `Value` of the element.\n         * @private\n         */\n        this.internalValue = '';\n        /**\n         * Indicates if the object is currently in `saving state or not`.\n         * @default false\n         * @private\n         */\n        this.isSaving6 = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position6 = -1;\n        this.internalValue = this.normalizeValue(value);\n    }\n    //property\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status6;\n    }\n    set status(value) {\n        this.status6 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving6;\n    }\n    set isSaving(value) {\n        this.isSaving6 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index6;\n    }\n    set objectCollectionIndex(value) {\n        this.index6 = value;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position6;\n    }\n    set position(value) {\n        this.position6 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        return null;\n    }\n    /**\n     * Gets or sets the `value` of the object.\n     * @private\n     */\n    get value() {\n        return this.internalValue;\n    }\n    set value(value) {\n        // if (value !== this.value) {\n        let val = value;\n        if (value !== null && value.length > 0) {\n            // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n            val = value;\n            this.internalValue = this.normalizeValue(val);\n        }\n        else {\n            this.internalValue = val;\n        }\n        // }\n    }\n    //public methods\n    /**\n     * `Saves` the name using the specified writer.\n     * @private\n     */\n    save(writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.toString());\n    }\n    /**\n     * Gets `string` representation of the primitive.\n     * @private\n     */\n    toString() {\n        return (this.stringStartMark + this.escapeString(this.value));\n    }\n    /**\n     * Creates a `copy of PdfName`.\n     * @private\n     */\n    clone(crossTable) {\n        let newName = new PdfName();\n        newName.value = this.internalValue;\n        return newName;\n    }\n    /**\n     * Replace some characters with its `escape sequences`.\n     * @private\n     */\n    escapeString(stringValue) {\n        // if (str === null) {\n        //     throw new Error('ArgumentNullException : str');\n        // }\n        // if (str === '') {\n        //     return str;\n        // }\n        let result = '';\n        for (let i = 0, len = stringValue.length; i < len; i++) {\n            let ch = stringValue[i];\n            let index = PdfName.delimiters.indexOf(ch);\n            // switch (ch) {\n            //     case '\\r' :\n            //         result = result + '\\\\r';\n            //         break;\n            //     case '\\n' :\n            //         result = result + '\\n';\n            //         break;\n            //     case '(' :\n            //     case ')' :\n            //     case '\\\\' :\n            //         //result.Append( '\\\\' ).Append( ch );\n            //         result = result + ch;\n            //         break;\n            //     default :\n            //         result = result + ch;\n            //         break;\n            // }\n            result = result + ch;\n        }\n        return result;\n    }\n    //methiods\n    /**\n     * Replace a symbol with its code with the precedence of the `sharp sign`.\n     * @private\n     */\n    normalizeValue(value, c) {\n        // if (typeof c === undefined) {\n        //     let str : string = value;\n        //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n        //         str = this.normalizeValue(str, c);\n        //     }\n        //     return str;\n        // } else {\n        return value;\n        // }\n    }\n}\n/**\n * PDF `special characters`.\n * @private\n */\nPdfName.delimiters = '()<>[]{}/%}';\n/**\n * The symbols that are not allowed in PDF names and `should be replaced`.\n * @private\n */\nPdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n\n/**\n * PdfOperators.ts class for EJ2-PDF\n * Class of string PDF common operators.\n * @private\n */\nclass Operators {\n    /**\n     * Create an instance of `PdfOperator` class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Specifies the value of `test`.\n         * @private\n         */\n        this.forTest = 'test';\n        this.forTest = Operators.obj;\n    }\n}\n/**\n * Specifies the value of `obj`.\n * @private\n */\nOperators.obj = 'obj';\n/**\n * Specifies the value of `endObj`.\n * @private\n */\nOperators.endObj = 'endobj';\n/**\n * Specifies the value of `R`.\n * @private\n */\nOperators.r = 'R';\n/**\n * Specifies the value of ` `.\n * @private\n */\nOperators.whiteSpace = ' ';\n/**\n * Specifies the value of `/`.\n * @private\n */\nOperators.slash = '/';\n/**\n * Specifies the value of `\\r\\n`.\n * @private\n */\nOperators.newLine = '\\r\\n';\n/**\n * Specifies the value of `stream`.\n * @private\n */\nOperators.stream = 'stream';\n/**\n * Specifies the value of `endStream`.\n * @private\n */\nOperators.endStream = 'endstream';\n/**\n * Specifies the value of `xref`.\n * @private\n */\nOperators.xref = 'xref';\n/**\n * Specifies the value of `f`.\n * @private\n */\nOperators.f = 'f';\n/**\n * Specifies the value of `n`.\n * @private\n */\nOperators.n = 'n';\n/**\n * Specifies the value of `trailer`.\n * @private\n */\nOperators.trailer = 'trailer';\n/**\n * Specifies the value of `startxref`.\n * @private\n */\nOperators.startxref = 'startxref';\n/**\n * Specifies the value of `eof`.\n * @private\n */\nOperators.eof = '%%EOF';\n/**\n * Specifies the value of `header`.\n * @private\n */\nOperators.header = '%PDF-1.5';\n/**\n * Specifies the value of `beginText`.\n * @private\n */\nOperators.beginText = 'BT';\n/**\n * Specifies the value of `endText`.\n * @private\n */\nOperators.endText = 'ET';\n/**\n * Specifies the value of `m`.\n * @private\n */\nOperators.beginPath = 'm';\n/**\n * Specifies the value of `l`.\n * @private\n */\nOperators.appendLineSegment = 'l';\n/**\n * Specifies the value of `S`.\n * @private\n */\nOperators.stroke = 'S';\n/**\n * Specifies the value of `f`.\n * @private\n */\nOperators.fill = 'f';\n/**\n * Specifies the value of `f*`.\n * @private\n */\nOperators.fillEvenOdd = 'f*';\n/**\n * Specifies the value of `B`.\n * @private\n */\nOperators.fillStroke = 'B';\n/**\n * Specifies the value of `B*`.\n * @private\n */\nOperators.fillStrokeEvenOdd = 'B*';\n/**\n * Specifies the value of `c`.\n * @private\n */\nOperators.appendbeziercurve = 'c';\n/**\n * Specifies the value of `re`.\n * @private\n */\nOperators.appendRectangle = 're';\n/**\n * Specifies the value of `q`.\n * @private\n */\nOperators.saveState = 'q';\n/**\n * Specifies the value of `Q`.\n * @private\n */\nOperators.restoreState = 'Q';\n/**\n * Specifies the value of `Do`.\n * @private\n */\nOperators.paintXObject = 'Do';\n/**\n * Specifies the value of `cm`.\n * @private\n */\nOperators.modifyCtm = 'cm';\n/**\n * Specifies the value of `Tm`.\n * @private\n */\nOperators.modifyTM = 'Tm';\n/**\n * Specifies the value of `w`.\n * @private\n */\nOperators.setLineWidth = 'w';\n/**\n * Specifies the value of `J`.\n * @private\n */\nOperators.setLineCapStyle = 'J';\n/**\n * Specifies the value of `j`.\n * @private\n */\nOperators.setLineJoinStyle = 'j';\n/**\n * Specifies the value of `d`.\n * @private\n */\nOperators.setDashPattern = 'd';\n/**\n * Specifies the value of `i`.\n * @private\n */\nOperators.setFlatnessTolerance = 'i';\n/**\n * Specifies the value of `h`.\n * @private\n */\nOperators.closePath = 'h';\n/**\n * Specifies the value of `s`.\n * @private\n */\nOperators.closeStrokePath = 's';\n/**\n * Specifies the value of `b`.\n * @private\n */\nOperators.closeFillStrokePath = 'b';\n/**\n * Specifies the value of `setCharacterSpace`.\n * @private\n */\nOperators.setCharacterSpace = 'Tc';\n/**\n * Specifies the value of `setWordSpace`.\n * @private\n */\nOperators.setWordSpace = 'Tw';\n/**\n * Specifies the value of `setHorizontalScaling`.\n * @private\n */\nOperators.setHorizontalScaling = 'Tz';\n/**\n * Specifies the value of `setTextLeading`.\n * @private\n */\nOperators.setTextLeading = 'TL';\n/**\n * Specifies the value of `setFont`.\n * @private\n */\nOperators.setFont = 'Tf';\n/**\n * Specifies the value of `setRenderingMode`.\n * @private\n */\nOperators.setRenderingMode = 'Tr';\n/**\n * Specifies the value of `setTextRise`.\n * @private\n */\nOperators.setTextRise = 'Ts';\n/**\n * Specifies the value of `setTextScaling`.\n * @private\n */\nOperators.setTextScaling = 'Tz';\n/**\n * Specifies the value of `setCoords`.\n * @private\n */\nOperators.setCoords = 'Td';\n/**\n * Specifies the value of `goToNextLine`.\n * @private\n */\nOperators.goToNextLine = 'T*';\n/**\n * Specifies the value of `setText`.\n * @private\n */\nOperators.setText = 'Tj';\n/**\n * Specifies the value of `setTextWithFormatting`.\n * @private\n */\nOperators.setTextWithFormatting = 'TJ';\n/**\n * Specifies the value of `setTextOnNewLine`.\n * @private\n */\nOperators.setTextOnNewLine = '\\'';\n/**\n * Specifies the value of `selectcolorspaceforstroking`.\n * @private\n */\nOperators.selectcolorspaceforstroking = 'CS';\n/**\n * Specifies the value of `selectcolorspacefornonstroking`.\n * @private\n */\nOperators.selectcolorspacefornonstroking = 'cs';\n/**\n * Specifies the value of `setrbgcolorforstroking`.\n * @private\n */\nOperators.setrbgcolorforstroking = 'RG';\n/**\n * Specifies the value of `setrbgcolorfornonstroking`.\n * @private\n */\nOperators.setrbgcolorfornonstroking = 'rg';\n/**\n * Specifies the value of `K`.\n * @private\n */\nOperators.setcmykcolorforstroking = 'K';\n/**\n * Specifies the value of `k`.\n * @private\n */\nOperators.setcmykcolorfornonstroking = 'k';\n/**\n * Specifies the value of `G`.\n * @private\n */\nOperators.setgraycolorforstroking = 'G';\n/**\n * Specifies the value of `g`.\n * @private\n */\nOperators.setgraycolorfornonstroking = 'g';\n/**\n * Specifies the value of `W`.\n * @private\n */\nOperators.clipPath = 'W';\n/**\n * Specifies the value of `clipPathEvenOdd`.\n * @private\n */\nOperators.clipPathEvenOdd = 'W*';\n/**\n * Specifies the value of `n`.\n * @private\n */\nOperators.endPath = 'n';\n/**\n * Specifies the value of `setGraphicsState`.\n * @private\n */\nOperators.setGraphicsState = 'gs';\n/**\n * Specifies the value of `%`.\n * @private\n */\nOperators.comment = '%';\n/**\n * Specifies the value of `*`.\n * @private\n */\nOperators.evenOdd = '*';\n/**\n * Specifies the value of `M`.\n * @private\n */\nOperators.setMiterLimit = 'M';\n\n/**\n * dictionaryProperties.ts class for EJ2-PDF\n * PDF dictionary properties.\n * @private\n */\nclass DictionaryProperties {\n    /**\n     * Initialize an instance for `PdfDictionaryProperties` class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Specifies the value of `Pages`.\n         * @private\n         */\n        this.pages = 'Pages';\n        /**\n         * Specifies the value of `Kids`.\n         * @private\n         */\n        this.kids = 'Kids';\n        /**\n         * Specifies the value of `Count`.\n         * @private\n         */\n        this.count = 'Count';\n        /**\n         * Specifies the value of `Resources`.\n         * @private\n         */\n        this.resources = 'Resources';\n        /**\n         * Specifies the value of `Type`.\n         * @private\n         */\n        this.type = 'Type';\n        /**\n         * Specifies the value of `Size`.\n         * @private\n         */\n        this.size = 'Size';\n        /**\n         * Specifies the value of `MediaBox`.\n         * @private\n         */\n        this.mediaBox = 'MediaBox';\n        /**\n         * Specifies the value of `Parent`.\n         * @private\n         */\n        this.parent = 'Parent';\n        /**\n         * Specifies the value of `Root`.\n         * @private\n         */\n        this.root = 'Root';\n        /**\n         * Specifies the value of `DecodeParms`.\n         * @private\n         */\n        this.decodeParms = 'DecodeParms';\n        /**\n         * Specifies the value of `Filter`.\n         * @private\n         */\n        this.filter = 'Filter';\n        /**\n         * Specifies the value of `Font`.\n         * @private\n         */\n        this.font = 'Font';\n        /**\n         * Specifies the value of `Type1`.\n         * @private\n         */\n        this.type1 = 'Type1';\n        /**\n         * Specifies the value of `BaseFont`.\n         * @private\n         */\n        this.baseFont = 'BaseFont';\n        /**\n         * Specifies the value of `Encoding`.\n         * @private\n         */\n        this.encoding = 'Encoding';\n        /**\n         * Specifies the value of `Subtype`.\n         * @private\n         */\n        this.subtype = 'Subtype';\n        /**\n         * Specifies the value of `Contents`.\n         * @private\n         */\n        this.contents = 'Contents';\n        /**\n         * Specifies the value of `ProcSet`.\n         * @private\n         */\n        this.procset = 'ProcSet';\n        /**\n         * Specifies the value of `ColorSpace`.\n         * @private\n         */\n        this.colorSpace = 'ColorSpace';\n        /**\n         * Specifies the value of `ExtGState`.\n         * @private\n         */\n        this.extGState = 'ExtGState';\n        /**\n         * Specifies the value of `Pattern`.\n         * @private\n         */\n        this.pattern = 'Pattern';\n        /**\n         * Specifies the value of `XObject`.\n         * @private\n         */\n        this.xObject = 'XObject';\n        /**\n         * Specifies the value of `Length`.\n         * @private\n         */\n        this.length = 'Length';\n        /**\n         * Specifies the value of `Width`.\n         * @private\n         */\n        this.width = 'Width';\n        /**\n         * Specifies the value of `Height`.\n         * @private\n         */\n        this.height = 'Height';\n        /**\n         * Specifies the value of `BitsPerComponent`.\n         * @private\n         */\n        this.bitsPerComponent = 'BitsPerComponent';\n        /**\n         * Specifies the value of `Image`.\n         * @private\n         */\n        this.image = 'Image';\n        /**\n         * Specifies the value of `dctdecode`.\n         * @private\n         */\n        this.dctdecode = 'DCTDecode';\n        /**\n         * Specifies the value of `Columns`.\n         * @private\n         */\n        this.columns = 'Columns';\n        /**\n         * Specifies the value of `BlackIs1`.\n         * @private\n         */\n        this.blackIs1 = 'BlackIs1';\n        /**\n         * Specifies the value of `K`.\n         * @private\n         */\n        this.k = 'K';\n        /**\n         * Specifies the value of `S`.\n         * @private\n         */\n        this.s = 'S';\n        /**\n         * Specifies the value of `Predictor`.\n         * @private\n         */\n        this.predictor = 'Predictor';\n        /**\n         * Specifies the value of `DeviceRGB`.\n         * @private\n         */\n        this.deviceRgb = 'DeviceRGB';\n        /**\n         * Specifies the value of `Next`.\n         * @private\n         */\n        this.next = 'Next';\n        /**\n         * Specifies the value of `Action`.\n         * @private\n         */\n        this.action = 'Action';\n        /**\n         * Specifies the value of `Link`.\n         * @private\n         */\n        this.link = 'Link';\n        /**\n         *\n         * Specifies the value of `A`.\n         * @private\n         */\n        this.a = 'A';\n        /**\n         * Specifies the value of `Annot`.\n         * @private\n         */\n        this.annot = 'Annot';\n        /**\n         * Specifies the value of `P`.\n         * @private\n         */\n        this.p = 'P';\n        /**\n         * Specifies the value of `C`.\n         * @private\n         */\n        this.c = 'C';\n        /**\n         * Specifies the value of `Rect`.\n         * @private\n         */\n        this.rect = 'Rect';\n        /**\n         * Specifies the value of `URI`.\n         * @private\n         */\n        this.uri = 'URI';\n        /**\n         * Specifies the value of `Annots`.\n         * @private\n         */\n        this.annots = 'Annots';\n        /**\n         * Specifies the value of `ca`.\n         * @private\n         */\n        this.ca = 'ca';\n        /**\n         * Specifies the value of `CA`.\n         * @private\n         */\n        this.CA = 'CA';\n        /**\n         * Specifies the value of `XYZ`.\n         * @private\n         */\n        this.xyz = 'XYZ';\n        /**\n         * Specifies the value of `Fit`.\n         * @private\n         */\n        this.fit = 'Fit';\n        /**\n         * Specifies the value of `Dest`.\n         * @private\n         */\n        this.dest = 'Dest';\n        /**\n         * Specifies the value of `BM`.\n         * @private\n         */\n        this.BM = 'BM';\n        /**\n         * Specifies the value of `flatedecode`.\n         * @private\n         */\n        this.flatedecode = 'FlateDecode';\n        /**\n         * Specifies the value of `Rotate`.\n         * @private\n         */\n        this.rotate = 'Rotate';\n        /**\n         * Specifies the value of 'bBox'.\n         * @private\n         */\n        this.bBox = 'BBox';\n        /**\n         * Specifies the value of 'form'.\n         * @private\n         */\n        this.form = 'Form';\n        //\n    }\n}\n\n/**\n * `PdfDictionary` class is used to perform primitive operations.\n * @private\n */\nclass PdfDictionary {\n    constructor(dictionary) {\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position7 = -1;\n        /**\n         * The `IPdfSavable` with the specified key.\n         * @private\n         */\n        this.primitiveItems = new Dictionary();\n        /**\n         * `Start marker` for dictionary.\n         * @private\n         */\n        this.prefix = '<<';\n        /**\n         * `End marker` for dictionary.\n         * @private\n         */\n        this.suffix = '>>';\n        /**\n         * @hidden\n         * @private\n         */\n        this.resources = [];\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.object = null;\n        /**\n         * Flag for PDF file formar 1.5 is dictionary `archiving` needed.\n         * @default true\n         * @private\n         */\n        this.archive = true;\n        if (typeof dictionary === 'undefined') {\n            this.primitiveItems = new Dictionary();\n            this.encrypt = true;\n            this.dictionaryProperties = new DictionaryProperties();\n        }\n        else {\n            this.primitiveItems = new Dictionary();\n            let keys = dictionary.items.keys();\n            let values = dictionary.items.values();\n            for (let index = 0; index < dictionary.items.size(); index++) {\n                this.primitiveItems.setValue(keys[index], values[index]);\n            }\n            this.status = dictionary.status;\n            this.freezeChanges(this);\n            this.encrypt = true;\n            this.dictionaryProperties = new DictionaryProperties();\n        }\n    }\n    //Properties\n    /**\n     * Gets or sets the `IPdfSavable` with the specified key.\n     * @private\n     */\n    get items() {\n        return this.primitiveItems;\n    }\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status7;\n    }\n    set status(value) {\n        this.status7 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving7;\n    }\n    set isSaving(value) {\n        this.isSaving7 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index7;\n    }\n    set objectCollectionIndex(value) {\n        this.index7 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        return this.object;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position7;\n    }\n    set position(value) {\n        this.position7 = value;\n    }\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get Count() {\n        return this.primitiveItems.size();\n    }\n    /**\n     * Collection of `items` in the object.\n     * @private\n     */\n    get Dictionary() {\n        return this;\n    }\n    /**\n     * Get flag if need to `archive` dictionary.\n     * @private\n     */\n    getArchive() {\n        return this.archive;\n    }\n    /**\n     * Set flag if need to `archive` dictionary.\n     * @private\n     */\n    setArchive(value) {\n        this.archive = value;\n    }\n    /**\n     * Sets flag if `encryption` is needed.\n     * @private\n     */\n    setEncrypt(value) {\n        this.encrypt = value;\n        this.modify();\n    }\n    /**\n     * Gets flag if `encryption` is needed.\n     * @private\n     */\n    getEncrypt() {\n        return this.encrypt;\n    }\n    /**\n     * `Freezes` the changes.\n     * @private\n     */\n    freezeChanges(freezer) {\n        this.bChanged = false;\n    }\n    /**\n     * Creates a `copy of PdfDictionary`.\n     * @private\n     */\n    clone(crossTable) {\n        //Need to add more codings\n        let newDict = new PdfDictionary();\n        return newDict;\n    }\n    /**\n     * `Mark` this instance modified.\n     * @private\n     */\n    modify() {\n        this.bChanged = true;\n    }\n    /**\n     * `Removes` the specified key.\n     * @private\n     */\n    remove(key) {\n        if (typeof key !== 'string') {\n            this.primitiveItems.remove(key.value);\n            this.modify();\n        }\n        else {\n            this.remove(new PdfName(key));\n        }\n    }\n    /**\n     * `Determines` whether the dictionary contains the key.\n     * @private\n     */\n    containsKey(key) {\n        let returnValue = false;\n        returnValue = this.primitiveItems.containsKey(key.toString());\n        return returnValue;\n    }\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    onBeginSave() {\n        this.beginSave.sender.beginSave();\n    }\n    /**\n     * Raises event 'BeginSave'.\n     * @private\n     */\n    onTemplateBeginSave() {\n        this.pageBeginDrawTemplate.sender.pageBeginSave();\n    }\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    onBeginAnnotationSave() {\n        this.annotationBeginSave.sender.beginSave();\n    }\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    onSectionBeginSave(writer) {\n        let saveEvent = this.sectionBeginSave;\n        saveEvent.sender.beginSave(saveEvent.state, writer);\n    }\n    save(writer, bRaiseEvent) {\n        if (typeof bRaiseEvent === 'undefined') {\n            this.save(writer, true);\n        }\n        else {\n            writer.write(this.prefix);\n            if (typeof this.beginSave !== 'undefined') {\n                this.onBeginSave();\n            }\n            if (typeof this.annotationBeginSave !== 'undefined') {\n                this.onBeginAnnotationSave();\n            }\n            if (typeof this.sectionBeginSave !== 'undefined') {\n                this.onSectionBeginSave(writer);\n            }\n            if (typeof this.pageBeginDrawTemplate !== 'undefined') {\n                this.onTemplateBeginSave();\n            }\n            // }\n            if (this.Count > 0) {\n                this.saveItems(writer);\n            }\n            writer.write(this.suffix);\n            writer.write(Operators.newLine);\n        }\n    }\n    /**\n     * `Save dictionary items`.\n     * @private\n     */\n    saveItems(writer) {\n        writer.write(Operators.newLine);\n        let keys = this.primitiveItems.keys();\n        let values = this.primitiveItems.values();\n        for (let index = 0; index < keys.length; index++) {\n            let key = keys[index];\n            let name = new PdfName(key);\n            name.save(writer);\n            writer.write(Operators.whiteSpace);\n            let resources = values[index];\n            resources.save(writer);\n            writer.write(Operators.newLine);\n        }\n    }\n}\nclass SaveSectionCollectionEventHandler {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    constructor(sender) {\n        this.sender = sender;\n    }\n}\nclass SaveAnnotationEventHandler {\n    /**\n     * New instance for `save annotation event handler` class.\n     * @private\n     */\n    constructor(sender) {\n        this.sender = sender;\n    }\n}\nclass SaveSectionEventHandler {\n    // constructors\n    /**\n     * New instance for `save section event handler` class.\n     * @private\n     */\n    constructor(sender, state) {\n        this.sender = sender;\n        this.state = state;\n    }\n}\n/**\n * SaveTemplateEventHandler class used to store information about template elements.\n * @private\n * @hidden\n */\nclass SaveTemplateEventHandler {\n    /**\n     * New instance for save section collection event handler class.\n     * @public\n     */\n    constructor(sender) {\n        this.sender = sender;\n    }\n}\n\n/**\n * `PdfNumber` class is used to perform number related primitive operations.\n * @private\n */\nclass PdfNumber {\n    /**\n     * Initializes a new instance of the `PdfNumber` class.\n     * @private\n     */\n    constructor(value) {\n        /**\n         * Sotres the `position`.\n         * @default -1\n         * @private\n         */\n        this.position5 = -1;\n        this.value = value;\n    }\n    /**\n     * Gets or sets the `integer` value.\n     * @private\n     */\n    get intValue() {\n        return this.value;\n    }\n    set intValue(value) {\n        this.value = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this instance `is integer`.\n     * @private\n     */\n    get isInteger() {\n        return this.integer;\n    }\n    set isInteger(value) {\n        this.integer = value;\n    }\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status5;\n    }\n    set status(value) {\n        this.status5 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving5;\n    }\n    set isSaving(value) {\n        this.isSaving5 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index5;\n    }\n    set objectCollectionIndex(value) {\n        this.index5 = value;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position5;\n    }\n    set position(value) {\n        this.position5 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        let rValue = null;\n        return rValue;\n    }\n    /**\n     * `Saves the object`.\n     * @private\n     */\n    save(writer) {\n        writer.write(this.intValue.toString()); //tostring(CultureInfo.InletiantCulture)\n    }\n    /**\n     * Creates a `copy of PdfNumber`.\n     * @private\n     */\n    clone(crossTable) {\n        let newNumber = new PdfNumber(this.value);\n        return newNumber;\n    }\n    /**\n     * Converts a `float value to a string` using Adobe PDF rules.\n     * @private\n     */\n    static floatToString(number) {\n        // let tempString1 : string = number.toString();\n        // let tempString2 : string = tempString1.indexOf('.') != -1 ? tempString1.substring(0, tempString1.indexOf('.')) : tempString1;\n        let returnString = number.toFixed(2);\n        if (returnString === '0.00') {\n            returnString = '.00';\n        }\n        // let prefixLength : number = (22 - tempString2.length) >= 0 ? (22 - tempString2.length) : 0;\n        // for (let index : number = 0; index < prefixLength; index++) {\n        //     returnString += '0';\n        // }\n        // returnString += tempString2 + '.00';\n        // returnString += (tempString3.length > 6) ? tempString3.substring(0,6) : tempString3;\n        // let suffixLength : number = (6 - tempString3.length) >= 0 ? (6 - tempString3.length) : 0;\n        // for (let index : number = 0; index < suffixLength; index++) {\n        //     returnString += '0';\n        // }\n        return returnString;\n    }\n    /**\n     * Determines the `minimum of the three values`.\n     * @private\n     */\n    static min(x, y, z) {\n        let r = Math.min(x, y);\n        return Math.min(z, r);\n    }\n}\n\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\nclass PdfArray {\n    constructor(array) {\n        //Fields\n        /**\n         * `startMark` - '['\n         * @private\n         */\n        this.startMark = '[';\n        /**\n         * `endMark` - ']'.\n         * @private\n         */\n        this.endMark = ']';\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position9 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject9 = null;\n        if (typeof array === 'undefined') {\n            this.internalElements = [];\n        }\n        else {\n            if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n                let tempNumberArray = array;\n                for (let index = 0; index < tempNumberArray.length; index++) {\n                    let pdfNumber = new PdfNumber(tempNumberArray[index]);\n                    this.add(pdfNumber);\n                }\n                // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n            }\n            else {\n                let tempArray = array;\n                // if (tempArray.Elements.length > 0) {\n                this.internalElements = [];\n                for (let index = 0; index < tempArray.elements.length; index++) {\n                    this.internalElements.push(tempArray.elements[index]);\n                }\n                // }\n            }\n        }\n    }\n    //property\n    /**\n     * Gets the `IPdfSavable` at the specified index.\n     * @private\n     */\n    items(index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    }\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get count() {\n        return this.internalElements.length;\n    }\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status9;\n    }\n    set status(value) {\n        this.status9 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving9;\n    }\n    set isSaving(value) {\n        this.isSaving9 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        return this.clonedObject9;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position9;\n    }\n    set position(value) {\n        this.position9 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index9;\n    }\n    set objectCollectionIndex(value) {\n        this.index9 = value;\n    }\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get CrossTable() {\n        return this.pdfCrossTable;\n    }\n    /**\n     * Gets the `elements` of the Pdf Array.\n     * @private\n     */\n    get elements() {\n        return this.internalElements;\n    }\n    /**\n     * `Adds` the specified element to the PDF array.\n     * @private\n     */\n    add(element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : obj');\n        // }\n        if (typeof this.internalElements === 'undefined') {\n            this.internalElements = [];\n        }\n        this.internalElements.push(element);\n        this.markedChange();\n    }\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    markedChange() {\n        this.bChanged = true;\n    }\n    /**\n     * `Determines` whether the specified element is within the array.\n     * @private\n     */\n    contains(element) {\n        let returnValue = false;\n        for (let index = 0; index < this.internalElements.length; index++) {\n            let tempElement = this.internalElements[index];\n            let inputElement = element;\n            if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n                if (tempElement.value === inputElement.value) {\n                    return true;\n                }\n            }\n            // if (this.internalElements[index] === element) {\n            //     returnValue = true;\n            // }\n        }\n        return returnValue;\n    }\n    /**\n     * Returns the `primitive object` of input index.\n     * @private\n     */\n    getItems(index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    }\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    save(writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.startMark);\n        for (let i = 0, len = this.count; i < len; i++) {\n            this.getItems(i).save(writer);\n            if (i + 1 !== len) {\n                writer.write(Operators.whiteSpace);\n            }\n        }\n        writer.write(this.endMark);\n    }\n    /**\n     * Creates a `copy of PdfArray`.\n     * @private\n     */\n    clone(crossTable) {\n        // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n        //     return this.clonedObject9;\n        // } else {\n        this.clonedObject9 = null;\n        // Else clone the object.\n        let newArray = new PdfArray();\n        for (let index = 0; index < this.internalElements.length; index++) {\n            let obj = this.internalElements[index];\n            newArray.add(obj.clone(crossTable));\n        }\n        newArray.pdfCrossTable = crossTable;\n        this.clonedObject9 = newArray;\n        return newArray;\n    }\n    /**\n     * Creates filled PDF array `from the rectangle`.\n     * @private\n     */\n    static fromRectangle(bounds) {\n        let values = [bounds.x, bounds.y, bounds.width, bounds.height];\n        let array = new PdfArray(values);\n        return array;\n    }\n    // /**\n    //  * Creates the rectangle from filled PDF array.\n    //  * @private\n    //  */\n    // public ToRectangle() : RectangleF {\n    //     if (this.Count < 4) {\n    //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n    //     }\n    //     let x1 : number;\n    //     let x2 : number;\n    //     let y1 : number;\n    //     let y2 : number;\n    //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n    //     x1 = num.IntValue;\n    //     num = this.getItems(1) as PdfNumber;\n    //     y1 = num.IntValue;\n    //     num = this.getItems(2) as PdfNumber;\n    //     x2 = num.IntValue;\n    //     num = this.getItems(3) as PdfNumber;\n    //     y2 = num.IntValue;\n    //     let x : number = Math.min(x1, x2);\n    //     let y : number = Math.min(y1, y2);\n    //     let width : number = Math.abs(x1 - x2);\n    //     let height : number = Math.abs(y1 - y2);\n    //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n    //     return rect;\n    // }\n    /**\n     * `Inserts` the element into the array.\n     * @private\n     */\n    insert(index, element) {\n        if (index < this.internalElements.length && index > 0) {\n            let tempElements = [];\n            for (let i = 0; i < index; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            tempElements.push(element);\n            for (let i = index; i < this.internalElements.length; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            this.internalElements = tempElements;\n        }\n        else {\n            this.internalElements.push(element);\n        }\n        this.markChanged();\n    }\n    /**\n     * `Checks whether array contains the element`.\n     * @private\n     */\n    indexOf(element) {\n        return this.internalElements.indexOf(element);\n    }\n    /**\n     * `Removes` element from the array.\n     * @private\n     */\n    remove(element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : element');\n        // }\n        let index = this.internalElements.indexOf(element);\n        // if (index >= 0 && index < this.internalElements.length) {\n        this.internalElements[index] = null;\n        // }\n        this.markChanged();\n    }\n    /**\n     * `Remove` the element from the array by its index.\n     * @private\n     */\n    removeAt(index) {\n        // this.internalElements.RemoveAt(index);\n        if (this.internalElements.length > index) {\n            let tempArray = [];\n            for (let i = 0; i < index; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            for (let i = index + 1; i < this.internalElements.length; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            this.internalElements = tempArray;\n        }\n        this.markChanged();\n    }\n    /**\n     * `Clear` the array.\n     * @private\n     */\n    clear() {\n        this.internalElements = [];\n        this.markChanged();\n    }\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    markChanged() {\n        this.bChanged = true;\n    }\n}\n\n/**\n * `PdfStream` class is used to perform stream related primitive operations.\n * @private\n */\nclass PdfStream extends PdfDictionary {\n    constructor(dictionary, data) {\n        super(dictionary);\n        //Constants\n        /**\n         * @hidden\n         * @private\n         */\n        this.dicPrefix = 'stream';\n        /**\n         * @hidden\n         * @private\n         */\n        this.dicSuffix = 'endstream';\n        /**\n         * Internal variable to hold `cloned object`.\n         * @private\n         */\n        this.clonedObject2 = null;\n        /**\n         * @hidden\n         * @private\n         */\n        this.bCompress = true;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isImageStream = false;\n        if (typeof dictionary !== 'undefined' || typeof data !== 'undefined') {\n            this.dataStream2 = [];\n            this.dataStream2 = data;\n            this.bCompress2 = false;\n        }\n        else {\n            this.dataStream2 = [];\n            this.bCompress2 = true;\n            //Pending\n        }\n    }\n    /**\n     * Gets the `internal` stream.\n     * @private\n     */\n    get internalStream() {\n        return this.dataStream2;\n    }\n    set internalStream(value) {\n        this.dataStream2 = [];\n        this.dataStream2 = value;\n        this.modify();\n    }\n    /**\n     * Gets or sets 'is image' flag.\n     * @private\n     */\n    get isImage() {\n        return this.isImageStream;\n    }\n    set isImage(value) {\n        this.isImageStream = value;\n    }\n    /**\n     * Gets or sets `compression` flag.\n     * @private\n     */\n    get compress() {\n        return this.bCompress;\n    }\n    set compress(value) {\n        this.bCompress = value;\n        this.modify();\n    }\n    /**\n     * Gets or sets the `data`.\n     * @private\n     */\n    get data() {\n        return this.dataStream2;\n    }\n    set data(value) {\n        this.dataStream2 = [];\n        this.dataStream2 = value;\n        this.modify();\n    }\n    /**\n     * `Clear` the internal stream.\n     * @private\n     */\n    clearStream() {\n        this.internalStream = [];\n        this.remove(this.dictionaryProperties.filter);\n        this.bCompress = true;\n        this.modify();\n    }\n    /**\n     * `Writes` the specified string.\n     * @private\n     */\n    write(text) {\n        if (text == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        if (text.length <= 0) {\n            throw new Error('ArgumentException: Can not write an empty string, text');\n        }\n        this.dataStream2.push(text);\n        this.modify();\n    }\n    /**\n     * `Compresses the content` if it's required.\n     * @private\n     */\n    compressContent(data, writer) {\n        if (this.bCompress) {\n            let sw = new CompressedStreamWriter();\n            // data = 'Hello World!!!';\n            sw.write(data, 0, data.length);\n            sw.close();\n            data = sw.getCompressedString;\n            this.addFilter(this.dictionaryProperties.flatedecode);\n        }\n        return data;\n    }\n    /**\n     * `Adds a filter` to the filter array.\n     * @private\n     */\n    addFilter(filterName) {\n        let obj = this.items.getValue(this.dictionaryProperties.filter);\n        if (obj instanceof PdfReferenceHolder) {\n            let rh = obj;\n            obj = rh.object;\n        }\n        let array = obj;\n        let name = obj;\n        if (name != null) {\n            array = new PdfArray();\n            array.insert(0, name);\n            this.items.setValue(this.dictionaryProperties.filter, array);\n        }\n        name = new PdfName(filterName);\n        if (array == null) {\n            this.items.setValue(this.dictionaryProperties.filter, name);\n        }\n        else {\n            array.insert(0, name);\n        }\n    }\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    save(writer) {\n        let data = '';\n        for (let i = 0; i < this.data.length; i++) {\n            data = data + this.data[i];\n        }\n        if (data.length > 1 && !this.isImage) {\n            data = 'q\\r\\n' + data + 'Q\\r\\n';\n        }\n        data = this.compressContent(data, writer);\n        let length = data.length;\n        this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length));\n        super.save(writer, false);\n        writer.write(this.dicPrefix);\n        writer.write(Operators.newLine);\n        if (data.length > 0) {\n            writer.write(data);\n        }\n        writer.write(Operators.newLine);\n        writer.write(this.dicSuffix);\n        writer.write(Operators.newLine);\n    }\n    /**\n     * Converts `bytes to string`.\n     * @private\n     */\n    static bytesToString(byteArray) {\n        let output = '';\n        for (let i = 0; i < byteArray.length; i++) {\n            output = output + String.fromCharCode(byteArray[i]);\n        }\n        return output;\n    }\n}\n\n/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nvar InternalEnum;\n(function (InternalEnum) {\n    //Internals\n    /**\n     * public Enum for `ForceEncoding`.\n     * @private\n     */\n    let ForceEncoding;\n    (function (ForceEncoding) {\n        /**\n         * Specifies the type of `None`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n        /**\n         * Specifies the type of `Ascii`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n        /**\n         * Specifies the type of `Unicode`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n    /**\n     * public Enum for `SourceType`.\n     * @private\n     */\n    let SourceType;\n    (function (SourceType) {\n        /**\n         * Specifies the type of `StringValue`.\n         * @private\n         */\n        SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n        /**\n         * Specifies the type of `ByteBuffer`.\n         * @private\n         */\n        SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n    })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\nclass PdfString {\n    constructor(value) {\n        /**\n         * Value indicating whether the string was converted to hex.\n         * @default false\n         * @private\n         */\n        this.bHex = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position1 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject1 = null;\n        /**\n         * `Shows` if the data of the stream was decrypted.\n         * @default false\n         * @private\n         */\n        this.bDecrypted = false;\n        /**\n         * Shows if the data of the stream `was decrypted`.\n         * @default false\n         * @private\n         */\n        this.isParentDecrypted = false;\n        /**\n         * Gets a value indicating whether the object is `packed or not`.\n         * @default false\n         * @private\n         */\n        this.isPacked = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isFormField = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isColorSpace = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isHexString = true;\n        if (typeof value === 'undefined') {\n            this.bHex = false;\n        }\n        else {\n            if (!(value.length > 0 && value[0] === '0xfeff')) {\n                this.stringValue = value;\n                this.data = [];\n                for (let i = 0; i < value.length; ++i) {\n                    this.data.push(value.charCodeAt(i));\n                }\n            }\n        }\n    }\n    //Property\n    /**\n     * Gets a value indicating whether string is in `hex`.\n     * @private\n     */\n    get hex() {\n        return this.bHex;\n    }\n    /**\n     * Gets or sets string `value` of the object.\n     * @private\n     */\n    get value() {\n        return this.stringValue;\n    }\n    set value(value) {\n        this.stringValue = value;\n        this.data = null;\n    }\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status1;\n    }\n    set status(value) {\n        this.status1 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving1;\n    }\n    set isSaving(value) {\n        this.isSaving1 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index1;\n    }\n    set objectCollectionIndex(value) {\n        this.index1 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        return this.clonedObject1;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position1;\n    }\n    set position(value) {\n        this.position1 = value;\n    }\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get CrossTable() {\n        return this.crossTable;\n    }\n    //Methods\n    /**\n     * Converts `bytes to string using hex format` for representing string.\n     * @private\n     */\n    static bytesToHex(bytes) {\n        if (bytes == null) {\n            return '';\n        }\n        let builder = '';\n        return builder;\n    }\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    save(writer) {\n        if (writer === null) {\n            throw new Error('ArgumentNullException : writer');\n        }\n        writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n    }\n    /**\n     * Creates a `copy of PdfString`.\n     * @private\n     */\n    clone(crossTable) {\n        if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n            return this.clonedObject1;\n        }\n        else {\n            this.clonedObject1 = null;\n        }\n        let newString = new PdfString(this.stringValue);\n        newString.bHex = this.bHex;\n        newString.crossTable = crossTable;\n        newString.isColorSpace = this.isColorSpace;\n        this.clonedObject1 = newString;\n        return newString;\n    }\n}\n//constants = ;\n/**\n * `General markers` for string.\n * @private\n */\nPdfString.stringMark = '()';\n/**\n * `Hex markers` for string.\n * @private\n */\nPdfString.hexStringMark = '<>';\n/**\n * Format of password data.\n * @private\n */\nPdfString.hexFormatPattern = '{0:X2}';\n\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\nclass PdfReference {\n    constructor(objNumber, genNumber) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index3 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position3 = -1;\n        /**\n         * Holds the `object number`.\n         * @default 0\n         * @private\n         */\n        this.objNumber = 0;\n        /**\n         * Holds the `generation number` of the object.\n         * @default 0\n         * @private\n         */\n        this.genNumber = 0;\n        if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n            this.objNumber = objNumber;\n            this.genNumber = genNumber;\n            // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n        }\n        else {\n            this.objNumber = Number(objNumber);\n            this.genNumber = Number(genNumber);\n        }\n    }\n    //Property\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status3;\n    }\n    set status(value) {\n        this.status3 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving3;\n    }\n    set isSaving(value) {\n        this.isSaving3 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index3;\n    }\n    set objectCollectionIndex(value) {\n        this.index3 = value;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position3;\n    }\n    set position(value) {\n        this.position3 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        let returnObject3 = null;\n        return returnObject3;\n    }\n    //IPdfPrimitives methods\n    /**\n     * `Saves` the object.\n     * @private\n     */\n    save(writer) {\n        writer.write(this.toString());\n    }\n    /**\n     * Returns a `string` representing the object.\n     * @private\n     */\n    toString() {\n        return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n    }\n    /**\n     * Creates a `deep copy` of the IPdfPrimitive object.\n     * @private\n     */\n    clone(crossTable) {\n        return null;\n    }\n}\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\nclass PdfReferenceHolder {\n    constructor(obj1, obj2) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index4 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position4 = -1;\n        /**\n         * The `index` of the object within the object collection.\n         * @default -1\n         * @private\n         */\n        this.objectIndex = -1;\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (typeof obj2 === 'undefined') {\n        if (obj1 instanceof PdfArray\n            || obj1 instanceof PdfDictionary\n            || obj1 instanceof PdfName\n            || obj1 instanceof PdfNumber\n            || obj1 instanceof PdfStream\n            || obj1 instanceof PdfReference\n            || obj1 instanceof PdfString) {\n            // if (obj1 === null) {\n            //     throw new Error('ArgumentNullException : obj');\n            // }\n            this.primitiveObject = obj1;\n            // } else if (obj1 instanceof PdfPageBase\n            //             || obj1 instanceof PdfPage\n            //             || obj1 instanceof PdfSection\n            //             || obj1 instanceof PdfSectionCollection) {\n        }\n        else {\n            let tempObj = obj1;\n            this.constructor(tempObj.element);\n        }\n        // }\n        // else {\n        //     if (obj2 === null) {\n        //         throw new Error('ArgumentNullException : crossTable');\n        //     }\n        //     if (obj1 === null) {\n        //         throw new Error('ArgumentNullException : reference');\n        //     }\n        //     this.crossTable = obj2;\n        //     let tempObj1 : PdfReference = <PdfReference>obj1;\n        //     this.reference = tempObj1;\n        // }\n    }\n    //Properties\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.status4;\n    }\n    set status(value) {\n        this.status4 = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.isSaving4;\n    }\n    set isSaving(value) {\n        this.isSaving4 = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index4;\n    }\n    set objectCollectionIndex(value) {\n        this.index4 = value;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.position4;\n    }\n    set position(value) {\n        this.position4 = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        return null;\n    }\n    /**\n     * Gets the `object` the reference is of.\n     * @private\n     */\n    get object() {\n        // if ((this.reference != null) || (this.object == null)) {\n        //     this.object = this.GetterObject();\n        // }\n        return this.primitiveObject;\n    }\n    /**\n     * Gets the `reference`.\n     * @private\n     */\n    get reference() {\n        return this.pdfReference;\n    }\n    /**\n     * Gets the `index` of the object.\n     * @private\n     */\n    get index() {\n        // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n        // this.objectIndex = items.GetObjectIndex(this.reference);\n        // if (this.objectIndex < 0) {\n        //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n        //     this.objectIndex = items.Count - 1;\n        // }\n        return this.objectIndex;\n    }\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get element() {\n        return this.primitiveObject;\n    }\n    /**\n     * `Writes` a reference into a PDF document.\n     * @private\n     */\n    save(writer) {\n        // if (writer == null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        let position = writer.position;\n        let cTable = writer.document.crossTable;\n        // if (cTable.Document instanceof PdfDocument) {\n        this.object.isSaving = true;\n        // }\n        let reference = null;\n        // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n        //     if (this.reference === null) {\n        //         reference = cTable.GetReference(this.Object);\n        //     } else {\n        //         reference = this.reference;\n        //     }\n        // } else {\n        //     reference = cTable.GetReference(this.Object);\n        // }\n        // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n        reference = cTable.getReference(this.object);\n        // }\n        // if (writer.Position !== position) {\n        //     writer.Position = position;\n        // }\n        reference.save(writer);\n    }\n    /**\n     * Creates a `copy of PdfReferenceHolder`.\n     * @private\n     */\n    clone(crossTable) {\n        return null;\n    }\n}\n\n/**\n * `PdfAction` class represents base class for all action types.\n * @private\n */\nclass PdfAction {\n    // Constructors\n    /**\n     * Initialize instance for `Action` class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Specifies the Next `action` to perform.\n         * @private\n         */\n        this.action = null;\n        /**\n         * Specifies the Internal variable to store `dictionary properties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // super(); -> Object()\n        this.initialize();\n    }\n    // Properties\n    /**\n     * Gets and Sets the `Next` action to perform.\n     * @private\n     */\n    get next() {\n        return this.action;\n    }\n    set next(value) {\n        // if (this.action !== value) {\n        this.action = value;\n        this.dictionary.items.setValue(this.dictionaryProperties.next, new PdfReferenceHolder(this.action));\n        // }\n    }\n    /**\n     * Gets and Sets the instance of PdfDictionary class for `Dictionary`.\n     * @private\n     */\n    get dictionary() {\n        if (typeof this.pdfDictionary === 'undefined') {\n            this.pdfDictionary = new PdfDictionary();\n        }\n        return this.pdfDictionary;\n    }\n    // Implementation\n    /**\n     * `Initialize` the action type.\n     * @private\n     */\n    initialize() {\n        this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.action));\n    }\n    // IPdfWrapper Members\n    /**\n     * Gets the `Element` as IPdfPrimitive class.\n     * @private\n     */\n    get element() {\n        return this.dictionary;\n    }\n}\n\n/**\n * `PdfUriAction` class for initialize the uri related internals.\n * @private\n */\nclass PdfUriAction extends PdfAction {\n    constructor(uri) {\n        super();\n        // Fields\n        /**\n         * Specifies the `uri` string.\n         * @default ''.\n         * @private\n         */\n        this.uniformResourceIdentifier = '';\n    }\n    // Properties\n    /**\n     * Gets and Sets the value of `Uri`.\n     * @private\n     */\n    get uri() {\n        return this.uniformResourceIdentifier;\n    }\n    set uri(value) {\n        this.uniformResourceIdentifier = value;\n        this.dictionary.items.setValue(this.dictionaryProperties.uri, new PdfString(this.uniformResourceIdentifier));\n    }\n    // Implementation\n    /**\n     * `Initialize` the internals.\n     * @private\n     */\n    initialize() {\n        super.initialize();\n        this.dictionary.items.setValue(this.dictionaryProperties.s, new PdfName(this.dictionaryProperties.uri));\n    }\n}\n\n/**\n * public Enum for `PdfHorizontalAlignment`.\n * @private\n */\nvar PdfHorizontalAlignment;\n(function (PdfHorizontalAlignment) {\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Left\"] = 0] = \"Left\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Right\"] = 2] = \"Right\";\n})(PdfHorizontalAlignment || (PdfHorizontalAlignment = {}));\n/**\n * public Enum for `PdfVerticalAlignment`.\n * @private\n */\nvar PdfVerticalAlignment;\n(function (PdfVerticalAlignment) {\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Top\"] = 0] = \"Top\";\n    /**\n     * Specifies the type of `Middle`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Middle\"] = 1] = \"Middle\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Bottom\"] = 2] = \"Bottom\";\n})(PdfVerticalAlignment || (PdfVerticalAlignment = {}));\n/**\n * public Enum for `public`.\n * @private\n */\nvar PdfTextAlignment;\n(function (PdfTextAlignment) {\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Left\"] = 0] = \"Left\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Right\"] = 2] = \"Right\";\n    /**\n     * Specifies the type of `Justify`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Justify\"] = 3] = \"Justify\";\n})(PdfTextAlignment || (PdfTextAlignment = {}));\n/**\n * public Enum for `TextRenderingMode`.\n * @private\n */\nvar TextRenderingMode;\n(function (TextRenderingMode) {\n    /**\n     * Specifies the type of `Fill`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Fill\"] = 0] = \"Fill\";\n    /**\n     * Specifies the type of `Stroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Stroke\"] = 1] = \"Stroke\";\n    /**\n     * Specifies the type of `FillStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"FillStroke\"] = 2] = \"FillStroke\";\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"None\"] = 3] = \"None\";\n    /**\n     * Specifies the type of `ClipFlag`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFlag\"] = 4] = \"ClipFlag\";\n    /**\n     * Specifies the type of `ClipFill`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFill\"] = 4] = \"ClipFill\";\n    /**\n     * Specifies the type of `ClipStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipStroke\"] = 5] = \"ClipStroke\";\n    /**\n     * Specifies the type of `ClipFillStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFillStroke\"] = 6] = \"ClipFillStroke\";\n    /**\n     * Specifies the type of `Clip`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Clip\"] = 7] = \"Clip\";\n})(TextRenderingMode || (TextRenderingMode = {}));\n/**\n * public Enum for `PdfLineJoin`.\n * @private\n */\nvar PdfLineJoin;\n(function (PdfLineJoin) {\n    /**\n     * Specifies the type of `Miter`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Miter\"] = 0] = \"Miter\";\n    /**\n     * Specifies the type of `Round`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Round\"] = 1] = \"Round\";\n    /**\n     * Specifies the type of `Bevel`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Bevel\"] = 2] = \"Bevel\";\n})(PdfLineJoin || (PdfLineJoin = {}));\n/**\n * public Enum for `PdfLineCap`.\n * @private\n */\nvar PdfLineCap;\n(function (PdfLineCap) {\n    /**\n     * Specifies the type of `Flat`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Flat\"] = 0] = \"Flat\";\n    /**\n     * Specifies the type of `Round`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Round\"] = 1] = \"Round\";\n    /**\n     * Specifies the type of `Square`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Square\"] = 2] = \"Square\";\n})(PdfLineCap || (PdfLineCap = {}));\n/**\n * public Enum for `PdfDashStyle`.\n * @private\n */\nvar PdfDashStyle;\n(function (PdfDashStyle) {\n    /**\n     * Specifies the type of `Solid`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Solid\"] = 0] = \"Solid\";\n    /**\n     * Specifies the type of `Dash`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Dash\"] = 1] = \"Dash\";\n    /**\n     * Specifies the type of `Dot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Dot\"] = 2] = \"Dot\";\n    /**\n     * Specifies the type of `DashDot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"DashDot\"] = 3] = \"DashDot\";\n    /**\n     * Specifies the type of `DashDotDot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"DashDotDot\"] = 4] = \"DashDotDot\";\n    /**\n     * Specifies the type of `Custom`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Custom\"] = 5] = \"Custom\";\n})(PdfDashStyle || (PdfDashStyle = {}));\n/**\n * public Enum for `PdfFillMode`.\n * @private\n */\nvar PdfFillMode;\n(function (PdfFillMode) {\n    /**\n     * Specifies the type of `Winding`.\n     * @private\n     */\n    PdfFillMode[PdfFillMode[\"Winding\"] = 0] = \"Winding\";\n    /**\n     * Specifies the type of `Alternate`.\n     * @private\n     */\n    PdfFillMode[PdfFillMode[\"Alternate\"] = 1] = \"Alternate\";\n})(PdfFillMode || (PdfFillMode = {}));\n/**\n * public Enum for `PdfColorSpace`.\n * @private\n */\nvar PdfColorSpace;\n(function (PdfColorSpace) {\n    /**\n     * Specifies the type of `Rgb`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Rgb\"] = 0] = \"Rgb\";\n    /**\n     * Specifies the type of `Cmyk`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Cmyk\"] = 1] = \"Cmyk\";\n    /**\n     * Specifies the type of `GrayScale`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"GrayScale\"] = 2] = \"GrayScale\";\n    /**\n     * Specifies the type of `Indexed`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Indexed\"] = 3] = \"Indexed\";\n})(PdfColorSpace || (PdfColorSpace = {}));\n/**\n * public Enum for `PdfBlendMode`.\n * @private\n */\nvar PdfBlendMode;\n(function (PdfBlendMode) {\n    /**\n     * Specifies the type of `Normal`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * Specifies the type of `Multiply`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Multiply\"] = 1] = \"Multiply\";\n    /**\n     * Specifies the type of `Screen`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Screen\"] = 2] = \"Screen\";\n    /**\n     * Specifies the type of `Overlay`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Overlay\"] = 3] = \"Overlay\";\n    /**\n     * Specifies the type of `Darken`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Darken\"] = 4] = \"Darken\";\n    /**\n     * Specifies the type of `Lighten`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Lighten\"] = 5] = \"Lighten\";\n    /**\n     * Specifies the type of `ColorDodge`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"ColorDodge\"] = 6] = \"ColorDodge\";\n    /**\n     * Specifies the type of `ColorBurn`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"ColorBurn\"] = 7] = \"ColorBurn\";\n    /**\n     * Specifies the type of `HardLight`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"HardLight\"] = 8] = \"HardLight\";\n    /**\n     * Specifies the type of `SoftLight`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"SoftLight\"] = 9] = \"SoftLight\";\n    /**\n     * Specifies the type of `Difference`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Difference\"] = 10] = \"Difference\";\n    /**\n     * Specifies the type of `Exclusion`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Exclusion\"] = 11] = \"Exclusion\";\n    /**\n     * Specifies the type of `Hue`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Hue\"] = 12] = \"Hue\";\n    /**\n     * Specifies the type of `Saturation`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Saturation\"] = 13] = \"Saturation\";\n    /**\n     * Specifies the type of `Color`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Color\"] = 14] = \"Color\";\n    /**\n     * Specifies the type of `Luminosity`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Luminosity\"] = 15] = \"Luminosity\";\n})(PdfBlendMode || (PdfBlendMode = {}));\n/**\n * public Enum for `PdfGraphicsUnit`.\n * @private\n */\nvar PdfGraphicsUnit;\n(function (PdfGraphicsUnit) {\n    /**\n     * Specifies the type of `Centimeter`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Centimeter\"] = 0] = \"Centimeter\";\n    /**\n     * Specifies the type of `Pica`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Pica\"] = 1] = \"Pica\";\n    /**\n     * Specifies the type of `Pixel`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Pixel\"] = 2] = \"Pixel\";\n    /**\n     * Specifies the type of `Point`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Point\"] = 3] = \"Point\";\n    /**\n     * Specifies the type of `Inch`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Inch\"] = 4] = \"Inch\";\n    /**\n     * Specifies the type of `Document`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Document\"] = 5] = \"Document\";\n    /**\n     * Specifies the type of `Millimeter`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Millimeter\"] = 6] = \"Millimeter\";\n})(PdfGraphicsUnit || (PdfGraphicsUnit = {}));\n/**\n * public Enum for `PdfGridImagePosition`.\n * @private\n */\nvar PdfGridImagePosition;\n(function (PdfGridImagePosition) {\n    /**\n     * Specifies the type of `Fit`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Fit\"] = 0] = \"Fit\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Stretch`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Stretch\"] = 2] = \"Stretch\";\n    /**\n     * Specifies the type of `Tile`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Tile\"] = 3] = \"Tile\";\n})(PdfGridImagePosition || (PdfGridImagePosition = {}));\n\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\nclass PdfColor {\n    constructor(color1, color2, color3, color4) {\n        if (color1 instanceof PdfColor) {\n            this.redColor = color1.r;\n            this.greenColor = color1.g;\n            this.blueColor = color1.b;\n            this.grayColor = color1.gray;\n            this.alpha = color1.alpha;\n            this.filled = (this.alpha !== 0);\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' &&\n            typeof color4 === 'undefined') {\n            this.constructor(PdfColor.maxColourChannelValue, color1, color2, color3); //doubt-byte/float\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' && typeof color4 === 'number') {\n            this.redColor = color2;\n            this.cyanColor = 0;\n            this.greenColor = color3;\n            this.magentaColor = 0;\n            this.blueColor = color4;\n            this.yellowColor = 0;\n            this.blackColor = 0;\n            this.grayColor = 0;\n            this.alpha = color1;\n            this.filled = true;\n            this.assignCMYK(color2, color3, color4);\n        }\n    }\n    /**\n     * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n     * @private\n     */\n    assignCMYK(r, g, b) {\n        let red = r / PdfColor.maxColourChannelValue;\n        let green = g / PdfColor.maxColourChannelValue;\n        let blue = b / PdfColor.maxColourChannelValue;\n        let black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n        let cyan = (black === 1.0) ? 0 : (1 - red - black) / (1 - black);\n        let magenta = (black === 1.0) ? 0 : (1 - green - black) / (1 - black);\n        let yellow = (black === 1.0) ? 0 : (1 - blue - black) / (1 - black);\n        this.blackColor = black;\n        this.cyanColor = cyan;\n        this.magentaColor = magenta;\n        this.yellowColor = yellow;\n    }\n    //Properties\n    // public static get Empty():PdfColor\n    // {\n    //     return this.s_emptyColor\n    // }\n    /**\n     * Gets or sets `Red` channel value.\n     * @private\n     */\n    get r() {\n        return this.redColor;\n    }\n    set r(value) {\n        this.redColor = value;\n        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n        this.filled = true;\n    }\n    /**\n     * Gets the `Red` color\n     * @private\n     */\n    get red() {\n        return (this.r / PdfColor.maxColourChannelValue);\n    }\n    /**\n     * Gets or sets `Blue` channel value.\n     * @private\n     */\n    get b() {\n        return this.blueColor;\n    }\n    set b(value) {\n        this.blueColor = value;\n        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n        this.filled = true;\n    }\n    /**\n     * Gets the `blue` color.\n     * @private\n     */\n    get blue() {\n        return (this.b / PdfColor.maxColourChannelValue);\n    }\n    /**\n     *  Gets or sets `Green` channel value.\n     * @private\n     */\n    get g() {\n        return this.greenColor;\n    }\n    set g(value) {\n        this.greenColor = value;\n        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n        this.filled = true;\n    }\n    /**\n     * Gets the `Green` color.\n     * @private\n     */\n    get green() {\n        return (this.g / PdfColor.maxColourChannelValue);\n    }\n    /**\n     * Gets or sets `Gray` channel value.\n     * @private\n     */\n    get gray() {\n        return ((((this.redColor + this.greenColor) + this.blueColor)) / (PdfColor.maxColourChannelValue * 3));\n    }\n    set gray(value) {\n        if (value < 0) {\n            this.grayColor = 0;\n        }\n        else if (value > 1) {\n            this.grayColor = 1;\n        }\n        else {\n            this.grayColor = value;\n        }\n        this.r = (this.grayColor * PdfColor.maxColourChannelValue);\n        this.g = (this.grayColor * PdfColor.maxColourChannelValue);\n        this.b = (this.grayColor * PdfColor.maxColourChannelValue);\n        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n        this.filled = true;\n    }\n    /**\n     * Gets whether the PDFColor `is Empty` or not.\n     * @private\n     */\n    get isEmpty() {\n        return !this.filled;\n    }\n    /**\n     * Gets or sets `Alpha` channel value.\n     * @private\n     */\n    get a() {\n        return this.alpha;\n    }\n    set a(value) {\n        if (value < 0) {\n            this.alpha = 0;\n        }\n        else {\n            // if (this.alpha !== value) {\n            this.alpha = value;\n            // }\n        }\n        this.filled = true;\n    }\n    //Public methods\n    /**\n     * Converts `PDFColor to PDF string` representation.\n     * @private\n     */\n    toString(colorSpace, stroke) {\n        if (this.isEmpty) {\n            return '';\n        }\n        return this.rgbToString(stroke);\n    }\n    /**\n     * Sets `RGB` color.\n     * @private\n     */\n    rgbToString(ifStroking) {\n        let r = this.r;\n        let g = this.g;\n        let b = this.b;\n        let key = (r << 16) + (g << 8) + b;\n        if (ifStroking) {\n            key += 1 << 24;\n        }\n        let colour = '';\n        let obj = null;\n        if (PdfColor.rgbStrings.containsKey(key)) {\n            obj = PdfColor.rgbStrings.getValue(key);\n        }\n        if (obj == null) {\n            let red = r / PdfColor.maxColourChannelValue;\n            let green = g / PdfColor.maxColourChannelValue;\n            let blue = b / PdfColor.maxColourChannelValue;\n            if (ifStroking) {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n            }\n            else {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n            }\n            PdfColor.rgbStrings.setValue(key, colour);\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    }\n    /**\n     * Converts `colour to a PDF array`.\n     * @private\n     */\n    toArray(colorSpace) {\n        let array = new PdfArray();\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                array.add(new PdfNumber(this.red));\n                array.add(new PdfNumber(this.green));\n                array.add(new PdfNumber(this.blue));\n                break;\n            default:\n                throw new Error('NotSupportedException : Unsupported colour space.');\n        }\n        return array;\n    }\n}\n//Fields\n/**\n * Holds `RGB colors` converted into strings.\n * @private\n */\nPdfColor.rgbStrings = new Dictionary();\n/**\n * Holds Gray scale colors converted into strings for `stroking`.\n * @private\n */\nPdfColor.grayStringsSroke = new Dictionary();\n/**\n * Holds Gray scale colors converted into strings for `filling`.\n * @private\n */\nPdfColor.grayStringsFill = new Dictionary();\n/**\n * `Max value` of color channel.\n * @private\n */\nPdfColor.maxColourChannelValue = 255.0;\n\n/**\n * Coordinates of Position for `PointF`.\n * @private\n */\nclass PointF {\n    constructor(x, y) {\n        if (typeof x === 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else {\n            if (x !== null) {\n                this.x = x;\n            }\n            else {\n                this.x = 0;\n            }\n            if (y !== null) {\n                this.y = y;\n            }\n            else {\n                this.y = 0;\n            }\n        }\n    }\n}\n/**\n * Width and Height as `Size`.\n * @private\n */\nclass SizeF {\n    constructor(width, height) {\n        if (typeof height === 'undefined') {\n            this.height = 0;\n            this.width = 0;\n        }\n        else {\n            if (height !== null) {\n                this.height = height;\n            }\n            else {\n                this.height = 0;\n            }\n            if (width !== null) {\n                this.width = width;\n            }\n            else {\n                this.width = 0;\n            }\n        }\n    }\n}\n/**\n * `RectangleF` with Position and size.\n * @private\n */\nclass RectangleF {\n    constructor(arg1, arg2, arg3, arg4) {\n        if (typeof arg1 === typeof arg1 && typeof arg1 === 'undefined') {\n            this.x = 0;\n            this.y = 0;\n            this.height = 0;\n            this.width = 0;\n        }\n        else {\n            if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n                let pointf = arg1;\n                this.x = pointf.x;\n                this.y = pointf.y;\n                let sizef = arg2;\n                this.height = sizef.height;\n                this.width = sizef.width;\n            }\n            else {\n                let x = arg1;\n                let y = arg2;\n                let width = arg3;\n                let height = arg4;\n                this.x = x;\n                this.y = y;\n                this.height = height;\n                this.width = width;\n            }\n        }\n    }\n}\n\n/**\n * `PdfBrush` class provides objects used to fill the interiors of graphical shapes such as rectangles,\n * ellipses, pies, polygons, and paths.\n * @private\n */\nclass PdfBrush {\n    /**\n     * Creates instanceof `PdfBrush` class.\n     * @hidden\n     * @private\n     */\n    constructor() {\n        //\n    }\n}\n\n/**\n * Represents a brush that fills any object with a solid color.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfSolidBrush extends PdfBrush {\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfSolidBrush` class.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param color color of the brush\n     */\n    constructor(color) {\n        super();\n        this.pdfColor = color;\n    }\n    //Properties\n    /**\n     * Gets or sets the `color` of the brush.\n     * @private\n     */\n    get color() {\n        return this.pdfColor;\n    }\n    set color(value) {\n        this.pdfColor = value;\n    }\n    //Implementation\n    /**\n     * `Monitors` the changes of the brush and modify PDF state respectively.\n     * @private\n     */\n    monitorChanges(brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n        if (streamWriter == null) {\n            throw new Error('ArgumentNullException:streamWriter');\n        }\n        let diff = false;\n        if (brush == null) {\n            diff = true;\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n            return diff;\n        }\n        else {\n            diff = true;\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n            return diff;\n        }\n    }\n    /**\n     * `Resets` the changes, which were made by the brush.\n     * @private\n     */\n    resetChanges(streamWriter) {\n        streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);\n    }\n}\n\n/**\n * public Enum for `PdfFontStyle`.\n * @private\n */\nvar PdfFontStyle;\n(function (PdfFontStyle) {\n    /**\n     * Specifies the type of `Regular`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Regular\"] = 0] = \"Regular\";\n    /**\n     * Specifies the type of `Bold`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Bold\"] = 1] = \"Bold\";\n    /**\n     * Specifies the type of `Italic`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Italic\"] = 2] = \"Italic\";\n    /**\n     * Specifies the type of `Underline`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Underline\"] = 4] = \"Underline\";\n    /**\n     * Specifies the type of `Strikeout`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Strikeout\"] = 8] = \"Strikeout\";\n})(PdfFontStyle || (PdfFontStyle = {}));\n/**\n * Specifies the font family from the standard font.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * ```\n */\nvar PdfFontFamily;\n(function (PdfFontFamily) {\n    /**\n     * Specifies the `Helvetica` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Helvetica\"] = 0] = \"Helvetica\";\n    /**\n     * Specifies the `Courier` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Courier\"] = 1] = \"Courier\";\n    /**\n     * Specifies the `TimesRoman` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"TimesRoman\"] = 2] = \"TimesRoman\";\n    /**\n     * Specifies the `Symbol` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Symbol\"] = 3] = \"Symbol\";\n    /**\n     * Specifies the `ZapfDingbats` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"ZapfDingbats\"] = 4] = \"ZapfDingbats\";\n})(PdfFontFamily || (PdfFontFamily = {}));\n/**\n * public Enum for `PdfFontType`.\n * @private\n */\nvar PdfFontType;\n(function (PdfFontType) {\n    /**\n     * Specifies the type of `Standard`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"Standard\"] = 0] = \"Standard\";\n    /**\n     * Specifies the type of `TrueType`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueType\"] = 1] = \"TrueType\";\n    /**\n     * Specifies the type of `TrueTypeEmbedded`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueTypeEmbedded\"] = 2] = \"TrueTypeEmbedded\";\n})(PdfFontType || (PdfFontType = {}));\n/**\n * public Enum for `PdfWordWrapType`.\n * @private\n */\nvar PdfWordWrapType;\n(function (PdfWordWrapType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Word`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Word\"] = 1] = \"Word\";\n    /**\n     * Specifies the type of `WordOnly`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"WordOnly\"] = 2] = \"WordOnly\";\n    /**\n     * Specifies the type of `Character`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Character\"] = 3] = \"Character\";\n})(PdfWordWrapType || (PdfWordWrapType = {}));\n/**\n * public Enum for `PdfSubSuperScript`.\n * @private\n */\nvar PdfSubSuperScript;\n(function (PdfSubSuperScript) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `SuperScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SuperScript\"] = 1] = \"SuperScript\";\n    /**\n     * Specifies the type of `SubScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SubScript\"] = 2] = \"SubScript\";\n})(PdfSubSuperScript || (PdfSubSuperScript = {}));\n/**\n * public Enum for `FontEncoding`.\n * @private\n */\nvar FontEncoding;\n(function (FontEncoding) {\n    /**\n     * Specifies the type of `Unknown`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Specifies the type of `StandardEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"StandardEncoding\"] = 1] = \"StandardEncoding\";\n    /**\n     * Specifies the type of `MacRomanEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacRomanEncoding\"] = 2] = \"MacRomanEncoding\";\n    /**\n     * Specifies the type of `MacExpertEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacExpertEncoding\"] = 3] = \"MacExpertEncoding\";\n    /**\n     * Specifies the type of `WinAnsiEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"WinAnsiEncoding\"] = 4] = \"WinAnsiEncoding\";\n    /**\n     * Specifies the type of `PdfDocEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"PdfDocEncoding\"] = 5] = \"PdfDocEncoding\";\n    /**\n     * Specifies the type of `IdentityH`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"IdentityH\"] = 6] = \"IdentityH\";\n})(FontEncoding || (FontEncoding = {}));\n\n/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfStringFormat {\n    constructor(arg1, arg2) {\n        /**\n         * The `scaling factor` of the text being drawn.\n         * @private\n         */\n        this.scalingFactor = 100.0;\n        if (typeof arg1 === 'undefined') {\n            this.internalLineLimit = true;\n            this.wordWrapType = PdfWordWrapType.Word;\n        }\n        else if (typeof arg1 === 'string') {\n            this.constructor();\n        }\n        else {\n            if (typeof arg2 === 'undefined') {\n                this.constructor();\n                this.textAlignment = arg1;\n            }\n            else {\n                this.constructor(arg1);\n                this.verticalAlignment = arg2;\n            }\n        }\n    }\n    //Properties\n    /**\n     * Gets or sets the `horizontal` text alignment\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the text alignment\n     * stringFormat.alignment = PdfTextAlignment.Center;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get alignment() {\n        return this.textAlignment;\n    }\n    set alignment(value) {\n        this.textAlignment = value;\n    }\n    /**\n     * Gets or sets the `vertical` text alignment.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the vertical alignment\n     * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get lineAlignment() {\n        if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n            return PdfVerticalAlignment.Top;\n        }\n        else {\n            return this.verticalAlignment;\n        }\n    }\n    set lineAlignment(value) {\n        this.verticalAlignment = value;\n    }\n    /**\n     * Gets or sets the value that indicates text `direction` mode.\n     * @private\n     */\n    get rightToLeft() {\n        if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n            return false;\n        }\n        else {\n            return this.isRightToLeft;\n        }\n    }\n    set rightToLeft(value) {\n        this.isRightToLeft = value;\n    }\n    /**\n     * Gets or sets value that indicates a `size` among the characters in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set character spacing\n     * stringFormat.characterSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get characterSpacing() {\n        if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n            return 0;\n        }\n        else {\n            return this.internalCharacterSpacing;\n        }\n    }\n    set characterSpacing(value) {\n        this.internalCharacterSpacing = value;\n    }\n    /**\n     * Gets or sets value that indicates a `size` among the words in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set word spacing\n     * stringFormat.wordSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get wordSpacing() {\n        if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n            return 0;\n        }\n        else {\n            return this.internalWordSpacing;\n        }\n    }\n    set wordSpacing(value) {\n        this.internalWordSpacing = value;\n    }\n    /**\n     * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set string\n     * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n     * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n     * // set rectangle bounds\n     * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set line spacing\n     * stringFormat.lineSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get lineSpacing() {\n        if (typeof this.leading === 'undefined' || this.leading == null) {\n            return 0;\n        }\n        else {\n            return this.leading;\n        }\n    }\n    set lineSpacing(value) {\n        this.leading = value;\n    }\n    /**\n     * Gets or sets a value indicating whether the text is `clipped` or not.\n     * @private\n     */\n    get clipPath() {\n        if (typeof this.clip === 'undefined' || this.clip == null) {\n            return false;\n        }\n        else {\n            return this.clip;\n        }\n    }\n    set clipPath(value) {\n        this.clip = value;\n    }\n    /**\n     * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n     * @private\n     */\n    get subSuperScript() {\n        if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n            return PdfSubSuperScript.None;\n        }\n        else {\n            return this.pdfSubSuperScript;\n        }\n    }\n    set subSuperScript(value) {\n        this.pdfSubSuperScript = value;\n    }\n    /**\n     * Gets or sets the `indent` of the first line in the paragraph.\n     * @private\n     */\n    get paragraphIndent() {\n        if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n            return 0;\n        }\n        else {\n            return this.internalParagraphIndent;\n        }\n    }\n    set paragraphIndent(value) {\n        this.internalParagraphIndent = value;\n        this.firstLineIndent = value;\n    }\n    /**\n     * Gets or sets a value indicating whether [`line limit`].\n     * @private\n     */\n    get lineLimit() {\n        return this.internalLineLimit;\n    }\n    set lineLimit(value) {\n        this.internalLineLimit = value;\n    }\n    /**\n     * Gets or sets a value indicating whether [`measure trailing spaces`].\n     * @private\n     */\n    get measureTrailingSpaces() {\n        if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n            return false;\n        }\n        else {\n            return this.trailingSpaces;\n        }\n    }\n    set measureTrailingSpaces(value) {\n        this.trailingSpaces = value;\n    }\n    /**\n     * Gets or sets a value indicating whether [`no clip`].\n     * @private\n     */\n    get noClip() {\n        if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n            return false;\n        }\n        else {\n            return this.isNoClip;\n        }\n    }\n    set noClip(value) {\n        this.isNoClip = value;\n    }\n    /**\n     * Gets or sets value indicating type of the text `wrapping`.\n     * @private\n     */\n    get wordWrap() {\n        // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n        //     return PdfWordWrapType.Word;\n        // } else {\n        return this.wordWrapType;\n        // }\n    }\n    set wordWrap(value) {\n        this.wordWrapType = value;\n    }\n    /**\n     * Gets or sets the `scaling factor`.\n     * @private\n     */\n    get horizontalScalingFactor() {\n        // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n        //     return 100;\n        // } else {\n        return this.scalingFactor;\n        // }\n    }\n    set horizontalScalingFactor(value) {\n        if (value <= 0) {\n            throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n        }\n        this.scalingFactor = value;\n    }\n    /**\n     * Gets or sets the `indent` of the first line in the text.\n     * @private\n     */\n    get firstLineIndent() {\n        if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n            return 0;\n        }\n        else {\n            return this.initialLineIndent;\n        }\n    }\n    set firstLineIndent(value) {\n        this.initialLineIndent = value;\n    }\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    //IClonable implementation\n    clone() {\n        let format = this;\n        return format;\n    }\n}\n\n/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nclass StringTokenizer {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringTokenizer` class.\n     * @private\n     */\n    constructor(textValue) {\n        /**\n         * Current `position`.\n         * @private\n         */\n        this.currentPosition = 0;\n        if (textValue == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this.text = textValue;\n    }\n    // Properties\n    /**\n     * Gets text `length`.\n     * @private\n     */\n    get length() {\n        return this.text.length;\n    }\n    /**\n     * Gets or sets the position.\n     * @private\n     */\n    get position() {\n        return this.currentPosition;\n    }\n    set position(value) {\n        this.currentPosition = value;\n    }\n    static getCharsCount(text, symbols) {\n        if (typeof symbols === 'string') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:wholeText');\n            }\n            let numSymbols = 0;\n            let curIndex = 0;\n            for (;;) {\n                curIndex = text.indexOf(symbols, curIndex);\n                if (curIndex === -1) {\n                    break;\n                }\n                else {\n                    numSymbols++;\n                    curIndex++;\n                }\n            }\n            return numSymbols;\n        }\n        else {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (symbols == null) {\n                throw new Error('ArgumentNullException:symbols');\n            }\n            let count = 0;\n            for (let i = 0, len = text.length; i < len; i++) {\n                let ch = text[i];\n                if (this.contains(symbols, ch)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    readLine() {\n        let pos = this.currentPosition;\n        while (pos < this.length) {\n            let ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n': {\n                    let text = this.text.substring(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    this.currentPosition++;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            let text2 = this.text.substring(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    }\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    peekLine() {\n        let pos = this.currentPosition;\n        let line = this.readLine();\n        this.currentPosition = pos;\n        return line;\n    }\n    /**\n     * Reads a word from the text.\n     * @private\n     */\n    readWord() {\n        let pos = this.currentPosition;\n        while (pos < this.length) {\n            let ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    let textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return textValue;\n                case ' ':\n                case '\\t': {\n                    if (pos === this.currentPosition) {\n                        pos++;\n                    }\n                    let text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            let text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    }\n    /**\n     * Peeks a word from the text.\n     * @private\n     */\n    peekWord() {\n        let pos = this.currentPosition;\n        let word = this.readWord();\n        this.currentPosition = pos;\n        return word;\n    }\n    read(count) {\n        if (typeof count === 'undefined') {\n            let ch = '0';\n            return ch;\n        }\n        else {\n            let builder = '';\n            return builder;\n        }\n    }\n    /**\n     * Peeks char form the data.\n     * @private\n     */\n    peek() {\n        let ch = '0';\n        return ch;\n    }\n    /**\n     * Closes a reader.\n     * @private\n     */\n    close() {\n        this.text = null;\n    }\n    //Implementation\n    /**\n     * Checks whether array contains a symbol.\n     * @private\n     */\n    static contains(array, symbol) {\n        let contains = false;\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] === symbol) {\n                contains = true;\n                break;\n            }\n        }\n        return contains;\n    }\n}\n// Constants\n/**\n * `Whitespace` symbol.\n * @private\n */\nStringTokenizer.whiteSpace = ' ';\n/**\n * `tab` symbol.\n * @private\n */\nStringTokenizer.tab = '\\t';\n/**\n * Array of `spaces`.\n * @private\n */\nStringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n/**\n * `Pattern` for WhiteSpace.\n * @private\n */\nStringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n\n/**\n * Class `lay outing the text`.\n */\nclass PdfStringLayouter {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        //\n    }\n    layout(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        if (arg4 instanceof RectangleF) {\n            this.initialize(arg1, arg2, arg3, arg4, arg5);\n            this.isOverloadWithPosition = arg6;\n            this.clientSize = arg7;\n            let result = this.doLayout();\n            this.clear();\n            return result;\n        }\n        else {\n            this.initialize(arg1, arg2, arg3, arg4);\n            this.isOverloadWithPosition = arg5;\n            this.clientSize = arg6;\n            let result = this.doLayout();\n            this.clear();\n            return result;\n        }\n    }\n    initialize(text, font, format, rectSize, pageHeight) {\n        if (typeof pageHeight === 'number') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (font == null) {\n                throw new Error('ArgumentNullException:font');\n            }\n            this.text = text;\n            this.font = font;\n            this.format = format;\n            this.size = new SizeF(rectSize.width, rectSize.height);\n            this.rectangle = rectSize;\n            this.pageHeight = pageHeight;\n            this.reader = new StringTokenizer(text);\n        }\n        else {\n            this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);\n        }\n    }\n    /**\n     * `Clear` all resources.\n     * @private\n     */\n    clear() {\n        this.font = null;\n        this.format = null;\n        this.reader.close();\n        this.reader = null;\n        this.text = null;\n    }\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    doLayout() {\n        let result = new PdfStringLayoutResult();\n        let lineResult = new PdfStringLayoutResult();\n        let lines = [];\n        let line = this.reader.peekLine();\n        let lineIndent = this.getLineIndent(true);\n        while (line != null) {\n            lineResult = this.layoutLine(line, lineIndent);\n            // if (!lineResult.Empty) {\n            let numSymbolsInserted = 0;\n            /* tslint:disable */\n            let returnedValue = this.copyToResult(result, lineResult, lines, /*out*/ numSymbolsInserted);\n            /* tslint:enable */\n            let success = returnedValue.success;\n            numSymbolsInserted = returnedValue.numInserted;\n            this.reader.readLine();\n            line = this.reader.peekLine();\n            lineIndent = this.getLineIndent(false);\n        }\n        this.finalizeResult(result, lines);\n        return result;\n    }\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    getLineIndent(firstLine) {\n        let lineIndent = 0;\n        if (this.format != null) {\n            lineIndent = (firstLine) ? this.format.firstLineIndent : this.format.paragraphIndent;\n            lineIndent = (this.size.width > 0) ? Math.min(this.size.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    }\n    /**\n     * Calculates `height` of the line.\n     * @private\n     */\n    getLineHeight() {\n        let height = this.font.height;\n        if (this.format != null && this.format.lineSpacing !== 0) {\n            height = this.format.lineSpacing + this.font.height;\n        }\n        return height;\n    }\n    /**\n     * Calculates `width` of the line.\n     * @private\n     */\n    getLineWidth(line) {\n        let width = this.font.getLineWidth(line, this.format);\n        return width;\n    }\n    // tslint:disable\n    /**\n     * `Layouts` line.\n     * @private\n     */\n    layoutLine(line, lineIndent) {\n        let lineResult = new PdfStringLayoutResult();\n        lineResult.layoutLineHeight = this.getLineHeight();\n        let lines = [];\n        let maxWidth = this.size.width;\n        let lineWidth = this.getLineWidth(line) + lineIndent;\n        let lineType = LineType.FirstParagraphLine;\n        let readWord = true;\n        // line is in bounds.\n        if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n            this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);\n        }\n        else {\n            let builder = '';\n            let curLine = '';\n            lineWidth = lineIndent;\n            let curIndent = lineIndent;\n            let reader = new StringTokenizer(line);\n            let word = reader.peekWord();\n            let isSingleWord = false;\n            while (word != null) {\n                curLine = curLine + word;\n                let curLineWidth = this.getLineWidth(curLine.toString()) + curIndent;\n                if (curLineWidth > maxWidth) {\n                    if (this.getWrapType() == PdfWordWrapType.None)\n                        break;\n                    if (this.getWrapType() != PdfWordWrapType.Character || !readWord) {\n                        let ln = builder.toString();\n                        if (ln.indexOf(' ') === -1) {\n                            isSingleWord = true;\n                            this.addToLineResult(lineResult, lines, curLine, lineWidth, LineType.LayoutBreak | lineType);\n                        }\n                        else {\n                            this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n                        }\n                        if (this.isOverloadWithPosition) {\n                            maxWidth = this.clientSize.width;\n                        }\n                        curLine = '';\n                        builder = '';\n                        lineWidth = 0;\n                        curIndent = 0;\n                        curLineWidth = 0;\n                        lineType = LineType.None;\n                        if (isSingleWord) {\n                            reader.readWord();\n                            readWord = false;\n                        }\n                        word = (readWord) ? word : reader.peekWord();\n                        isSingleWord = false;\n                        readWord = true;\n                    }\n                    else {\n                        readWord = false;\n                        curLine = curLine + builder.toString();\n                        word = reader.peek().toString();\n                    }\n                    continue;\n                }\n                builder = builder + word;\n                lineWidth = curLineWidth;\n                if (readWord) {\n                    reader.readWord();\n                    word = reader.peekWord();\n                    isSingleWord = false;\n                }\n                else {\n                    reader.read();\n                    word = reader.peek().toString();\n                }\n            }\n            if (builder.length > 0) {\n                let ln = builder.toString();\n                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);\n            }\n            reader.close();\n        }\n        lineResult.layoutLines = [];\n        for (let index = 0; index < lines.length; index++) {\n            lineResult.layoutLines.push(lines[index]);\n        }\n        lines = [];\n        return lineResult;\n    }\n    /**\n     * `Adds` line to line result.\n     * @private\n     */\n    addToLineResult(lineResult, lines, line, lineWidth, breakType) {\n        let info = new LineInfo();\n        info.text = line;\n        info.width = lineWidth;\n        info.lineType = breakType;\n        lines.push(info);\n        let size = lineResult.actualSize;\n        size.height += this.getLineHeight();\n        size.width = Math.max(size.width, lineWidth);\n        lineResult.size = size;\n    }\n    /**\n     * `Copies` layout result from line result to entire result. Checks whether we can proceed lay outing or not.\n     * @private\n     */\n    copyToResult(result, lineResult, lines, \n        /*out*/ numInserted) {\n        let success = true;\n        let allowPartialLines = (this.format != null && !this.format.lineLimit);\n        let height = result.actualSize.height;\n        let maxHeight = this.size.height;\n        if ((this.pageHeight > 0) && (maxHeight + this.rectangle.y > this.pageHeight)) {\n            maxHeight = this.rectangle.y - this.pageHeight;\n            maxHeight = Math.max(maxHeight, -maxHeight);\n        }\n        numInserted = 0;\n        for (let i = 0, len = lineResult.lines.length; i < len; i++) {\n            let expHeight = height + lineResult.lineHeight;\n            let info = lineResult.lines[i];\n            numInserted += info.text.length;\n            info = this.trimLine(info, (lines.length === 0));\n            lines.push(info);\n            // Update width.\n            let size = result.actualSize;\n            size.width = Math.max(size.width, info.width);\n            result.size = size;\n            height = expHeight;\n        }\n        let size = result.actualSize;\n        size.height = height;\n        result.size = size;\n        return { success: success, numInserted: numInserted };\n    }\n    /**\n     * `Finalizes` final result.\n     * @private\n     */\n    finalizeResult(result, lines) {\n        result.layoutLines = [];\n        for (let index = 0; index < lines.length; index++) {\n            result.layoutLines.push(lines[index]);\n        }\n        result.layoutLineHeight = this.getLineHeight();\n        lines = [];\n    }\n    /**\n     * `Trims` whitespaces at the line.\n     * @private\n     */\n    trimLine(info, firstLine) {\n        let line = info.text;\n        let lineWidth = info.width;\n        // Trim start whitespaces if the line is not a start of the paragraph only.\n        // let trimStartSpaces : boolean = ((info.LineType & LineType.FirstParagraphLine) === 0);\n        let start = (this.format == null || !this.format.rightToLeft);\n        line = (start) ? line.trim() : line.trim();\n        // Recalculate line width.\n        if (line.length !== info.text.length) {\n            lineWidth = this.getLineWidth(line);\n            lineWidth += this.getLineIndent(firstLine);\n        }\n        info.text = line;\n        info.width = lineWidth;\n        return info;\n    }\n    /**\n     * Returns `wrap` type.\n     * @private\n     */\n    getWrapType() {\n        let wrapType = (this.format != null) ? this.format.wordWrap : PdfWordWrapType.Word;\n        return wrapType;\n    }\n}\n//Internal declaration\nclass PdfStringLayoutResult {\n    // Properties\n    /**\n     * Gets the `text` which is not lay outed.\n     * @private\n     */\n    get remainder() {\n        return this.textRemainder;\n    }\n    /**\n     * Gets the actual layout text `bounds`.\n     * @private\n     */\n    get actualSize() {\n        if (typeof this.size === 'undefined') {\n            this.size = new SizeF(0, 0);\n        }\n        return this.size;\n    }\n    /**\n     * Gets layout `lines` information.\n     * @private\n     */\n    get lines() {\n        return this.layoutLines;\n    }\n    /**\n     * Gets the `height` of the line.\n     * @private\n     */\n    get lineHeight() {\n        return this.layoutLineHeight;\n    }\n    /**\n     * Gets value that indicates whether any layout text [`empty`].\n     * @private\n     */\n    get empty() {\n        return (this.layoutLines == null || this.layoutLines.length === 0);\n    }\n    /**\n     * Gets `number of` the layout lines.\n     * @private\n     */\n    get lineCount() {\n        let count = (!this.empty) ? this.layoutLines.length : 0;\n        return count;\n    }\n}\nclass LineInfo {\n    //Properties\n    /**\n     * Gets the `type` of the line text.\n     * @private\n     */\n    get lineType() {\n        return this.type;\n    }\n    set lineType(value) {\n        this.type = value;\n    }\n    /**\n     * Gets the line `text`.\n     * @private\n     */\n    get text() {\n        return this.content;\n    }\n    set text(value) {\n        this.content = value;\n    }\n    /**\n     * Gets `width` of the line text.\n     * @private\n     */\n    get width() {\n        return this.lineWidth;\n    }\n    set width(value) {\n        this.lineWidth = value;\n    }\n}\n/**\n* Break type of the `line`.\n* @private\n*/\nvar LineType;\n(function (LineType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    LineType[LineType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `NewLineBreak`.\n     * @private\n     */\n    LineType[LineType[\"NewLineBreak\"] = 1] = \"NewLineBreak\";\n    /**\n     * Specifies the type of `LayoutBreak`.\n     * @private\n     */\n    LineType[LineType[\"LayoutBreak\"] = 2] = \"LayoutBreak\";\n    /**\n     * Specifies the type of `FirstParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"FirstParagraphLine\"] = 4] = \"FirstParagraphLine\";\n    /**\n     * Specifies the type of `LastParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"LastParagraphLine\"] = 8] = \"LastParagraphLine\";\n})(LineType || (LineType = {}));\n\n/**\n * PdfFont.ts class for EJ2-PDF\n */\n/**\n * Defines a particular format for text, including font face, size, and style attributes.\n * @private\n */\nclass PdfFont {\n    constructor(size, style) {\n        /**\n         * `Style` of the font.\n         * @private\n         */\n        this.fontStyle = PdfFontStyle.Regular;\n        if (typeof size === 'number' && typeof style === 'undefined') {\n            this.fontSize = size;\n        }\n        else {\n            this.fontSize = size;\n            this.setStyle(style);\n        }\n    }\n    //Properties\n    /**\n     * Gets the face name of this Font.\n     * @private\n     */\n    get name() {\n        return this.metrics.name;\n    }\n    /**\n     * Gets the size of this font.\n     * @private\n     */\n    get size() {\n        return this.fontSize;\n    }\n    /**\n     * Gets the height of the font in points.\n     * @private\n     */\n    get height() {\n        return this.metrics.getHeight(null);\n    }\n    /**\n     * Gets the style information for this font.\n     * @private\n     */\n    get style() {\n        return this.fontStyle;\n    }\n    set style(value) {\n        this.fontStyle = value;\n    }\n    /**\n     * Gets a value indicating whether this `PdfFont` is `bold`.\n     * @private\n     */\n    get bold() {\n        return ((this.style & PdfFontStyle.Bold) > 0);\n    }\n    /**\n     * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\n     * @private\n     */\n    get italic() {\n        return ((this.style & PdfFontStyle.Italic) > 0);\n    }\n    /**\n     * Gets a value indicating whether this `PdfFont` is `strikeout`.\n     * @private\n     */\n    get strikeout() {\n        return ((this.style & PdfFontStyle.Strikeout) > 0);\n    }\n    /**\n     * Gets a value indicating whether this `PdfFont` is `underline`.\n     * @private\n     */\n    get underline() {\n        return ((this.style & PdfFontStyle.Underline) > 0);\n    }\n    /**\n     * Gets or sets the `metrics` for this font.\n     * @private\n     */\n    get metrics() {\n        return this.fontMetrics;\n    }\n    set metrics(value) {\n        this.fontMetrics = value;\n    }\n    // /**\n    //  * Gets and Sets the font `internals`.\n    //  * @private\n    //  */\n    // public get fontInternal() : IPdfPrimitive {\n    //     return this.pdfFontInternals;\n    // }\n    // public set fontInternal(value : IPdfPrimitive) {\n    //     this.pdfFontInternals = value;\n    // }\n    //IPdfWrapper Members\n    /**\n     * Gets the `element` representing the font.\n     * @private\n     */\n    get element() {\n        return this.pdfFontInternals;\n    }\n    measureString(text, arg2, arg3, arg4, arg5) {\n        if (typeof text === 'string' && typeof arg2 === 'undefined') {\n            return this.measureString(text, null);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n            let temparg2 = arg2;\n            let charactersFitted = 0;\n            let linesFilled = 0;\n            return this.measureString(text, temparg2, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n            let temparg2 = arg2;\n            return this.measureString(text, 0, temparg2, arg3, arg4);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n            let layoutArea = new SizeF(arg2, 0);\n            let temparg3 = arg3;\n            return this.measureString(text, layoutArea, temparg3, arg4, arg5);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else {\n            if (text == null) {\n                throw Error(`ArgumentNullException(\"text\")`);\n            }\n            let temparg2 = arg2;\n            let temparg3 = arg3;\n            let layouter = new PdfStringLayouter();\n            let result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\n            // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n            arg4 = text.length;\n            arg5 = (result.empty) ? 0 : result.lines.length;\n            return result.actualSize;\n        }\n    }\n    /* tslint:enable */\n    //IPdfCache Members\n    /**\n     * `Checks` whether the object is similar to another object.\n     * @private\n     */\n    equalsTo(obj) {\n        let result = this.equalsToFont(obj);\n        return result;\n    }\n    /**\n     * Returns `internals` of the object.\n     * @private\n     */\n    getInternals() {\n        return this.pdfFontInternals;\n    }\n    /**\n     * Sets `internals` to the object.\n     * @private\n     */\n    setInternals(internals) {\n        if (internals == null) {\n            throw new Error('ArgumentNullException:internals');\n        }\n        this.pdfFontInternals = internals;\n    }\n    /**\n     * Sets the `style` of the font.\n     * @private\n     */\n    setStyle(style) {\n        this.fontStyle = style;\n    }\n    /**\n     * Applies `settings` to the default line width.\n     * @private\n     */\n    applyFormatSettings(line, format, width) {\n        // if (line == null) {\n        //     throw new Error(`ArgumentNullException:line`);\n        // }\n        let realWidth = width;\n        if (format != null && width > 0) {\n            // Space among characters is not default.\n            if (format.characterSpacing !== 0) {\n                realWidth += (line.length - 1) * format.characterSpacing;\n            }\n            // Space among words is not default.\n            if (format.wordSpacing !== 0) {\n                let symbols = StringTokenizer.spaces;\n                let whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n                realWidth += whitespacesCount * format.wordSpacing;\n            }\n        }\n        return realWidth;\n    }\n}\n//Constants\n/**\n * `Multiplier` of the symbol width.\n * @default 0.001\n * @private\n */\nPdfFont.charSizeMultiplier = 0.001;\n/**\n * `Synchronization` object.\n * @private\n */\nPdfFont.syncObject = new Object();\n\n/**\n * Used to `write a string` into output file.\n * @private\n */\nclass PdfWriter {\n    /**\n     * Initialize an instance of `PdfWriter` class.\n     * @private\n     */\n    constructor(stream) {\n        this.streamWriter = stream;\n    }\n    //properties\n    /**\n     * Gets and Sets the `document`.\n     * @private\n     */\n    get document() {\n        return this.pdfDocument;\n    }\n    set document(value) {\n        this.pdfDocument = value;\n    }\n    /**\n     * Gets the `position`.\n     * @private\n     */\n    get position() {\n        return this.streamWriter.buffer.size;\n    }\n    /**\n     * Gets  the `length` of the stream'.\n     * @private\n     */\n    get length() {\n        return this.streamWriter.buffer.size;\n    }\n    /**\n     * Gets the `stream`.\n     * @private\n     */\n    get stream() {\n        let result = this.streamWriter;\n        return result;\n    }\n    //public Methods\n    /**\n     * `Writes the specified data`.\n     * @private\n     */\n    write(overload) {\n        let tempOverload = overload;\n        this.streamWriter.write(tempOverload);\n    }\n}\n\n/**\n * public Enum for `CompositeFontType`.\n * @private\n */\nvar ObjectStatus;\n(function (ObjectStatus) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    ObjectStatus[ObjectStatus[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Registered`.\n     * @private\n     */\n    ObjectStatus[ObjectStatus[\"Registered\"] = 1] = \"Registered\";\n})(ObjectStatus || (ObjectStatus = {}));\n\n/**\n * PdfMainObjectCollection.ts class for EJ2-PDF\n */\n/**\n * The collection of all `objects` within a PDF document.\n * @private\n */\nclass PdfMainObjectCollection {\n    constructor() {\n        //Fields\n        /**\n         * The collection of the `indirect objects`.\n         * @default []\n         * @private\n         */\n        this.objectCollections = [];\n        /**\n         * The collection of the `Indirect objects`.\n         * @default new Dictionary<number, ObjectInfo>()\n         * @private\n         */\n        this.mainObjectCollection = new Dictionary();\n        /**\n         * The collection of `primitive objects`.\n         * @private\n         */\n        this.primitiveObjectCollection = new Dictionary();\n    }\n    //Properties\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get count() {\n        return this.objectCollections.length;\n    }\n    /**\n     * Gets the value of `ObjectInfo` from object collection.\n     * @private\n     */\n    items(index) {\n        return this.objectCollections[index];\n    }\n    //Methods\n    /**\n     * Specifies the value of `IsNew`.\n     * @private\n     */\n    get outIsNew() {\n        return this.isNew;\n    }\n    /**\n     * `Adds` the specified element.\n     * @private\n     */\n    add(element) {\n        let objInfo = new ObjectInfo(element);\n        this.objectCollections.push(objInfo);\n        if (!this.primitiveObjectCollection.containsKey(element)) {\n            this.primitiveObjectCollection.setValue(element, this.objectCollections.length - 1);\n        }\n        element.position = this.index = this.objectCollections.length - 1;\n        element.status = ObjectStatus.Registered;\n    }\n    /**\n     * `Looks` through the collection for the object specified.\n     * @private\n     */\n    lookFor(obj) {\n        let index = -1;\n        if (obj.position !== -1) {\n            return obj.position;\n        }\n        if (this.primitiveObjectCollection.containsKey(obj) && this.count === this.primitiveObjectCollection.size()) {\n            index = this.primitiveObjectCollection.getValue(obj);\n        }\n        else {\n            for (let i = this.count - 1; i >= 0; i--) {\n                let oi = this.objectCollections[i];\n                if (oi.object === obj) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    /**\n     * Gets the `reference of the object`.\n     * @private\n     */\n    getReference(index, isNew) {\n        this.index = this.lookFor(index);\n        let reference;\n        this.isNew = false;\n        let oi = this.objectCollections[this.index];\n        reference = oi.reference;\n        let obj = { reference: reference, wasNew: isNew };\n        return obj;\n    }\n    /**\n     * Tries to set the `reference to the object`.\n     * @private\n     */\n    trySetReference(obj, reference, found) {\n        let result = true;\n        found = true;\n        this.index = this.lookFor(obj);\n        let oi = this.objectCollections[this.index];\n        oi.setReference(reference);\n        return result;\n    }\n    destroy() {\n        for (let obj of this.objectCollections) {\n            if (obj !== undefined) {\n                obj.pdfObject.position = -1;\n                obj.pdfObject.isSaving = undefined;\n                obj.pdfObject.objectCollectionIndex = undefined;\n                obj.pdfObject.position = undefined;\n            }\n        }\n        this.objectCollections = [];\n        this.mainObjectCollection = new Dictionary();\n        this.primitiveObjectCollection = new Dictionary();\n    }\n}\nclass ObjectInfo {\n    constructor(obj, reference) {\n        this.pdfObject = obj;\n        this.pdfReference = reference;\n    }\n    //Properties\n    /**\n     * Gets the `object`.\n     * @private\n     */\n    get object() {\n        return this.pdfObject;\n    }\n    set object(value) {\n        this.pdfObject = value;\n    }\n    /**\n     * Gets the `reference`.\n     * @private\n     */\n    get reference() {\n        return this.pdfReference;\n    }\n    /**\n     * Sets the `reference`.\n     * @private\n     */\n    setReference(reference) {\n        this.pdfReference = reference;\n    }\n}\n\n/**\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\n * @private\n */\nclass PdfDocumentBase {\n    constructor(document) {\n        /**\n         * If the stream is copied,  then it specifies true.\n         * @private\n         */\n        this.isStreamCopied = false;\n        if (document instanceof PdfDocument) {\n            this.document = document;\n        }\n    }\n    //Prpperties\n    /**\n     * Gets the `PDF objects` collection, which stores all objects and references to it..\n     * @private\n     */\n    get pdfObjects() {\n        return this.objects;\n    }\n    /**\n     * Gets the `cross-reference` table.\n     * @private\n     */\n    get crossTable() {\n        return this.pdfCrossTable;\n    }\n    /**\n     * Gets or sets the current saving `object number`.\n     * @private\n     */\n    get currentSavingObj() {\n        return this.currentSavingObject;\n    }\n    set currentSavingObj(value) {\n        this.currentSavingObject = value;\n    }\n    /**\n     * Gets the PDF document `catalog`.\n     * @private\n     */\n    get catalog() {\n        return this.pdfCatalog;\n    }\n    set catalog(value) {\n        this.pdfCatalog = value;\n    }\n    //Public methods\n    /**\n     * Sets the `main object collection`.\n     * @private\n     */\n    setMainObjectCollection(mainObjectCollection) {\n        this.objects = mainObjectCollection;\n    }\n    /**\n     * Sets the `cross table`.\n     * @private\n     */\n    setCrossTable(cTable) {\n        this.pdfCrossTable = cTable;\n    }\n    /**\n     * Sets the `catalog`.\n     * @private\n     */\n    setCatalog(catalog) {\n        this.pdfCatalog = catalog;\n    }\n    save(filename) {\n        let encoding = new Encoding(true);\n        let SW = new StreamWriter(encoding);\n        if (typeof filename === 'undefined') {\n            let encoding = new Encoding(true);\n            let SW = new StreamWriter(encoding);\n            return new Promise((resolve, reject) => {\n                /* tslint:disable-next-line:no-any */\n                let obj = {};\n                obj.blobData = new Blob([this.document.docSave(SW, true)], { type: 'application/pdf' });\n                resolve(obj);\n            });\n        }\n        else {\n            this.document.docSave(SW, filename, true);\n        }\n    }\n    /**\n     * `Clone` of parent object - PdfDocument.\n     * @private\n     */\n    clone() {\n        return this.document;\n    }\n}\n\n/**\n * public Enum for `ObjectType`.\n * @private\n */\nvar ObjectType;\n(function (ObjectType) {\n    /**\n     * Specifies the type of `Free`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Free\"] = 0] = \"Free\";\n    /**\n     * Specifies the type of `Normal`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Normal\"] = 1] = \"Normal\";\n    /**\n     * Specifies the type of `Packed`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Packed\"] = 2] = \"Packed\";\n})(ObjectType || (ObjectType = {}));\n\n/**\n * PdfCatalog.ts class for EJ2-PDF\n */\n/**\n * `PdfCatalog` class represents internal catalog of the Pdf document.\n * @private\n */\nclass PdfCatalog extends PdfDictionary {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfCatalog` class.\n     * @private\n     */\n    constructor() {\n        super();\n        //fields\n        /**\n         * Internal variable to store collection of `sections`.\n         * @default null\n         * @private\n         */\n        this.sections = null;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @private\n         */\n        this.tempDictionaryProperties = new DictionaryProperties();\n        this.items.setValue(new DictionaryProperties().type, new PdfName('Catalog'));\n    }\n    //Properties\n    /**\n     * Gets or sets the sections, which contain `pages`.\n     * @private\n     */\n    get pages() {\n        return this.sections;\n    }\n    set pages(value) {\n        let dictionary = value.element;\n        // if (this.sections !== value) {\n        //     this.sections = value;\n        //     this.Items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));\n        // }\n        this.sections = value;\n        this.items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));\n    }\n}\n\n/**\n * `PdfCrossTable` is responsible for intermediate level parsing\n * and savingof a PDF document.\n * @private\n */\nclass PdfCrossTable {\n    constructor() {\n        /**\n         * The modified `objects` that should be saved.\n         * @private\n         */\n        this.objects = new Dictionary();\n        /**\n         * Holds `maximal generation number` or offset to object.\n         * @default 0\n         * @private\n         */\n        this.maxGenNumIndex = 0;\n        /**\n         * The `number of the objects`.\n         * @default 0\n         * @private\n         */\n        this.objectCount = 0;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new PdfDictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n    }\n    //Properties\n    /**\n     * Gets or sets if the document `is merged`.\n     * @private\n     */\n    get isMerging() {\n        return this.merging;\n    }\n    set isMerging(value) {\n        this.merging = value;\n    }\n    /**\n     * Gets the `trailer`.\n     * @private\n     */\n    get trailer() {\n        if (this.internalTrailer == null) {\n            this.internalTrailer = new PdfStream();\n        }\n        return this.internalTrailer;\n    }\n    /**\n     * Gets or sets the main `PdfDocument` class instance.\n     * @private\n     */\n    get document() {\n        return this.pdfDocument;\n    }\n    set document(value) {\n        this.pdfDocument = value;\n        this.items = this.pdfDocument.pdfObjects;\n    }\n    /**\n     * Gets the catched `PDF object` main collection.\n     * @private\n     */\n    get pdfObjects() {\n        return this.items;\n    }\n    /**\n     * Gets the `object collection`.\n     * @private\n     */\n    get objectCollection() {\n        return this.pdfDocument.pdfObjects;\n    }\n    /**\n     * Gets or sets the `number of the objects` within the document.\n     * @private\n     */\n    get count() {\n        return this.objectCount;\n    }\n    set count(value) {\n        this.objectCount = value;\n    }\n    /**\n     * Returns `next available object number`.\n     * @private\n     */\n    get nextObjNumber() {\n        this.count = this.count + 1;\n        return this.count;\n    }\n    save(writer, filename) {\n        this.saveHead(writer);\n        this.mappedReferences = null;\n        this.objects.clear();\n        this.markTrailerReferences();\n        this.saveObjects(writer);\n        let saveCount = this.count;\n        let xrefPos = writer.position;\n        this.registerObject(0, new PdfReference(0, -1), true);\n        let prevXRef = 0;\n        writer.write(Operators.xref);\n        writer.write(Operators.newLine);\n        this.saveSections(writer);\n        this.saveTrailer(writer, this.count, prevXRef);\n        this.saveTheEndess(writer, xrefPos);\n        this.count = saveCount;\n        for (let i = 0; i < this.objectCollection.count; ++i) {\n            let oi = this.objectCollection.items(i);\n            oi.object.isSaving = false;\n        }\n        if (typeof filename === 'undefined') {\n            return writer.stream.buffer;\n        }\n        else {\n            writer.stream.save(filename);\n        }\n    }\n    /**\n     * `Saves the endess` of the file.\n     * @private\n     */\n    saveTheEndess(writer, xrefPos) {\n        writer.write(Operators.newLine + Operators.startxref + Operators.newLine);\n        writer.write(xrefPos.toString() + Operators.newLine);\n        writer.write(Operators.eof + Operators.newLine);\n    }\n    /**\n     * `Saves the new trailer` dictionary.\n     * @private\n     */\n    saveTrailer(writer, count, prevXRef) {\n        writer.write(Operators.trailer + Operators.newLine);\n        // Save the dictionary.\n        let trailer = this.trailer;\n        trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));\n        trailer = new PdfDictionary(trailer); // Make it real dictionary.\n        trailer.setEncrypt(false);\n        trailer.save(writer);\n    }\n    /**\n     * `Saves the xref section`.\n     * @private\n     */\n    saveSections(writer) {\n        let objectNum = 0;\n        let count = 0;\n        do {\n            count = this.prepareSubsection(objectNum);\n            this.saveSubsection(writer, objectNum, count);\n            objectNum += count;\n        } while (count !== 0);\n    }\n    /**\n     * `Saves a subsection`.\n     * @private\n     */\n    saveSubsection(writer, objectNum, count) {\n        if (count <= 0 || objectNum >= this.count) {\n            return;\n        }\n        writer.write(objectNum + ' ' + (count + 1) + Operators.newLine);\n        for (let i = objectNum; i <= objectNum + count; ++i) {\n            let obj = this.objects.getValue(i);\n            let str = '';\n            if (obj.type === ObjectType.Free) {\n                str = this.getItem(obj.offset, 65535, true);\n            }\n            else {\n                str = this.getItem(obj.offset, obj.generation, false);\n            }\n            writer.write(str);\n        }\n    }\n    /**\n     * Generates string for `xref table item`.\n     * @private\n     */\n    getItem(offset, genNumber, isFree) {\n        let returnString = '';\n        let addOffsetLength = 10 - offset.toString().length;\n        if (genNumber <= 0) {\n            genNumber = 0;\n        }\n        let addGenNumberLength = (5 - genNumber.toString().length) <= 0 ? 0 : (5 - genNumber.toString().length);\n        for (let index = 0; index < addOffsetLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + offset.toString() + ' ';\n        for (let index = 0; index < addGenNumberLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + genNumber.toString() + ' ';\n        returnString = returnString + ((isFree) ? Operators.f : Operators.n) + Operators.newLine;\n        return returnString;\n    }\n    /**\n     * `Prepares a subsection` of the current section within the cross-reference table.\n     * @private\n     */\n    prepareSubsection(objectNum) {\n        let count = 0;\n        let i;\n        let total = this.count;\n        for (let k = 0; k < this.document.pdfObjects.count; k++) {\n            let reference = this.document.pdfObjects.items(k).reference;\n            let refString = reference.toString();\n            let refArray = refString.split(' ');\n        }\n        if (objectNum >= total) {\n            return count;\n        }\n        // search for first changed indirect object.\n        for (i = objectNum; i < total; ++i) {\n            break;\n        }\n        objectNum = i;\n        // look up for all indirect objects in one subsection.\n        for (; i < total; ++i) {\n            ++count;\n        }\n        return count;\n    }\n    /**\n     * `Marks the trailer references` being saved.\n     * @private\n     */\n    markTrailerReferences() {\n        let keys = this.trailer.items.keys();\n        let values = this.trailer.items.values();\n    }\n    /**\n     * `Saves the head`.\n     * @private\n     */\n    saveHead(writer) {\n        let version = this.generateFileVersion(writer.document);\n        writer.write('%PDF-' + version);\n        writer.write(Operators.newLine);\n    }\n    /**\n     * Generates the `version` of the file.\n     * @private\n     */\n    generateFileVersion(document) {\n        let iVersion = 4;\n        let version = '1.' + iVersion.toString();\n        return version;\n    }\n    getReference(obj, bNew) {\n        if (typeof bNew === 'undefined') {\n            let wasNew = false;\n            return this.getReference(obj, wasNew);\n        }\n        else {\n            //code splitted for reducing lines of code exceeds 100.\n            return this.getSubReference(obj, bNew);\n        }\n    }\n    /**\n     * Retrieves the `reference` of the object given.\n     * @private\n     */\n    getSubReference(obj, bNew) {\n        let isNew = false;\n        let wasNew;\n        let reference = null;\n        // if (obj.IsSaving) {\n        if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {\n            let tempObj = this.document.pdfObjects.getReference(obj, wasNew);\n            reference = tempObj.reference;\n            wasNew = tempObj.wasNew;\n        }\n        if (reference == null) {\n            if (obj.status === ObjectStatus.Registered) {\n                wasNew = false;\n            }\n            else {\n                wasNew = true;\n            }\n        }\n        else {\n            wasNew = false;\n        }\n        // need to add mapped reference code\n        if (reference == null) {\n            let objnumber = this.nextObjNumber;\n            reference = new PdfReference(objnumber, 0);\n            let found;\n            if (wasNew) {\n                this.document.pdfObjects.add(obj);\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n                let tempIndex = this.document.pdfObjects.count - 1;\n                let tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;\n                let tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];\n                this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);\n                obj.position = -1;\n            }\n            else {\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n            }\n            obj.objectCollectionIndex = reference.objNumber;\n            obj.status = ObjectStatus.None;\n            isNew = true;\n        }\n        bNew = isNew || this.bForceNew;\n        return reference;\n    }\n    /**\n     * `Saves all objects` in the collection.\n     * @private\n     */\n    saveObjects(writer) {\n        let objectCollection = this.objectCollection;\n        for (let i = 0; i < objectCollection.count; ++i) {\n            let oi = objectCollection.items(i);\n            let obj = oi.object;\n            obj.isSaving = true;\n            this.saveIndirectObject(obj, writer);\n        }\n    }\n    /**\n     * `Saves indirect object`.\n     * @private\n     */\n    saveIndirectObject(obj, writer) {\n        let reference = this.getReference(obj);\n        if (obj instanceof PdfCatalog) {\n            this.trailer.items.setValue(this.dictionaryProperties.root, reference);\n        }\n        // NOTE :  This is needed for correct string objects encryption.\n        this.pdfDocument.currentSavingObj = reference;\n        let tempArchive = false;\n        tempArchive = obj.getArchive();\n        this.registerObject(writer.position, reference);\n        this.doSaveObject(obj, reference, writer);\n    }\n    /**\n     * Performs `real saving` of the save object.\n     * @private\n     */\n    doSaveObject(obj, reference, writer) {\n        let correctPosition = writer.length;\n        writer.write(reference.objNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(reference.genNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(Operators.obj);\n        writer.write(Operators.newLine);\n        obj.save(writer);\n        let stream = writer.stream;\n        writer.write(Operators.endObj);\n        writer.write(Operators.newLine);\n    }\n    registerObject(offset, reference, free) {\n        if (typeof free === 'boolean') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n        else if (typeof free === 'undefined') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n    }\n    /**\n     * `Dereferences` the specified primitive object.\n     * @private\n     */\n    static dereference(obj) {\n        let rh = obj;\n        if (rh != null) {\n            obj = rh.object;\n        }\n        return obj;\n    }\n}\nclass RegisteredObject {\n    //Properties\n    /**\n     * Gets the `object number`.\n     * @private\n     */\n    get objectNumber() {\n        return this.object;\n    }\n    /**\n     * Gets the `offset`.\n     * @private\n     */\n    get offset() {\n        let result;\n        result = this.offsetNumber;\n        return result;\n    }\n    constructor(offset, reference, free) {\n        if (typeof free === 'undefined') {\n            let tempOffset = offset;\n            this.offsetNumber = tempOffset;\n            let tempReference = reference;\n            this.generation = tempReference.genNumber;\n            this.object = tempReference.objNumber;\n            this.type = ObjectType.Normal;\n        }\n        else {\n            let tempOffset = offset;\n            let tempReference = reference;\n            this.constructor(tempOffset, tempReference);\n            this.type = ObjectType.Free;\n        }\n    }\n}\n\n/**\n * PdfPageSize.ts class for EJ2-PDF\n */\n/**\n * Represents information about various predefined `page sizes`.\n */\nclass PdfPageSize {\n    //constructor\n    /**\n     * Initialize an instance for `PdfPageSize` class.\n     * @private\n     */\n    constructor() {\n        // \n    }\n}\n/**\n * Specifies the size of `letter`.\n * @private\n */\nPdfPageSize.letter = new SizeF(612, 792);\n/**\n * Specifies the size of `note`.\n * @private\n */\nPdfPageSize.note = new SizeF(540, 720);\n/**\n * Specifies the size of `legal`.\n * @private\n */\nPdfPageSize.legal = new SizeF(612, 1008);\n/**\n * Specifies the size of `a0`.\n * @private\n */\nPdfPageSize.a0 = new SizeF(2380, 3368);\n/**\n * Specifies the size of `a1`.\n * @private\n */\nPdfPageSize.a1 = new SizeF(1684, 2380);\n/**\n * Specifies the size of `a2`.\n * @private\n */\nPdfPageSize.a2 = new SizeF(1190, 1684);\n/**\n * Specifies the size of `a3`.\n * @private\n */\nPdfPageSize.a3 = new SizeF(842, 1190);\n/**\n * Specifies the size of `a4`.\n * @private\n */\nPdfPageSize.a4 = new SizeF(595, 842);\n/**\n * Specifies the size of `a5`.\n * @private\n */\nPdfPageSize.a5 = new SizeF(421, 595);\n/**\n * Specifies the size of `a6`.\n * @private\n */\nPdfPageSize.a6 = new SizeF(297, 421);\n/**\n * Specifies the size of `a7`.\n * @private\n */\nPdfPageSize.a7 = new SizeF(210, 297);\n/**\n * Specifies the size of `a8`.\n * @private\n */\nPdfPageSize.a8 = new SizeF(148, 210);\n/**\n * Specifies the size of `a9`.\n * @private\n */\nPdfPageSize.a9 = new SizeF(105, 148);\n/**\n * Specifies the size of `a10`.\n * @private\n */\nPdfPageSize.a10 = new SizeF(74, 105);\n/**\n * Specifies the size of `b0`.\n * @private\n */\nPdfPageSize.b0 = new SizeF(2836, 4008);\n/**\n * Specifies the size of `b1`.\n * @private\n */\nPdfPageSize.b1 = new SizeF(2004, 2836);\n/**\n * Specifies the size of `b2`.\n * @private\n */\nPdfPageSize.b2 = new SizeF(1418, 2004);\n/**\n * Specifies the size of `b3`.\n * @private\n */\nPdfPageSize.b3 = new SizeF(1002, 1418);\n/**\n * Specifies the size of `b4`.\n * @private\n */\nPdfPageSize.b4 = new SizeF(709, 1002);\n/**\n * Specifies the size of `b5`.\n * @private\n */\nPdfPageSize.b5 = new SizeF(501, 709);\n/**\n * Specifies the size of `archE`.\n * @private\n */\nPdfPageSize.archE = new SizeF(2592, 3456);\n/**\n * Specifies the size of `archD`.\n * @private\n */\nPdfPageSize.archD = new SizeF(1728, 2592);\n/**\n * Specifies the size of `archC`.\n * @private\n */\nPdfPageSize.archC = new SizeF(1296, 1728);\n/**\n * Specifies the size of `archB`.\n * @private\n */\nPdfPageSize.archB = new SizeF(864, 1296);\n/**\n * Specifies the size of `archA`.\n * @private\n */\nPdfPageSize.archA = new SizeF(648, 864);\n/**\n * Specifies the size of `flsa`.\n * @private\n */\nPdfPageSize.flsa = new SizeF(612, 936);\n/**\n * Specifies the size of `halfLetter`.\n * @private\n */\nPdfPageSize.halfLetter = new SizeF(396, 612);\n/**\n * Specifies the size of `letter11x17`.\n * @private\n */\nPdfPageSize.letter11x17 = new SizeF(792, 1224);\n/**\n * Specifies the size of `ledger`.\n * @private\n */\nPdfPageSize.ledger = new SizeF(1224, 792);\n\n/**\n * public Enum for `PdfPageOrientation`.\n * @private\n */\nvar PdfPageOrientation;\n(function (PdfPageOrientation) {\n    /**\n     * Specifies the type of `Portrait`.\n     * @private\n     */\n    PdfPageOrientation[PdfPageOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    /**\n     * Specifies the type of `Landscape`.\n     * @private\n     */\n    PdfPageOrientation[PdfPageOrientation[\"Landscape\"] = 1] = \"Landscape\";\n})(PdfPageOrientation || (PdfPageOrientation = {}));\n/**\n * public Enum for `PdfPageRotateAngle`.\n * @private\n */\nvar PdfPageRotateAngle;\n(function (PdfPageRotateAngle) {\n    /**\n     * Specifies the type of `RotateAngle0`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle0\"] = 0] = \"RotateAngle0\";\n    /**\n     * Specifies the type of `RotateAngle90`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle90\"] = 1] = \"RotateAngle90\";\n    /**\n     * Specifies the type of `RotateAngle180`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle180\"] = 2] = \"RotateAngle180\";\n    /**\n     * Specifies the type of `RotateAngle270`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle270\"] = 3] = \"RotateAngle270\";\n})(PdfPageRotateAngle || (PdfPageRotateAngle = {}));\n/**\n * public Enum for `PdfNumberStyle`.\n * @private\n */\nvar PdfNumberStyle;\n(function (PdfNumberStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Numeric`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"Numeric\"] = 1] = \"Numeric\";\n    /**\n     * Specifies the type of `LowerLatin`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"LowerLatin\"] = 2] = \"LowerLatin\";\n    /**\n     * Specifies the type of `LowerRoman`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"LowerRoman\"] = 3] = \"LowerRoman\";\n    /**\n     * Specifies the type of `UpperLatin`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"UpperLatin\"] = 4] = \"UpperLatin\";\n    /**\n     * Specifies the type of `UpperRoman`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"UpperRoman\"] = 5] = \"UpperRoman\";\n})(PdfNumberStyle || (PdfNumberStyle = {}));\n/**\n * public Enum for `PdfDockStyle`.\n * @private\n */\nvar PdfDockStyle;\n(function (PdfDockStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Bottom\"] = 1] = \"Bottom\";\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Top\"] = 2] = \"Top\";\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Left\"] = 3] = \"Left\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Right\"] = 4] = \"Right\";\n    /**\n     * Specifies the type of `Fill`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Fill\"] = 5] = \"Fill\";\n})(PdfDockStyle || (PdfDockStyle = {}));\n/**\n * public Enum for `PdfAlignmentStyle`.\n * @private\n */\nvar PdfAlignmentStyle;\n(function (PdfAlignmentStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `TopLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopLeft\"] = 1] = \"TopLeft\";\n    /**\n     * Specifies the type of `TopCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopCenter\"] = 2] = \"TopCenter\";\n    /**\n     * Specifies the type of `TopRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopRight\"] = 3] = \"TopRight\";\n    /**\n     * Specifies the type of `MiddleLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleLeft\"] = 4] = \"MiddleLeft\";\n    /**\n     * Specifies the type of `MiddleCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleCenter\"] = 5] = \"MiddleCenter\";\n    /**\n     * Specifies the type of `MiddleRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    /**\n     * Specifies the type of `BottomLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomLeft\"] = 7] = \"BottomLeft\";\n    /**\n     * Specifies the type of `BottomCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomCenter\"] = 8] = \"BottomCenter\";\n    /**\n     * Specifies the type of `BottomRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomRight\"] = 9] = \"BottomRight\";\n})(PdfAlignmentStyle || (PdfAlignmentStyle = {}));\n/**\n * public Enum for `TemplateType`.\n * @private\n */\nvar TemplateType;\n(function (TemplateType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    TemplateType[TemplateType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Top\"] = 1] = \"Top\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Bottom\"] = 2] = \"Bottom\";\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Left\"] = 3] = \"Left\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Right\"] = 4] = \"Right\";\n})(TemplateType || (TemplateType = {}));\n\n/**\n * PdfMargins.ts class for EJ2-PDF\n * A class representing PDF page margins.\n */\nclass PdfMargins {\n    /**\n     * Initializes a new instance of the `PdfMargins` class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Represents the `Default Page Margin` value.\n         * @default 0.0\n         * @private\n         */\n        this.pdfMargin = 40.0;\n        this.setMargins(this.pdfMargin);\n    }\n    //Properties\n    /**\n     * Gets or sets the `left margin` size.\n     * @private\n     */\n    get left() {\n        return this.leftMargin;\n    }\n    set left(value) {\n        this.leftMargin = value;\n    }\n    /**\n     * Gets or sets the `top margin` size.\n     * @private\n     */\n    get top() {\n        return this.topMargin;\n    }\n    set top(value) {\n        this.topMargin = value;\n    }\n    /**\n     * Gets or sets the `right margin` size.\n     * @private\n     */\n    get right() {\n        return this.rightMargin;\n    }\n    set right(value) {\n        this.rightMargin = value;\n    }\n    /**\n     * Gets or sets the `bottom margin` size.\n     * @private\n     */\n    get bottom() {\n        return this.bottomMargin;\n    }\n    set bottom(value) {\n        this.bottomMargin = value;\n    }\n    /**\n     * Sets the `margins`.\n     * @private\n     */\n    set all(value) {\n        this.setMargins(value);\n    }\n    setMargins(margin1, margin2, margin3, margin4) {\n        if (typeof margin2 === 'undefined') {\n            this.leftMargin = this.topMargin = this.rightMargin = this.bottomMargin = margin1;\n        }\n        else {\n            if (typeof margin3 === 'undefined') {\n                this.leftMargin = this.rightMargin = margin1;\n                this.bottomMargin = this.topMargin = margin2;\n            }\n            else {\n                this.leftMargin = margin1;\n                this.topMargin = margin2;\n                this.rightMargin = margin3;\n                this.bottomMargin = margin4;\n            }\n        }\n    }\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    clone() {\n        return this;\n    }\n}\n\n/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\n/**\n * The class provides various `setting` related with PDF pages.\n */\nclass PdfPageSettings {\n    constructor(margins) {\n        //Fields\n        /**\n         * The page `margins`.\n         * @private\n         */\n        this.pageMargins = new PdfMargins();\n        /**\n         * The page `size`.\n         * @default a4\n         * @private\n         */\n        this.pageSize = PdfPageSize.a4;\n        /**\n         * The page `rotation angle`.\n         * @default PdfPageRotateAngle.RotateAngle0\n         * @private\n         */\n        this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n        /**\n         * The page `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.pageOrientation = PdfPageOrientation.Portrait;\n        /**\n         * The page `origin`.\n         * @default 0,0\n         * @private\n         */\n        this.pageOrigin = new PointF(0, 0);\n        /**\n         * Checks the Whether the `rotation` is applied or not.\n         * @default false\n         * @private\n         */\n        this.isRotation = false;\n        if (typeof margins === 'number') {\n            this.pageMargins.setMargins(margins);\n        }\n    }\n    //Properties\n    /**\n     * Gets or sets the `size` of the page.\n     * @private\n     */\n    get size() {\n        return this.pageSize;\n    }\n    set size(value) {\n        this.setSize(value);\n    }\n    /**\n     * Gets or sets the page `orientation`.\n     * @private\n     */\n    get orientation() {\n        return this.pageOrientation;\n    }\n    set orientation(orientation) {\n        if (this.pageOrientation !== orientation) {\n            this.pageOrientation = orientation;\n            this.updateSize(orientation);\n        }\n    }\n    /**\n     * Gets or sets the `margins` of the page.\n     * @private\n     */\n    get margins() {\n        return this.pageMargins;\n    }\n    set margins(value) {\n        this.pageMargins = value;\n    }\n    /**\n     * Gets or sets the `width` of the page.\n     * @private\n     */\n    get width() {\n        return this.pageSize.width;\n    }\n    set width(value) {\n        this.pageSize.width = value;\n    }\n    /**\n     * Gets or sets the `height` of the page.\n     * @private\n     */\n    get height() {\n        return this.pageSize.height;\n    }\n    set height(value) {\n        this.pageSize.height = value;\n    }\n    /**\n     * Gets or sets the `origin` of the page.\n     * @private\n     */\n    get origin() {\n        return this.pageOrigin;\n    }\n    set origin(value) {\n        this.pageOrigin = value;\n    }\n    /**\n     * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n     * @private\n     */\n    get rotate() {\n        return this.rotateAngle;\n    }\n    set rotate(value) {\n        this.rotateAngle = value;\n        this.isRotation = true;\n    }\n    //Methods\n    /**\n     * `Update page size` depending on orientation.\n     * @private\n     */\n    updateSize(orientation) {\n        let min = Math.min(this.pageSize.width, this.pageSize.height);\n        let max = Math.max(this.pageSize.width, this.pageSize.height);\n        switch (orientation) {\n            case PdfPageOrientation.Portrait:\n                this.pageSize = new SizeF(min, max);\n                break;\n            case PdfPageOrientation.Landscape:\n                this.pageSize = new SizeF(max, min);\n                break;\n        }\n    }\n    /**\n     * Creates a `clone` of the object.\n     * @private\n     */\n    clone() {\n        let settings = this;\n        settings.pageMargins = this.pageMargins.clone();\n        // if (GetTransition() != null)\n        // {\n        //     settings.Transition = (PdfPageTransition)Transition.clone();\n        // }\n        return settings;\n    }\n    /**\n     * Returns `size`, shrinked by the margins.\n     * @private\n     */\n    getActualSize() {\n        let width = this.width - (this.margins.left + this.margins.right);\n        let height = this.height - (this.margins.top + this.margins.bottom);\n        let size = new SizeF(width, height);\n        return size;\n    }\n    /**\n     * Sets `size` to the page aaccording to the orientation.\n     * @private\n     */\n    setSize(size) {\n        let min = Math.min(size.width, size.height);\n        let max = Math.max(size.width, size.height);\n        if (this.orientation === PdfPageOrientation.Portrait) {\n            this.pageSize = new SizeF(min, max);\n        }\n        else {\n            this.pageSize = new SizeF(max, min);\n        }\n    }\n}\n\n/**\n * Helper class to `write PDF graphic streams` easily.\n * @private\n */\nclass PdfStreamWriter {\n    /**\n     * Initialize an instance of `PdfStreamWriter` class.\n     * @private\n     */\n    constructor(stream) {\n        if (stream == null) {\n            throw new Error('ArgumentNullException:stream');\n        }\n        this.stream = stream;\n    }\n    //Implementation\n    /**\n     * `Clear` the stream.\n     * @public\n     */\n    clear() {\n        this.stream.clearStream();\n    }\n    setGraphicsState(dictionaryName) {\n        if (dictionaryName instanceof PdfName) {\n            this.stream.write(dictionaryName.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setGraphicsState);\n        }\n        else {\n            this.stream.write(Operators.slash);\n            this.stream.write(dictionaryName);\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setGraphicsState);\n        }\n    }\n    /**\n     * `Executes the XObject`.\n     * @private\n     */\n    executeObject(name) {\n        this.stream.write(name.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.paintXObject);\n        this.stream.write(Operators.newLine);\n    }\n    /**\n     * `Closes path object`.\n     * @private\n     */\n    closePath() {\n        this.writeOperator(Operators.closePath);\n    }\n    /**\n     * `Clips the path`.\n     * @private\n     */\n    clipPath(useEvenOddRule) {\n        this.stream.write(Operators.clipPath);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n        }\n        this.stream.write(Operators.whiteSpace);\n        this.stream.write(Operators.endPath);\n        this.stream.write(Operators.newLine);\n    }\n    /**\n     * `Closes, then fills and strokes the path`.\n     * @private\n     */\n    closeFillStrokePath(useEvenOddRule) {\n        this.stream.write(Operators.closeFillStrokePath);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    }\n    /**\n     * `Fills and strokes path`.\n     * @private\n     */\n    fillStrokePath(useEvenOddRule) {\n        this.stream.write(Operators.fillStroke);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    }\n    /**\n     * `Fills path`.\n     * @private\n     */\n    fillPath(useEvenOddRule) {\n        this.stream.write(Operators.fill);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    }\n    /**\n     * `Ends the path`.\n     * @private\n     */\n    endPath() {\n        this.writeOperator(Operators.n);\n    }\n    /**\n     * `Closes and fills the path`.\n     * @private\n     */\n    closeFillPath(useEvenOddRule) {\n        this.writeOperator(Operators.closePath);\n        this.stream.write(Operators.fill);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    }\n    /**\n     * `Closes and strokes the path`.\n     * @private\n     */\n    closeStrokePath() {\n        this.writeOperator(Operators.closeStrokePath);\n    }\n    /**\n     * `Sets the text scaling`.\n     * @private\n     */\n    setTextScaling(textScaling) {\n        this.stream.write(PdfNumber.floatToString(textScaling));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setTextScaling);\n    }\n    /**\n     * `Strokes path`.\n     * @private\n     */\n    strokePath() {\n        this.writeOperator(Operators.stroke);\n    }\n    /**\n     * `Restores` the graphics state.\n     * @private\n     */\n    restoreGraphicsState() {\n        this.writeOperator(Operators.restoreState);\n    }\n    /**\n     * `Saves` the graphics state.\n     * @private\n     */\n    saveGraphicsState() {\n        this.writeOperator(Operators.saveState);\n    }\n    startNextLine(arg1, arg2) {\n        if (typeof arg1 === 'undefined') {\n            this.writeOperator(Operators.goToNextLine);\n        }\n        else if (arg1 instanceof PointF) {\n            this.writePoint(arg1);\n            this.writeOperator(Operators.setCoords);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writeOperator(Operators.setCoords);\n        }\n    }\n    /**\n     * Sets `text leading`.\n     * @private\n     */\n    setLeading(leading) {\n        this.stream.write(PdfNumber.floatToString(leading));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setTextLeading);\n    }\n    /**\n     * `Begins the path`.\n     * @private\n     */\n    beginPath(x, y) {\n        this.writePoint(x, y);\n        this.writeOperator(Operators.beginPath);\n    }\n    /**\n     * `Begins text`.\n     * @private\n     */\n    beginText() {\n        this.writeOperator(Operators.beginText);\n    }\n    /**\n     * `Ends text`.\n     * @private\n     */\n    endText() {\n        this.writeOperator(Operators.endText);\n    }\n    appendRectangle(arg1, arg2, arg3, arg4) {\n        if (arg1 instanceof RectangleF) {\n            this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writePoint(arg3, arg4);\n            this.writeOperator(Operators.appendRectangle);\n        }\n    }\n    appendLineSegment(arg1, arg2) {\n        if (arg1 instanceof PointF) {\n            this.appendLineSegment(arg1.x, arg1.y);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writeOperator(Operators.appendLineSegment);\n        }\n    }\n    /**\n     * Sets the `text rendering mode`.\n     * @private\n     */\n    setTextRenderingMode(renderingMode) {\n        this.stream.write(renderingMode.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setRenderingMode);\n    }\n    /**\n     * Sets the `character spacing`.\n     * @private\n     */\n    setCharacterSpacing(charSpacing) {\n        this.stream.write(PdfNumber.floatToString(charSpacing));\n        this.stream.write(Operators.whiteSpace);\n        this.stream.write(Operators.setCharacterSpace);\n        this.stream.write(Operators.newLine);\n    }\n    /**\n     * Sets the `word spacing`.\n     * @private\n     */\n    setWordSpacing(wordSpacing) {\n        this.stream.write(PdfNumber.floatToString(wordSpacing));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setWordSpace);\n    }\n    showNextLineText(arg1, arg2) {\n        if (arg1 instanceof PdfString) {\n            this.checkTextParam(arg1);\n            this.writeText(arg1);\n            this.writeOperator(Operators.setTextOnNewLine);\n        }\n        else {\n            this.checkTextParam(arg1);\n            this.writeText(arg1, arg2);\n            this.writeOperator(Operators.setTextOnNewLine);\n        }\n    }\n    setColorSpace(arg1, arg2) {\n        if (arg1 instanceof PdfName && typeof arg2 === 'boolean') {\n            let temparg1 = arg1;\n            let temparg2 = arg2;\n            // if (temparg1 == null) {\n            //     throw new Error('ArgumentNullException:name');\n            // }\n            let op = (temparg2) ? Operators.selectcolorspaceforstroking : Operators.selectcolorspacefornonstroking;\n            this.stream.write(temparg1.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.stream.write(op);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            let temparg1 = arg1;\n            let temparg2 = arg2;\n            this.setColorSpace(new PdfName(temparg1), temparg2);\n        }\n    }\n    /**\n     * Modifies current `transformation matrix`.\n     * @private\n     */\n    modifyCtm(matrix) {\n        if (matrix == null) {\n            throw new Error('ArgumentNullException:matrix');\n        }\n        this.stream.write(matrix.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.modifyCtm);\n    }\n    setFont(font, name, size) {\n        if (typeof name === 'string') {\n            this.setFont(font, new PdfName(name), size);\n        }\n        else {\n            if (font == null) {\n                throw new Error('ArgumentNullException:font');\n            }\n            this.stream.write(name.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.stream.write(PdfNumber.floatToString(size));\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setFont);\n        }\n    }\n    /**\n     * `Writes the operator`.\n     * @private\n     */\n    writeOperator(opcode) {\n        this.stream.write(opcode);\n        this.stream.write(Operators.newLine);\n    }\n    checkTextParam(text) {\n        if (text == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        if (typeof text === 'string' && text === '') {\n            throw new Error('ArgumentException:The text can not be an empty string, text');\n        }\n    }\n    writeText(arg1, arg2) {\n        if ((arg1 instanceof PdfString) && (typeof arg2 === 'undefined')) {\n            this.stream.write(arg1.value);\n        }\n        else {\n            let start;\n            let end;\n            if (arg2) {\n                start = PdfString.hexStringMark[0];\n                end = PdfString.hexStringMark[1];\n            }\n            else {\n                start = PdfString.stringMark[0];\n                end = PdfString.stringMark[1];\n            }\n            this.stream.write(start);\n            this.stream.write(arg1);\n            this.stream.write(end);\n        }\n    }\n    writePoint(arg1, arg2) {\n        if ((arg1 instanceof PointF) && (typeof arg2 === 'undefined')) {\n            this.writePoint(arg1.x, arg1.y);\n        }\n        else {\n            let temparg1 = arg1;\n            this.stream.write(PdfNumber.floatToString(temparg1));\n            this.stream.write(Operators.whiteSpace);\n            // NOTE: Change Y co-ordinate because we shifted co-ordinate system only.\n            arg2 = this.updateY(arg2);\n            this.stream.write(PdfNumber.floatToString(arg2));\n            this.stream.write(Operators.whiteSpace);\n        }\n    }\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    updateY(arg) {\n        return -arg;\n    }\n    /**\n     * `Writes string` to the file.\n     * @private\n     */\n    write(string) {\n        let builder = '';\n        builder += string;\n        builder += Operators.newLine;\n        this.writeOperator(builder);\n    }\n    /**\n     * `Writes comment` to the file.\n     * @private\n     */\n    writeComment(comment) {\n        if (comment != null && comment.length > 0) {\n            let builder = '';\n            builder += Operators.comment;\n            builder += Operators.whiteSpace;\n            builder += comment;\n            //builder.Append( Operators.NewLine );\n            this.writeOperator(builder);\n        }\n        else {\n            throw new Error('Invalid comment');\n        }\n    }\n    /**\n     * Sets the `color and space`.\n     * @private\n     */\n    setColorAndSpace(color, colorSpace, forStroking) {\n        if (!color.isEmpty) {\n            // bool test = color is PdfExtendedColor;\n            this.stream.write(color.toString(colorSpace, forStroking));\n            this.stream.write(Operators.newLine);\n        }\n    }\n    // public setLineDashPattern(pattern : number[], patternOffset : number) : void\n    // {\n    //     let pat : PdfArray = new PdfArray(pattern);\n    //     let off : PdfNumber = new PdfNumber(patternOffset);\n    //     this.setLineDashPatternHelper(pat, off);\n    // }\n    // private setLineDashPatternHelper(pattern : PdfArray, patternOffset : PdfNumber) : void\n    // {\n    //     pattern.Save(this);\n    //     this.m_stream.write(Operators.whiteSpace);\n    //     patternOffset.Save(this);\n    //     this.m_stream.write(Operators.whiteSpace);\n    //     this.writeOperator(Operators.setDashPattern);\n    // }\n    /**\n     * Sets the `line dash pattern`.\n     * @private\n     */\n    setLineDashPattern(pattern, patternOffset) {\n        // let pat : PdfArray = new PdfArray(pattern);\n        // let off : PdfNumber = new PdfNumber(patternOffset);\n        // this.setLineDashPatternHelper(pat, off);\n        this.setLineDashPatternHelper(pattern, patternOffset);\n    }\n    /**\n     * Sets the `line dash pattern`.\n     * @private\n     */\n    setLineDashPatternHelper(pattern, patternOffset) {\n        let tempPattern = '[';\n        if (pattern.length > 1) {\n            for (let index = 0; index < pattern.length; index++) {\n                if (index === pattern.length - 1) {\n                    tempPattern += pattern[index].toString();\n                }\n                else {\n                    tempPattern += pattern[index].toString() + ' ';\n                }\n            }\n        }\n        tempPattern += '] ';\n        tempPattern += patternOffset.toString();\n        tempPattern += ' ' + Operators.setDashPattern;\n        this.stream.write(tempPattern);\n        this.stream.write(Operators.newLine);\n    }\n    /**\n     * Sets the `miter limit`.\n     * @private\n     */\n    setMiterLimit(miterLimit) {\n        this.stream.write(PdfNumber.floatToString(miterLimit));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setMiterLimit);\n    }\n    /**\n     * Sets the `width of the line`.\n     * @private\n     */\n    setLineWidth(width) {\n        this.stream.write(PdfNumber.floatToString(width));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineWidth);\n    }\n    /**\n     * Sets the `line cap`.\n     * @private\n     */\n    setLineCap(lineCapStyle) {\n        this.stream.write((lineCapStyle).toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineCapStyle);\n    }\n    /**\n     * Sets the `line join`.\n     * @private\n     */\n    setLineJoin(lineJoinStyle) {\n        this.stream.write((lineJoinStyle).toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineJoinStyle);\n    }\n    //IPdfWriter members\n    /**\n     * Gets or sets the current `position` within the stream.\n     * @private\n     */\n    get position() {\n        return this.stream.position;\n    }\n    /**\n     * Gets `stream length`.\n     * @private\n     */\n    get length() {\n        let returnValue = 0;\n        if (this.stream.data.length !== 0 && this.stream.data.length !== -1) {\n            for (let index = 0; index < this.stream.data.length; index++) {\n                returnValue += this.stream.data[index].length;\n            }\n        }\n        return returnValue;\n    }\n    /**\n     * Gets and Sets the `current document`.\n     * @private\n     */\n    get document() {\n        return null;\n    }\n}\n\n/**\n * PdfPen.ts class for EJ2-PDF\n */\n/**\n * `PdfPen` class defining settings for drawing operations, that determines the color,\n * width, and style of the drawing elements.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create a new page\n * let page1 : PdfPage = document.pages.add();\n * // set pen\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n * // draw rectangle\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfPen {\n    constructor(arg1, arg2) {\n        //Fields\n        /**\n         * Specifies the `color of the pen`.\n         * @default new PdfColor()\n         * @private\n         */\n        this.pdfColor = new PdfColor(0, 0, 0);\n        /**\n         * Specifies the `dash offset of the pen`.\n         * @default 0\n         * @private\n         */\n        this.dashOffsetValue = 0;\n        /**\n         * Specifies the `dash pattern of the pen`.\n         * @default [0]\n         * @private\n         */\n        this.penDashPattern = [0];\n        /**\n         * Specifies the `dash style of the pen`.\n         * @default Solid\n         * @private\n         */\n        this.pdfDashStyle = PdfDashStyle.Solid;\n        /**\n         * Specifies the `line cap of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineCap = 0;\n        /**\n         * Specifies the `line join of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineJoin = 0;\n        /**\n         * Specifies the `width of the pen`.\n         * @default 1.0\n         * @private\n         */\n        this.penWidth = 1.0;\n        /**\n         * Specifies the `mitter limit of the pen`.\n         * @default 0.0\n         * @private\n         */\n        this.internalMiterLimit = 0.0;\n        /**\n         * Stores the `colorspace` value.\n         * @default Rgb\n         * @private\n         */\n        this.colorSpace = PdfColorSpace.Rgb;\n        if (typeof arg2 === 'number') {\n            this.constructor(arg1);\n            this.width = arg2;\n        }\n        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfBrush) {\n            this.setBrush(arg1);\n        }\n        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfColor) {\n            this.color = arg1;\n        }\n    }\n    //Properties\n    /**\n     * Gets or sets the `color of the pen`.\n     * @private\n     */\n    get color() {\n        return this.pdfColor;\n    }\n    set color(value) {\n        this.pdfColor = value;\n    }\n    /**\n     * Gets or sets the `dash offset of the pen`.\n     * @private\n     */\n    get dashOffset() {\n        if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n            return 0;\n        }\n        else {\n            return this.dashOffsetValue;\n        }\n    }\n    set dashOffset(value) {\n        this.dashOffsetValue = value;\n    }\n    /**\n     * Gets or sets the `dash pattern of the pen`.\n     * @private\n     */\n    get dashPattern() {\n        return this.penDashPattern;\n    }\n    set dashPattern(value) {\n        this.penDashPattern = value;\n    }\n    /**\n     * Gets or sets the `dash style of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen style\n     * pen.dashStyle = PdfDashStyle.DashDot;\n     * // get pen style\n     * let style : PdfDashStyle = pen.dashStyle;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get dashStyle() {\n        return this.pdfDashStyle;\n    }\n    set dashStyle(value) {\n        if (this.pdfDashStyle !== value) {\n            this.pdfDashStyle = value;\n            switch (this.pdfDashStyle) {\n                case PdfDashStyle.Custom:\n                    break;\n                case PdfDashStyle.Dash:\n                    this.penDashPattern = [3, 1];\n                    break;\n                case PdfDashStyle.Dot:\n                    this.penDashPattern = [1, 1];\n                    break;\n                case PdfDashStyle.DashDot:\n                    this.penDashPattern = [3, 1, 1, 1];\n                    break;\n                case PdfDashStyle.DashDotDot:\n                    this.penDashPattern = [3, 1, 1, 1, 1, 1];\n                    break;\n                case PdfDashStyle.Solid:\n                    break;\n                default:\n                    this.pdfDashStyle = PdfDashStyle.Solid;\n                    this.penDashPattern = [0];\n                    break;\n            }\n        }\n    }\n    /**\n     * Gets or sets the `line cap of the pen`.\n     * @private\n     */\n    get lineCap() {\n        return this.pdfLineCap;\n    }\n    set lineCap(value) {\n        this.pdfLineCap = value;\n    }\n    /**\n     * Gets or sets the `line join style of the pen`.\n     * @private\n     */\n    get lineJoin() {\n        return this.pdfLineJoin;\n    }\n    set lineJoin(value) {\n        this.pdfLineJoin = value;\n    }\n    /**\n     * Gets or sets the `miter limit`.\n     * @private\n     */\n    get miterLimit() {\n        return this.internalMiterLimit;\n    }\n    set miterLimit(value) {\n        this.internalMiterLimit = value;\n    }\n    /**\n     * Gets or sets the `width of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen width\n     * pen.width = 2;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get width() {\n        return this.penWidth;\n    }\n    set width(value) {\n        this.penWidth = value;\n    }\n    //Helper\n    /**\n     * `Clones` this instance of PdfPen class.\n     * @private\n     */\n    clone() {\n        let pen = this;\n        return pen;\n    }\n    /**\n     * `Sets the brush`.\n     * @private\n     */\n    setBrush(brush) {\n        let sBrush = brush;\n        this.color = sBrush.color;\n        this.pdfBrush = sBrush;\n    }\n    /**\n     * `Monitors the changes`.\n     * @private\n     */\n    monitorChanges(currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n        let diff = false;\n        saveState = true;\n        if (currentPen == null) {\n            diff = true;\n        }\n        diff = this.dashControl(currentPen, saveState, streamWriter);\n        streamWriter.setLineWidth(this.width);\n        streamWriter.setLineJoin(this.lineJoin);\n        streamWriter.setLineCap(this.lineCap);\n        let miterLimit = this.miterLimit;\n        if (miterLimit > 0) {\n            streamWriter.setMiterLimit(miterLimit);\n            diff = true;\n        }\n        let brush = this.pdfBrush;\n        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n        diff = true;\n        return diff;\n    }\n    /**\n     * `Controls the dash style` and behaviour of each line.\n     * @private\n     */\n    dashControl(pen, saveState, streamWriter) {\n        saveState = true;\n        let lineWidth = this.width;\n        let pattern = this.getPattern();\n        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n        return saveState;\n    }\n    /**\n     * `Gets the pattern` of PdfPen.\n     * @private\n     */\n    getPattern() {\n        let pattern = this.dashPattern;\n        for (let i = 0; i < pattern.length; ++i) {\n            pattern[i] *= this.width;\n        }\n        return pattern;\n    }\n}\n\n/**\n * PdfTransformationMatrix.ts class for EJ2-PDF\n */\n/**\n * Class for representing Root `transformation matrix`.\n */\nclass PdfTransformationMatrix {\n    constructor(value) {\n        /**\n         * Value for `angle converting`.\n         * @default 180.0 / Math.PI\n         * @private\n         */\n        this.radDegFactor = 180.0 / Math.PI;\n        if (typeof value === 'undefined') {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, 1.00, 0.00, 0.00);\n        }\n        else {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, -1.00, 0.00, 0.00);\n        }\n    }\n    // Properties\n    /**\n     * Gets or sets the `internal matrix object`.\n     * @private\n     */\n    get matrix() {\n        return this.transformationMatrix;\n    }\n    set matrix(value) {\n        this.transformationMatrix = value;\n    }\n    // Public methods\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    translate(offsetX, offsetY) {\n        this.transformationMatrix.translate(offsetX, offsetY);\n    }\n    /**\n     * `Scales` coordinates by specified coordinates.\n     * @private\n     */\n    scale(scaleX, scaleY) {\n        this.transformationMatrix.elements[0] = scaleX;\n        this.transformationMatrix.elements[3] = scaleY;\n    }\n    /**\n     * `Rotates` coordinate system in counterclockwise direction.\n     * @private\n     */\n    rotate(angle) {\n        //Convert from degree to radian \n        angle = (angle * Math.PI) / 180;\n        //Rotation \n        this.transformationMatrix.elements[0] = Math.cos(angle);\n        this.transformationMatrix.elements[1] = Math.sin(angle);\n        this.transformationMatrix.elements[2] = -Math.sin(angle);\n        this.transformationMatrix.elements[3] = Math.cos(angle);\n    }\n    // Overrides\n    /**\n     * Gets `PDF representation`.\n     * @private\n     */\n    toString() {\n        let builder = '';\n        let whitespace = ' ';\n        for (let i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {\n            let temp = this.matrix.elements[i];\n            builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);\n            builder += whitespace;\n        }\n        return builder;\n    }\n    // Implementation\n    /**\n     * `Multiplies` matrices (changes coordinate system.)\n     * @private\n     */\n    multiply(matrix) {\n        this.transformationMatrix.multiply(matrix.matrix);\n    }\n    /**\n     * Converts `degrees to radians`.\n     * @private\n     */\n    static degreesToRadians(degreesX) {\n        return this.degRadFactor * degreesX;\n    }\n    /**\n     * Converts `radians to degrees`.\n     * @private\n     */\n    radiansToDegrees(radians) {\n        return this.radDegFactor * radians;\n    }\n    /**\n     * `Clones` this instance of PdfTransformationMatrix.\n     * @private\n     */\n    clone() {\n        return this;\n    }\n}\n// Constants\n/**\n * Value for `angle converting`.\n * @default Math.PI / 180.0\n * @private\n */\nPdfTransformationMatrix.degRadFactor = Math.PI / 180.0;\nclass Matrix {\n    constructor(arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (typeof arg1 === 'undefined') {\n            this.metrixElements = [];\n        }\n        else if (typeof arg1 === 'number') {\n            this.constructor();\n            this.metrixElements.push(arg1);\n            this.metrixElements.push(arg2);\n            this.metrixElements.push(arg3);\n            this.metrixElements.push(arg4);\n            this.metrixElements.push(arg5);\n            this.metrixElements.push(arg6);\n        }\n        else {\n            this.metrixElements = arg1;\n        }\n    }\n    // Properties\n    /**\n     * Gets the `elements`.\n     * @private\n     */\n    get elements() {\n        return this.metrixElements;\n    }\n    /**\n     * Gets the off set `X`.\n     * @private\n     */\n    get offsetX() {\n        return this.metrixElements[4];\n    }\n    /**\n     * Gets the off set `Y`.\n     * @private\n     */\n    get offsetY() {\n        return this.metrixElements[5];\n    }\n    // Implementation\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    translate(offsetX, offsetY) {\n        this.metrixElements[4] = offsetX;\n        this.metrixElements[5] = offsetY;\n    }\n    /**\n     * `Translates` the specified offset X.\n     * @private\n     */\n    transform(point) {\n        let x = point.x;\n        let y = point.y;\n        let x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;\n        let y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;\n        return new PointF(x2, y2);\n    }\n    /**\n     * `Multiplies matrices` (changes coordinate system.)\n     * @private\n     */\n    multiply(matrix) {\n        let tempMatrix = [];\n        tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);\n        tempMatrix[1] = (this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3]);\n        tempMatrix[2] = (this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2]);\n        tempMatrix[3] = (this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3]);\n        tempMatrix[4] = (this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX);\n        tempMatrix[5] = (this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY);\n        for (let i = 0; i < tempMatrix.length; i++) {\n            this.elements[i] = tempMatrix[i];\n        }\n    }\n    // IDisposable Members\n    /**\n     * `Dispose` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    dispose() {\n        this.metrixElements = null;\n    }\n    // ICloneable Members\n    /**\n     * `Clones` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    clone() {\n        let m = new Matrix(this.metrixElements);\n        return m;\n    }\n}\n\n/**\n * `constants.ts` class for EJ2-PDF\n * @private\n */\nclass ProcedureSets {\n    constructor() {\n        /**\n         * Specifies the `PDF` procedure set.\n         * @private\n         */\n        this.pdf = 'PDF';\n        /**\n         * Specifies the `Text` procedure set.\n         * @private\n         */\n        this.text = 'Text';\n        /**\n         * Specifies the `ImageB` procedure set.\n         * @private\n         */\n        this.imageB = 'ImageB';\n        /**\n         * Specifies the `ImageC` procedure set.\n         * @private\n         */\n        this.imageC = 'ImageC';\n        /**\n         * Specifies the `ImageI` procedure set.\n         * @private\n         */\n        this.imageI = 'ImageI';\n    }\n}\n\n/**\n * Dictionary class\n * @private\n * @hidden\n */\nclass TemporaryDictionary {\n    constructor() {\n        /**\n         * @hidden\n         * @private\n         */\n        this.mKeys = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.mValues = [];\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    size() {\n        return this.mKeys.length;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    add(key, value) {\n        if (key === undefined || key === null || value === undefined || value === null) {\n            throw new ReferenceError('Provided key or value is not valid.');\n        }\n        let index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            this.mKeys.push(key);\n            this.mValues.push(value);\n            return 1;\n        }\n        else {\n            throw new RangeError('An item with the same key has already been added.');\n        }\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    keys() {\n        return this.mKeys;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    values() {\n        return this.mValues;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    getValue(key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        let index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            throw new RangeError('No item with the specified key has been added.');\n        }\n        else {\n            return this.mValues[index];\n        }\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    setValue(key, value) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        let index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            this.mKeys.push(key);\n            this.mValues.push(value);\n        }\n        else {\n            this.mValues[index] = value;\n        }\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    remove(key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        let index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            throw new RangeError('No item with the specified key has been added.');\n        }\n        else {\n            this.mKeys.splice(index, 1);\n            this.mValues.splice(index, 1);\n            return true;\n        }\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    containsKey(key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        let index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    clear() {\n        this.mKeys = [];\n        this.mValues = [];\n    }\n}\n\n/**\n * Represents a simple `transparency`.\n * @private\n */\nclass PdfTransparency {\n    // Properties\n    // /**\n    //  * Gets the `stroke` operation alpha value.\n    //  * @private\n    //  */\n    // public get stroke() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `fill` operation alpha value.\n    //  * @private\n    //  */\n    // public get fill() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `blend mode`.\n    //  * @private\n    //  */\n    // public get mode() : PdfBlendMode {\n    //     let result : string = this.getName(this.dictionaryProperties.ca);\n    //     return PdfBlendMode.Normal;\n    // }\n    // Constructors\n    /**\n     * Initializes a new instance of the `Transparency` class.\n     * @private\n     */\n    constructor(stroke, fill, mode) {\n        // Fields\n        /**\n         * Internal variable to store `dictionary`.\n         * @default new PdfDictionary()\n         * @private\n         */\n        this.dictionary = new PdfDictionary();\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new DictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n        this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n    }\n    // // Implementation\n    // /**\n    //  * Gets the `number value`.\n    //  * @private\n    //  */\n    // private getNumber(keyName : string) : number {\n    //     let result : number = 0.0;\n    //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n    //     result = numb.intValue;\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `name value`.\n    //  * @private\n    //  */\n    // private getName(keyName : string) : string {\n    //     let result : string = null;\n    //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n    //     result = name.value;\n    //     return result;\n    // }\n    // IPdfWrapper Members\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get element() {\n        return this.dictionary;\n    }\n}\n\n/**\n * Represent a `collection of automatic fields information`.\n * @private\n */\nclass PdfAutomaticFieldInfoCollection {\n    /**\n     * Initializes a new instance of the 'PdfPageNumberFieldInfoCollection' class.\n     * @private\n     */\n    constructor() {\n        /**\n         * Internal variable to store instance of `pageNumberFields` class.\n         * @private\n         */\n        this.automaticFieldsInformation = [];\n        //\n    }\n    /**\n     * Gets the `page number fields collection`.\n     * @private\n     */\n    get automaticFields() {\n        return this.automaticFieldsInformation;\n    }\n    // Public methods\n    /// Adds the specified field info.\n    /**\n     * Add page number field into collection.\n     * @private\n     */\n    add(fieldInfo) {\n        return this.automaticFields.push(fieldInfo);\n    }\n}\n\n/**\n * Represents a base class for all page graphics elements.\n */\nclass PdfGraphicsElement {\n    // Constructors\n    constructor() {\n        //\n    }\n    /**\n     * `Draws` the page number field.\n     * @public\n     */\n    drawHelper(graphics, x, y) {\n        let bNeedSave = (x !== 0 || y !== 0);\n        let gState = null;\n        // Translate co-ordinates.\n        if (bNeedSave) {\n            // Save state.\n            gState = graphics.save();\n            graphics.translateTransform(x, y);\n        }\n        this.drawInternal(graphics);\n        if (bNeedSave) {\n            // Restore state.\n            graphics.restore(gState);\n        }\n    }\n}\n\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\n/**\n * Represents a fields which is calculated before the document saves.\n */\nclass PdfAutomaticField extends PdfGraphicsElement {\n    // Constructors\n    constructor() {\n        super();\n        // Fields\n        this.internalBounds = new RectangleF(0, 0, 0, 0);\n        this.internalTemplateSize = new SizeF(0, 0);\n    }\n    // Properties\n    get bounds() {\n        return this.internalBounds;\n    }\n    set bounds(value) {\n        this.internalBounds = value;\n    }\n    get size() {\n        return new SizeF(this.bounds.width, this.bounds.height);\n    }\n    set size(value) {\n        this.bounds.width = value.width;\n        this.bounds.height = value.height;\n    }\n    get location() {\n        return new PointF(this.bounds.x, this.bounds.y);\n    }\n    set location(value) {\n        this.bounds.x = value.x;\n        this.bounds.y = value.y;\n    }\n    get font() {\n        return this.internalFont;\n    }\n    set font(value) {\n        this.internalFont = value;\n    }\n    get brush() {\n        return this.internalBrush;\n    }\n    set brush(value) {\n        this.internalBrush = value;\n    }\n    get pen() {\n        return this.internalPen;\n    }\n    set pen(value) {\n        this.internalPen = value;\n    }\n    get stringFormat() {\n        return this.internalStringFormat;\n    }\n    set stringFormat(value) {\n        this.internalStringFormat = value;\n    }\n    performDrawHelper(graphics, location, scalingX, scalingY) {\n        if (this.bounds.height === 0 || this.bounds.width === 0) {\n            let text = this.getValue(graphics);\n            this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);\n        }\n    }\n    draw(arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            let location = new PointF(0, 0);\n            this.draw(arg1, location);\n        }\n        else if (arg2 instanceof PointF) {\n            this.draw(arg1, arg2.x, arg2.y);\n        }\n        else {\n            this.drawHelper(arg1, arg2, arg3);\n            let info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));\n            arg1.automaticFields.add(info);\n        }\n    }\n    getSize() {\n        if (this.bounds.height === 0 || this.bounds.width === 0) {\n            return this.internalTemplateSize;\n        }\n        else {\n            return this.size;\n        }\n    }\n    drawInternal(graphics) {\n        //\n    }\n    /* tslint:disable */\n    getBrush() {\n        return (typeof this.internalBrush === 'undefined' || this.internalBrush == null) ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;\n    }\n    getFont() {\n        return (typeof this.internalFont === 'undefined' || this.internalFont == null) ? PdfDocument.defaultFont : this.internalFont;\n    }\n    /* tslint:enable */\n    getPageFromGraphics(graphics) {\n        if (typeof graphics.page !== 'undefined' && graphics.page !== null) {\n            let page = graphics.page;\n            return page;\n        }\n        else {\n            let page = graphics.currentPage;\n            return page;\n        }\n    }\n}\n\n/**\n * PdfAutomaticFieldInfo.ts class for EJ2-PDF\n * @private\n */\n/**\n * Represents information about the automatic field.\n * @private\n */\nclass PdfAutomaticFieldInfo {\n    constructor(field, location, scaleX, scaleY) {\n        // Fields\n        /**\n         * Internal variable to store location of the field.\n         * @private\n         */\n        this.pageNumberFieldLocation = new PointF();\n        /**\n         * Internal variable to store field.\n         * @private\n         */\n        this.pageNumberField = null;\n        /**\n         * Internal variable to store x scaling factor.\n         * @private\n         */\n        this.scaleX = 1;\n        /**\n         * Internal variable to store y scaling factor.\n         * @private\n         */\n        this.scaleY = 1;\n        if (typeof location === 'undefined' && field instanceof PdfAutomaticFieldInfo) {\n            this.pageNumberField = field.field;\n            this.pageNumberFieldLocation = field.location;\n            this.scaleX = field.scalingX;\n            this.scaleY = field.scalingY;\n        }\n        else if (typeof scaleX === 'undefined' && location instanceof PointF && field instanceof PdfAutomaticField) {\n            this.pageNumberField = field;\n            this.pageNumberFieldLocation = location;\n        }\n        else {\n            this.pageNumberField = field;\n            this.pageNumberFieldLocation = location;\n            this.scaleX = scaleX;\n            this.scaleY = scaleY;\n        }\n    }\n    /* tslint:enable */\n    // Properties\n    /**\n     * Gets or sets the location.\n     * @private\n     */\n    get location() {\n        return this.pageNumberFieldLocation;\n    }\n    set location(value) {\n        this.pageNumberFieldLocation = value;\n    }\n    /**\n     * Gets or sets the field.\n     * @private\n     */\n    get field() {\n        return this.pageNumberField;\n    }\n    set field(value) {\n        this.pageNumberField = value;\n    }\n    /**\n     * Gets or sets the scaling X factor.\n     * @private\n     */\n    get scalingX() {\n        return this.scaleX;\n    }\n    set scalingX(value) {\n        this.scaleX = value;\n    }\n    /**\n     * Gets or sets the scaling Y factor.\n     * @private\n     */\n    get scalingY() {\n        return this.scaleY;\n    }\n    set scalingY(value) {\n        this.scaleY = value;\n    }\n}\n\n/**\n * PdfGraphics.ts class for EJ2-PDF\n */\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfGraphics {\n    constructor(arg1, arg2, arg3) {\n        /**\n         * Represents the `Current color space`.\n         * @private\n         */\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Stores `previous rendering mode`.\n         * @private\n         */\n        this.previousTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * Previous `character spacing` value or 0.\n         * @private\n         */\n        this.previousCharacterSpacing = 0.0;\n        /**\n         * Previous `word spacing` value or 0.\n         * @private\n         */\n        this.previousWordSpacing = 0.0;\n        /**\n         * The `previously used text scaling` value.\n         * @private\n         */\n        this.previousTextScaling = 100.0;\n        /**\n         * Instance of `ProcedureSets` class.\n         * @private\n         */\n        this.procedureSets = new ProcedureSets();\n        /**\n         * To check wihether it is a `direct text rendering`.\n         * @default true\n         * @private\n         */\n        this.isNormalRender = true;\n        /**\n         * check whether to `use font size` to calculate the shift.\n         * @default false\n         * @private\n         */\n        this.isUseFontSize = false;\n        /**\n         * check whether the font is in `italic type`.\n         * @default false\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * Check whether it is an `emf Text Matrix`.\n         * @default false\n         * @private\n         */\n        this.isEmfTextScaled = false;\n        /**\n         * Check whether it is an `emf` call.\n         * @default false\n         * @private\n         */\n        this.isEmf = false;\n        /**\n         * Check whether it is an `emf plus` call.\n         * @default false\n         * @private\n         */\n        this.isEmfPlus = false;\n        /**\n         * Check whether it is in `base line format`.\n         * @default true\n         * @private\n         */\n        this.isBaselineFormat = true;\n        /**\n         * Emf Text `Scaling Factor`.\n         * @private\n         */\n        this.emfScalingFactor = new SizeF(0, 0);\n        /**\n         * To check whether the `last color space` of document and garphics is saved.\n         * @private\n         */\n        this.colorSpaceChanged = false;\n        /**\n         * Stores an instance of `DictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isPointOverload = false;\n        /**\n         * Current colorspaces.\n         * @hidden\n         * @private\n         */\n        this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n        /**\n         * Checks the current image `is optimized` or not.\n         * @default false.\n         * @private\n         */\n        this.isImageOptimized = false;\n        /**\n         * Stores the `graphics states`.\n         * @private\n         */\n        this.graphicsState = [];\n        /**\n         * Indicates whether the object `had trasparency`.\n         * @default false\n         * @private\n         */\n        this.istransparencySet = false;\n        /**\n         * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n         * @default null\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the index of the start line that should draw with in the next page.\n         * @private\n         */\n        this.startCutIndex = -1;\n        if (arg3 instanceof PdfStreamWriter) {\n            this.pdfStreamWriter = arg3;\n            this.getResources = arg2;\n            this.canvasSize = arg1;\n            this.initialize();\n        }\n        else {\n            this.constructor(arg1, arg2, new PdfStreamWriter(arg3));\n        }\n    }\n    //  Properties\n    /**\n     * Returns the `result` after drawing string.\n     * @private\n     */\n    get stringLayoutResult() {\n        return this.pdfStringLayoutResult;\n    }\n    /**\n     * Gets the `size` of the canvas.\n     * @private\n     */\n    get size() {\n        return this.canvasSize;\n    }\n    /**\n     * Gets and Sets the value of `MediaBox upper right bound`.\n     * @private\n     */\n    get mediaBoxUpperRightBound() {\n        if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n            this.internalMediaBoxUpperRightBound = 0;\n        }\n        return this.internalMediaBoxUpperRightBound;\n    }\n    set mediaBoxUpperRightBound(value) {\n        this.internalMediaBoxUpperRightBound = value;\n    }\n    /**\n     * Gets the `size` of the canvas reduced by margins and page templates.\n     * @private\n     */\n    get clientSize() {\n        return new SizeF(this.clipBounds.width, this.clipBounds.height);\n    }\n    /**\n     * Gets or sets the current `color space` of the document\n     * @private\n     */\n    get colorSpace() {\n        return this.currentColorSpace;\n    }\n    set colorSpace(value) {\n        this.currentColorSpace = value;\n    }\n    /**\n     * Gets the `stream writer`.\n     * @private\n     */\n    get streamWriter() {\n        return this.pdfStreamWriter;\n    }\n    /**\n     * Gets the `transformation matrix` reflecting current transformation.\n     * @private\n     */\n    get matrix() {\n        if (this.transformationMatrix == null) {\n            this.transformationMatrix = new PdfTransformationMatrix();\n        }\n        return this.transformationMatrix;\n    }\n    /**\n     * Gets the `layer` for the graphics, if exists.\n     * @private\n     */\n    get layer() {\n        return this.pageLayer;\n    }\n    /**\n     * Gets the `page` for this graphics, if exists.\n     * @private\n     */\n    get page() {\n        return this.pageLayer.page;\n    }\n    get automaticFields() {\n        if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n            this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n        }\n        return this.internalAutomaticFields;\n    }\n    //Implementation\n    /**\n     * `Initializes` this instance.\n     * @private\n     */\n    initialize() {\n        this.bStateSaved = false;\n        this.currentPen = null;\n        this.currentBrush = null;\n        this.currentFont = null;\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        this.bCSInitialized = false;\n        this.transformationMatrix = null;\n        this.previousTextRenderingMode = (-1); //.Fill;\n        this.previousCharacterSpacing = -1.0;\n        this.previousWordSpacing = -1.0;\n        this.previousTextScaling = -100.0;\n        // this.m_trasparencies = null;\n        this.currentStringFormat = null;\n        this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    }\n    drawPdfTemplate(template, location, size) {\n        if (typeof size === 'undefined') {\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            this.drawPdfTemplate(template, location, template.size);\n        }\n        else {\n            // let crossTable : PdfCrossTable = null;\n            // if (this.pageLayer != null) {\n            //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n            // }\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            let scaleX = (template.width > 0) ? size.width / template.width : 1;\n            let scaleY = (template.height > 0) ? size.height / template.height : 1;\n            let bNeedScale = !(scaleX === 1 && scaleY === 1);\n            // Save state.\n            let state = this.save();\n            // Take into consideration that rect location is bottom/left.\n            let matrix = new PdfTransformationMatrix();\n            if (this.pageLayer != null) {\n                this.getTranslateTransform(location.x, location.y + size.height, matrix);\n            }\n            if (bNeedScale) {\n                this.getScaleTransform(scaleX, scaleY, matrix);\n            }\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            let resources = this.getResources.getResources();\n            let name = resources.getName(template);\n            this.pdfStreamWriter.executeObject(name);\n            // Restore state.\n            this.restore(state);\n            //Transfer automatic fields from template.\n            let g = template.graphics;\n            if (g != null) {\n                for (let index = 0; index < g.automaticFields.automaticFields.length; index++) {\n                    let fieldInfo = g.automaticFields.automaticFields[index];\n                    let newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n                    let scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n                    let scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n                    this.page.dictionary.modify();\n                }\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        }\n    }\n    /* tslint:disable */\n    /**\n     * @public\n     */\n    drawString(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n        if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n            this.isOverloadWithPosition = true;\n            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, (this.clientSize.width - arg5), 0, arg7);\n        }\n        else {\n            let temparg3 = arg3;\n            let temparg4 = arg4;\n            let temparg5 = arg5;\n            let temparg6 = arg6;\n            let temparg7 = arg7;\n            let temparg8 = arg8;\n            let temparg9 = arg9;\n            let layouter = new PdfStringLayouter();\n            let result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, 0), this.isOverloadWithPosition, this.clientSize);\n            if (!result.empty) {\n                let rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n                if (temparg7 <= 0) {\n                    temparg5 = rect.x;\n                    temparg7 = rect.width;\n                }\n                if (temparg8 <= 0) {\n                    temparg6 = rect.y;\n                    temparg8 = rect.height;\n                }\n                this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n                this.isEmfTextScaled = false;\n                this.emfScalingFactor = new SizeF(0, 0);\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n            this.isNormalRender = true;\n            this.pdfStringLayoutResult = result;\n            this.isUseFontSize = false;\n        }\n    } /* tslint:enable */\n    drawLine(arg1, arg2, arg3, arg4, arg5) {\n        if (arg2 instanceof PointF) {\n            let temparg2 = arg2;\n            let temparg3 = arg3;\n            this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n        }\n        else {\n            let temparg2 = arg2;\n            let temparg3 = arg3;\n            let temparg4 = arg4;\n            let temparg5 = arg5;\n            this.stateControl(arg1, null, null);\n            let sw = this.streamWriter;\n            sw.beginPath(temparg2, temparg3);\n            sw.appendLineSegment(temparg4, temparg5);\n            sw.strokePath();\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n        }\n    }\n    /* tslint:disable */\n    drawRectangle(arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n            let temparg3 = arg3;\n            this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n        }\n        else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n            let temparg3 = arg3;\n            this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n        }\n        else {\n            let temparg3 = arg3;\n            let temparg4 = arg4;\n            let temparg5 = arg5;\n            let temparg6 = arg6;\n            if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n                arg2 = null;\n            }\n            let temparg1 = arg1;\n            let temparg2 = arg2;\n            this.stateControl(temparg1, temparg2, null);\n            this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n            this.drawPath(temparg1, temparg2, false);\n        }\n    }\n    drawPath(arg1, arg2, arg3, arg4) {\n        if (typeof arg3 === 'boolean') {\n            let temparg3 = arg3;\n            this.drawPath(arg1, arg2, PdfFillMode.Winding, temparg3);\n        }\n        else {\n            let temparg3 = arg3;\n            let isPen = arg1 != null;\n            let isBrush = arg2 != null;\n            let isEvenOdd = (temparg3 === PdfFillMode.Alternate);\n            if (isPen && isBrush) {\n                this.streamWriter.fillStrokePath(isEvenOdd);\n            }\n            else if (!isPen && !isBrush) {\n                this.streamWriter.endPath();\n            }\n            else if (isPen) {\n                this.streamWriter.strokePath();\n            }\n            else {\n                this.streamWriter.fillPath(isEvenOdd);\n            }\n        }\n    }\n    /* tslint:disable */\n    drawImage(arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            let size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size.width, size.height);\n        }\n        else {\n            let temparg2 = arg2;\n            let temparg3 = arg3;\n            let temparg5 = arg5;\n            arg1.save();\n            let matrix = new PdfTransformationMatrix();\n            this.getTranslateTransform(temparg2, (temparg3 + temparg5), matrix);\n            this.getScaleTransform(arg4, arg5, matrix);\n            this.pdfStreamWriter.write('q');\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            let resources = this.getResources.getResources();\n            if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n                resources.document = this.page.document;\n            }\n            let name = resources.getName(arg1);\n            if (typeof this.pageLayer !== 'undefined') {\n                this.page.setResources(resources);\n            }\n            this.pdfStreamWriter.executeObject(name);\n            this.pdfStreamWriter.write(Operators.restoreState);\n            this.pdfStreamWriter.write(Operators.newLine);\n            let resource = this.getResources.getResources();\n            resource.requireProcedureSet(this.procedureSets.imageB);\n            resource.requireProcedureSet(this.procedureSets.imageC);\n            resource.requireProcedureSet(this.procedureSets.imageI);\n            resource.requireProcedureSet(this.procedureSets.text);\n        }\n    }\n    //Implementation\n    /* tslint:disable */\n    /**\n     * Returns `bounds` of the line info.\n     * @private\n     */\n    getLineBounds(lineIndex, result, font, layoutRectangle, format) {\n        let bounds;\n        if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n            let line = result.lines[lineIndex];\n            let vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n            let y = vShift + layoutRectangle.y + (result.lineHeight * lineIndex);\n            let lineWidth = line.width;\n            let hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            let lineIndent = this.getLineIndent(line, format, layoutRectangle, (lineIndex === 0));\n            hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            let x = layoutRectangle.x + hShift;\n            /* tslint:disable */\n            let width = (!this.shouldJustify(line, layoutRectangle.width, format)) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n            let height = result.lineHeight;\n            bounds = new RectangleF(x, y, width, height);\n        }\n        else {\n            bounds = new RectangleF(0, 0, 0, 0);\n        }\n        return bounds;\n    }\n    /**\n     * Creates `lay outed rectangle` depending on the text settings.\n     * @private\n     */\n    checkCorrectLayoutRectangle(textSize, x, y, format) {\n        let layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n        if (format != null) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    layoutedRectangle.x -= layoutedRectangle.width / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    layoutedRectangle.x -= layoutedRectangle.width;\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    layoutedRectangle.y -= layoutedRectangle.height / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    layoutedRectangle.y -= layoutedRectangle.height;\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    }\n    /**\n     * Sets the `layer` for the graphics.\n     * @private\n     */\n    setLayer(layer) {\n        this.pageLayer = layer;\n        let page = layer.page;\n        if (page != null && typeof page !== 'undefined') {\n            page.beginSave = this.pageSave;\n        }\n    }\n    /**\n     * Adding page number field before page saving.\n     * @private\n     */\n    /* tslint:disable */\n    pageSave(page) {\n        if (page.graphics.automaticFields != null) {\n            for (let i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n                let fieldInfo = page.graphics.automaticFields.automaticFields[i];\n                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n            }\n        }\n    }\n    /**\n     * `Draws a layout result`.\n     * @private\n     */\n    drawStringLayoutResult(result, font, pen, brush, layoutRectangle, format) {\n        if (!result.empty) {\n            this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n            // Set text scaling\n            let textScaling = (format != null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.setTextScaling(textScaling);\n                this.previousTextScaling = textScaling;\n            }\n            let height = (format == null || format.lineSpacing === 0) ? font.height : format.lineSpacing + font.height;\n            let subScript = (format != null && format.subSuperScript === PdfSubSuperScript.SubScript);\n            let shift = 0;\n            shift = (subScript) ? height - (font.height + font.metrics.getDescent(format)) : (height - font.metrics.getAscent(format));\n            this.shift = shift;\n            this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n            this.pdfStreamWriter.setLeading(+height);\n            let resultHeight = 0;\n            let remainingString = '';\n            for (let i = 0; i < result.lines.length; i++) {\n                resultHeight += result.lineHeight;\n                if ((layoutRectangle.y + resultHeight) > this.clientSize.height) {\n                    this.startCutIndex = i;\n                    break;\n                }\n            }\n            for (let j = this.startCutIndex; (j < result.lines.length && j >= 0); j++) {\n                remainingString += result.lines[j].text;\n            }\n            let bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n            this.drawLayoutResult(result, font, format, layoutRectangle);\n            this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n            this.isEmfPlus = false;\n            this.isUseFontSize = false;\n            if (this.startCutIndex !== -1) {\n                let page = this.getNextPage();\n                page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n            }\n        }\n        else {\n            throw new Error('ArgumentNullException:result');\n        }\n    }\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    getNextPage() {\n        let section = this.currentPage.section;\n        let nextPage = null;\n        let index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        return nextPage;\n    }\n    setClip(rectangle, mode) {\n        if (typeof mode === 'undefined') {\n            this.setClip(rectangle, PdfFillMode.Winding);\n        }\n        else {\n            this.pdfStreamWriter.appendRectangle(rectangle);\n            this.pdfStreamWriter.clipPath((mode === PdfFillMode.Alternate));\n        }\n    }\n    /**\n     * Applies all the `text settings`.\n     * @private\n     */\n    applyStringSettings(font, pen, brush, format, bounds) {\n        let tm = this.getTextRenderingMode(pen, brush, format);\n        this.stateControl(pen, brush, font, format);\n        this.pdfStreamWriter.beginText();\n        if ((tm) !== this.previousTextRenderingMode) {\n            this.pdfStreamWriter.setTextRenderingMode(tm);\n            this.previousTextRenderingMode = tm;\n        }\n        // Set character spacing.\n        let cs = (format != null) ? format.characterSpacing : 0;\n        if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n            this.pdfStreamWriter.setCharacterSpacing(cs);\n            this.previousCharacterSpacing = cs;\n        }\n        // Set word spacing.\n        // NOTE: it works only if the space code is equal to 32 (0x20).\n        let ws = (format != null) ? format.wordSpacing : 0;\n        if (ws !== this.previousWordSpacing) {\n            this.pdfStreamWriter.setWordSpacing(ws);\n            this.previousWordSpacing = ws;\n        }\n    }\n    /**\n     * Calculates `shift value` if the text is vertically aligned.\n     * @private\n     */\n    getTextVerticalAlignShift(textHeight, boundsHeight, format) {\n        let shift = 0;\n        if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    }\n    /* tslint:disable */\n    /**\n     * `Draws layout result`.\n     * @private\n     */\n    drawLayoutResult(result, font, format, layoutRectangle) {\n        let vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, vAlignShift);\n        }\n        let lines = result.lines;\n        for (let i = 0, len = lines.length; (i < len && i !== this.startCutIndex); i++) {\n            let lineInfo = lines[i];\n            let line = lineInfo.text;\n            let lineWidth = lineInfo.width;\n            let hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            let lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n            hAlignShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n            }\n            this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n            }\n            if (this.isOverloadWithPosition && lines.length > 1) {\n                this.pdfStreamWriter.startNextLine(-(layoutRectangle.x), 0);\n                layoutRectangle.x = 0;\n                layoutRectangle.width = this.clientSize.width;\n                this.isOverloadWithPosition = false;\n                this.isPointOverload = true;\n            }\n        }\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n        }\n        this.pdfStreamWriter.endText();\n    }\n    /**\n     * `Draws Ascii line`.\n     * @private\n     */\n    drawAsciiLine(lineInfo, layoutRectangle, font, format) {\n        this.justifyLine(lineInfo, layoutRectangle.width, format);\n        let value = '';\n        if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n            for (let i = 0; i < lineInfo.text.length; i++) {\n                if (lineInfo.text[i] === '(') {\n                    value += '\\\\\\(';\n                }\n                else if (lineInfo.text[i] === ')') {\n                    value += '\\\\\\)';\n                }\n                else {\n                    value += lineInfo.text[i];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo.text;\n        }\n        let line = '(' + value + ')';\n        this.pdfStreamWriter.showNextLineText(new PdfString(line));\n    }\n    /**\n     * `Justifies` the line if needed.\n     * @private\n     */\n    justifyLine(lineInfo, boundsWidth, format) {\n        let line = lineInfo.text;\n        let lineWidth = lineInfo.width;\n        let shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n        let hasWordSpacing = (format != null && format.wordSpacing !== 0);\n        let symbols = StringTokenizer.spaces;\n        let whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        let wordSpace = 0;\n        if (shouldJustify) {\n            // Correct line width.\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            let difference = boundsWidth - lineWidth;\n            wordSpace = difference / whitespacesCount;\n            this.pdfStreamWriter.setWordSpacing(wordSpace);\n        }\n        else {\n            // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n            if (hasWordSpacing) {\n                this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n            }\n            else {\n                this.pdfStreamWriter.setWordSpacing(0);\n            }\n        }\n        return wordSpace;\n    }\n    /**\n     * `Reset` or reinitialize the current graphic value.\n     * @private\n     */\n    reset(size) {\n        this.canvasSize = size;\n        this.streamWriter.clear();\n        this.initialize();\n        this.initializeCoordinates();\n    }\n    /**\n     * Checks whether the line should be `justified`.\n     * @private\n     */\n    shouldJustify(lineInfo, boundsWidth, format) {\n        let line = lineInfo.text;\n        let lineWidth = lineInfo.width;\n        let justifyStyle = (format != null && format.alignment === PdfTextAlignment.Justify);\n        let goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        let symbols = StringTokenizer.spaces;\n        let whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        let hasSpaces = (whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace);\n        let goodLineBreakStyle = ((lineInfo.lineType & LineType.LayoutBreak) > 0);\n        /* tslint:disable */\n        let shouldJustify = (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify)); /* tslint:enable */\n        return shouldJustify;\n    }\n    /* tslint:disable */\n    /**\n     * Emulates `Underline, Strikeout` of the text if needed.\n     * @private\n     */\n    underlineStrikeoutText(pen, brush, result, font, layoutRectangle, format) {\n        if (font.underline || font.strikeout) {\n            // Calculate line width.\n            let linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n            if (linePen != null) {\n                // Approximate line positions.\n                let vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n                let underlineYOffset = 0;\n                underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n                let strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n                let lines = result.lines;\n                // Run through the text and draw lines.\n                for (let i = 0, len = result.lineCount; i < len; i++) {\n                    let lineInfo = lines[i];\n                    let line = lineInfo.text;\n                    let lineWidth = lineInfo.width;\n                    let hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n                    let lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n                    hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n                    let x1 = layoutRectangle.x + hShift;\n                    /* tslint:disable */\n                    let x2 = (!this.shouldJustify(lineInfo, layoutRectangle.width, format)) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n                    /* tslint:enable */\n                    if (font.underline) {\n                        let y = underlineYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        underlineYOffset += result.lineHeight;\n                    }\n                    if (font.strikeout) {\n                        let y = strikeoutYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        strikeoutYOffset += result.lineHeight;\n                    }\n                    if (this.isPointOverload && lines.length > 1) {\n                        layoutRectangle.x = 0;\n                        layoutRectangle.width = this.clientSize.width;\n                    }\n                }\n                this.isPointOverload = false;\n            }\n        }\n    }\n    /**\n     * `Creates a pen` for drawing lines in the text.\n     * @private\n     */\n    createUnderlineStikeoutPen(pen, brush, font, format) {\n        // Calculate line width.\n        let lineWidth = font.metrics.getSize(format) / 20;\n        let linePen = null;\n        // Create a pen fo the lines.\n        if (pen != null) {\n            linePen = new PdfPen(pen.color, lineWidth);\n        }\n        else if (brush != null) {\n            linePen = new PdfPen(brush, lineWidth);\n        }\n        return linePen;\n    }\n    /**\n     * Return `text rendering mode`.\n     * @private\n     */\n    getTextRenderingMode(pen, brush, format) {\n        let tm = TextRenderingMode.None;\n        if (pen != null && brush != null) {\n            tm = TextRenderingMode.FillStroke;\n        }\n        else if (pen != null) {\n            tm = TextRenderingMode.Stroke;\n        }\n        else {\n            tm = TextRenderingMode.Fill;\n        }\n        if (format != null && format.clipPath) {\n            tm |= TextRenderingMode.ClipFlag;\n        }\n        return tm;\n    }\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    getLineIndent(lineInfo, format, layoutBounds, firstLine) {\n        let lineIndent = 0;\n        let firstParagraphLine = ((lineInfo.lineType & LineType.FirstParagraphLine) > 0);\n        if (format != null && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (layoutBounds.width > 0) ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    }\n    /**\n     * Calculates shift value if the line is `horizontaly aligned`.\n     * @private\n     */\n    getHorizontalAlignShift(lineWidth, boundsWidth, format) {\n        let shift = 0;\n        if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    }\n    /**\n     * Gets or sets the value that indicates `text direction` mode.\n     * @private\n     */\n    rightToLeft(format) {\n        let rtl = (format != null && format.rightToLeft);\n        return rtl;\n    }\n    stateControl(pen, brush, font, format) {\n        if (typeof format === 'undefined') {\n            this.stateControl(pen, brush, font, null);\n        }\n        else {\n            let saveState = false;\n            if (brush !== null) {\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    if (this.colorSpaceChanged === false) {\n                        this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n                        this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n                        this.colorSpace = this.pageLayer.page.document.colorSpace;\n                        this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                        this.colorSpaceChanged = true;\n                    }\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            else if (pen != null) {\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    /* tslint:disable */\n                    this.colorSpace = this.pageLayer.page.document.colorSpace;\n                    this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            this.penControl(pen, saveState);\n            this.brushControl(brush, saveState);\n            this.fontControl(font, format, saveState);\n        }\n    }\n    /**\n     * Initializes the `current color space`.\n     * @private\n     */\n    initCurrentColorSpace(colorspace) {\n        let re = this.getResources.getResources();\n        if (!this.bCSInitialized) {\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n            this.bCSInitialized = true;\n        }\n    }\n    /**\n     * Controls the `pen state`.\n     * @private\n     */\n    penControl(pen, saveState) {\n        if (pen != null) {\n            this.currentPen = pen;\n            this.colorSpace = PdfColorSpace.Rgb;\n            /* tslint:disable */\n            pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n            /* tslint:enable */\n            this.currentPen = pen.clone();\n        }\n    }\n    /**\n     * Controls the `brush state`.\n     * @private\n     */\n    brushControl(brush, saveState) {\n        if (brush != null) {\n            this.currentBrush = brush;\n            /* tslint:disable */\n            brush.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n            /* tslint:enable */\n            this.currentBrush = brush;\n            brush = null;\n        }\n    }\n    /**\n     * Saves the font and other `font settings`.\n     * @private\n     */\n    fontControl(font, format, saveState) {\n        if (font != null) {\n            let curSubSuper = (format != null) ? format.subSuperScript : PdfSubSuperScript.None;\n            /* tslint:disable */\n            let prevSubSuper = (this.currentStringFormat != null) ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n            if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n                let resources = this.getResources.getResources();\n                this.currentFont = font;\n                this.currentStringFormat = format;\n                let size = font.metrics.getSize(format);\n                /* tslint:disable */\n                this.isEmfTextScaled = false;\n                let fontName = resources.getName(font);\n                this.pdfStreamWriter.setFont(font, fontName, size);\n            }\n        }\n    }\n    setTransparency(arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            this.istransparencySet = true;\n            this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n        }\n        else {\n            if (this.trasparencies == null) {\n                this.trasparencies = new TemporaryDictionary();\n            }\n            let transp = null;\n            let td = new TransparencyData(arg1, arg2, arg3);\n            if (this.trasparencies.containsKey(td)) {\n                transp = this.trasparencies.getValue(td);\n            }\n            if (transp == null) {\n                transp = new PdfTransparency(arg1, arg2, arg3);\n                this.trasparencies.setValue(td, transp);\n            }\n            let resources = this.getResources.getResources();\n            let name = resources.getName(transp);\n            let sw = this.streamWriter;\n            sw.setGraphicsState(name);\n        }\n    }\n    clipTranslateMargins(x, y, left, top, right, bottom) {\n        if (x instanceof RectangleF && typeof y === 'undefined') {\n            this.clipBounds = x;\n            this.pdfStreamWriter.writeComment('Clip margins.');\n            this.pdfStreamWriter.appendRectangle(x);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n            this.translateTransform(x.x, x.y);\n        }\n        else if (typeof x === 'number') {\n            let clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n            this.clipBounds = clipArea;\n            this.pdfStreamWriter.writeComment(\"Clip margins.\");\n            this.pdfStreamWriter.appendRectangle(clipArea);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n            this.translateTransform(x, y);\n        }\n    }\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    updateY(y) {\n        return -y;\n    }\n    /**\n     * Used to `translate the transformation`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set translate transform\n     * page1.graphics.translateTransform(100, 100);\n     * //\n     * // draw the rectangle after applying translate transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param offsetX The x-coordinate of the translation.\n     * @param offsetY The y-coordinate of the translation.\n     */\n    translateTransform(offsetX, offsetY) {\n        let matrix = new PdfTransformationMatrix();\n        this.getTranslateTransform(offsetX, offsetY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    }\n    /**\n     * `Translates` coordinates of the input matrix.\n     * @private\n     */\n    getTranslateTransform(x, y, input) {\n        input.translate(x, this.updateY(y));\n        return input;\n    }\n    /* tslint:disable */\n    /**\n     * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // apply scaling trasformation\n     * page1.graphics.scaleTransform(1.5, 2);\n     * //\n     * // draw the rectangle after applying scaling transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param scaleX Scale factor in the x direction.\n     * @param scaleY Scale factor in the y direction.\n     */\n    /* tslint:enable */\n    scaleTransform(scaleX, scaleY) {\n        let matrix = new PdfTransformationMatrix();\n        this.getScaleTransform(scaleX, scaleY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    }\n    /**\n     * `Scales` coordinates of the input matrix.\n     * @private\n     */\n    getScaleTransform(x, y, input) {\n        if (input == null) {\n            input = new PdfTransformationMatrix();\n        }\n        input.scale(x, y);\n        return input;\n    }\n    /**\n     * Applies the specified `rotation` to the transformation matrix of this Graphics.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set RotateTransform with 25 degree of angle\n     * page1.graphics.rotateTransform(25);\n     * //\n     * // draw the rectangle after RotateTransformation\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param angle Angle of rotation in degrees.\n     */\n    rotateTransform(angle) {\n        let matrix = new PdfTransformationMatrix();\n        this.getRotateTransform(angle, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    }\n    /**\n     * `Initializes coordinate system`.\n     * @private\n     */\n    initializeCoordinates() {\n        // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n        this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n        // Translate co-ordinates only, don't flip.\n        if (this.mediaBoxUpperRightBound !== -(this.size.height)) {\n            if (this.cropBox == null) {\n                if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n                    this.translateTransform(0, this.updateY(this.size.height));\n                }\n                else {\n                    this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n                }\n            }\n        }\n    }\n    /**\n     * `Rotates` coordinates of the input matrix.\n     * @private\n     */\n    getRotateTransform(angle, input) {\n        if (input == null || typeof input === 'undefined') {\n            input = new PdfTransformationMatrix();\n        }\n        input.rotate(this.updateY(angle));\n        return input;\n    }\n    /**\n     * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // save the graphics state\n     * let state1 : PdfGraphicsState = page1.graphics.save();\n     * //\n     * page1.graphics.scaleTransform(1.5, 2);\n     * // draw the rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // restore the graphics state\n     * page1.graphics.restore(state1);\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    save() {\n        let state = new PdfGraphicsState(this, this.matrix.clone());\n        state.brush = this.currentBrush;\n        state.pen = this.currentPen;\n        state.font = this.currentFont;\n        state.colorSpace = this.currentColorSpace;\n        state.characterSpacing = this.previousCharacterSpacing;\n        state.wordSpacing = this.previousWordSpacing;\n        state.textScaling = this.previousTextScaling;\n        state.textRenderingMode = this.previousTextRenderingMode;\n        this.graphicsState.push(state);\n        this.pdfStreamWriter.saveGraphicsState();\n        return state;\n    }\n    restore(state) {\n        if (typeof state === 'undefined') {\n            if (this.graphicsState.length > 0) {\n                this.doRestoreState();\n            }\n        }\n        else {\n            if (this.graphicsState.indexOf(state) !== -1) {\n                for (;;) {\n                    if (this.graphicsState.length === 0) {\n                        break;\n                    }\n                    let popState = this.doRestoreState();\n                    if (popState === state) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * `Restores graphics state`.\n     * @private\n     */\n    doRestoreState() {\n        let state = this.graphicsState.pop();\n        this.transformationMatrix = state.matrix;\n        this.currentBrush = state.brush;\n        this.currentPen = state.pen;\n        this.currentFont = state.font;\n        this.currentColorSpace = state.colorSpace;\n        this.previousCharacterSpacing = state.characterSpacing;\n        this.previousWordSpacing = state.wordSpacing;\n        this.previousTextScaling = state.textScaling;\n        this.previousTextRenderingMode = state.textRenderingMode;\n        this.pdfStreamWriter.restoreGraphicsState();\n        return state;\n    }\n}\n// Constants\n/**\n * Specifies the mask of `path type values`.\n * @private\n */\nPdfGraphics.pathTypesValuesMask = 0xf;\n/**\n * Checks whether the object is `transparencyObject`.\n * @hidden\n * @private\n */\nPdfGraphics.transparencyObject = false;\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nclass GetResourceEventHandler {\n    /**\n     * Return the instance of `PdfResources` class.\n     * @private\n     */\n    getResources() {\n        return this.sender.getResources();\n    }\n    /**\n     * Initialize instance of `GetResourceEventHandler` class.\n     * Alternate for event handlers and delegates.\n     * @private\n     */\n    constructor(sender) {\n        this.sender = sender;\n    }\n}\nclass PdfGraphicsState {\n    constructor(graphics, matrix) {\n        /**\n         * Stores `previous rendering mode`.\n         * @default TextRenderingMode.Fill\n         * @private\n         */\n        this.internalTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * `Previous character spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalCharacterSpacing = 0.0;\n        /**\n         * `Previous word spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalWordSpacing = 0.0;\n        /**\n         * The previously used `text scaling value`.\n         * @default 100.0\n         * @private\n         */\n        this.internalTextScaling = 100.0;\n        /**\n         * `Current color space`.\n         * @default PdfColorSpace.Rgb\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        if (typeof graphics !== 'undefined') {\n            this.pdfGraphics = graphics;\n            this.transformationMatrix = matrix;\n        }\n    }\n    // Properties\n    /**\n     * Gets the parent `graphics object`.\n     * @private\n     */\n    get graphics() {\n        return this.pdfGraphics;\n    }\n    /**\n     * Gets the `current matrix`.\n     * @private\n     */\n    get matrix() {\n        return this.transformationMatrix;\n    }\n    /**\n     * Gets or sets the `current character spacing`.\n     * @private\n     */\n    get characterSpacing() {\n        return this.internalCharacterSpacing;\n    }\n    set characterSpacing(value) {\n        this.internalCharacterSpacing = value;\n    }\n    /**\n     * Gets or sets the `word spacing` value.\n     * @private\n     */\n    get wordSpacing() {\n        return this.internalWordSpacing;\n    }\n    set wordSpacing(value) {\n        this.internalWordSpacing = value;\n    }\n    /**\n     * Gets or sets the `text scaling` value.\n     * @private\n     */\n    get textScaling() {\n        return this.internalTextScaling;\n    }\n    set textScaling(value) {\n        this.internalTextScaling = value;\n    }\n    /**\n     * Gets or sets the `current pen` object.\n     * @private\n     */\n    get pen() {\n        return this.pdfPen;\n    }\n    set pen(value) {\n        this.pdfPen = value;\n    }\n    /**\n     * Gets or sets the `brush`.\n     * @private\n     */\n    get brush() {\n        return this.pdfBrush;\n    }\n    set brush(value) {\n        this.pdfBrush = value;\n    }\n    /**\n     * Gets or sets the `current font` object.\n     * @private\n     */\n    get font() {\n        return this.pdfFont;\n    }\n    set font(value) {\n        this.pdfFont = value;\n    }\n    /**\n     * Gets or sets the `current color space` value.\n     * @private\n     */\n    get colorSpace() {\n        return this.pdfColorSpace;\n    }\n    set colorSpace(value) {\n        this.pdfColorSpace = value;\n    }\n    /**\n     * Gets or sets the `text rendering mode`.\n     * @private\n     */\n    get textRenderingMode() {\n        return this.internalTextRenderingMode;\n    }\n    set textRenderingMode(value) {\n        this.internalTextRenderingMode = value;\n    }\n}\nclass TransparencyData {\n    // Constructors\n    /**\n     * Initializes a new instance of the `TransparencyData` class.\n     * @private\n     */\n    constructor(alphaPen, alphaBrush, blendMode) {\n        this.alphaPen = alphaPen;\n        this.alphaBrush = alphaBrush;\n        this.blendMode = blendMode;\n    }\n}\n\n/**\n * The `PdfPageLayer` used to create layers in PDF document.\n * @private\n */\nclass PdfPageLayer {\n    constructor(page, streamClipPageTemplates) {\n        // private bSaved : boolean;\n        /**\n         * Local Variable to store the `color space` of the document.\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Local Variable to set `visibility`.\n         * @default true\n         * @private\n         */\n        this.isVisible = true;\n        /**\n         * Indicates if `Sublayer` is present.\n         * @default false\n         * @private\n         */\n        this.sublayer = false;\n        /**\n         * Local variable to store `length` of the graphics.\n         * @default 0\n         * @private\n         */\n        this.contentLength = 0;\n        /**\n         * Instance for `PdfDictionaryProperties` Class.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        if (typeof streamClipPageTemplates === 'undefined') {\n            this.pdfPage = page;\n            this.clipPageTemplates = true;\n            this.content = new PdfStream();\n        }\n        else if (streamClipPageTemplates instanceof PdfStream || streamClipPageTemplates === null) {\n            if (page == null) {\n                throw new Error('ArgumentNullException:page');\n            }\n            if (streamClipPageTemplates == null) {\n                throw new Error('ArgumentNullException:stream');\n            }\n            this.pdfPage = page;\n            this.content = streamClipPageTemplates;\n        }\n        else {\n            this.constructor(page);\n            this.clipPageTemplates = streamClipPageTemplates;\n        }\n    }\n    // Properties\n    /**\n     * Get or set the `color space`.\n     * @private\n     */\n    get colorSpace() {\n        return this.pdfColorSpace;\n    }\n    set colorSpace(value) {\n        this.pdfColorSpace = value;\n    }\n    /**\n     * Gets parent `page` of the layer.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    /**\n     * Gets and Sets the `id of the layer`.\n     * @private\n     */\n    get layerId() {\n        return this.layerid;\n    }\n    set layerId(value) {\n        this.layerid = value;\n    }\n    /**\n     * Gets or sets the `name` of the layer.\n     * @private\n     */\n    get name() {\n        return this.layerName;\n    }\n    set name(value) {\n        this.layerName = value;\n    }\n    /**\n     * Gets or sets the `visibility` of the layer.\n     * @private\n     */\n    get visible() {\n        return this.isVisible;\n    }\n    set visible(value) {\n        this.isVisible = value;\n    }\n    /**\n     * Gets `Graphics` context of the layer, used to draw various graphical content on layer.\n     * @private\n     */\n    get graphics() {\n        if ((this.pdfGraphics == null)) {\n            this.initializeGraphics(this.page);\n        }\n        return this.pdfGraphics;\n    }\n    /**\n     * Gets the collection of `PdfPageLayer`, this collection handle by the class 'PdfPageLayerCollection'.\n     * @private\n     */\n    get layers() {\n        if (this.layer == null) {\n            this.layer = new PdfPageLayerCollection(this.page);\n            this.layer.sublayer = true;\n            return this.layer;\n        }\n        else {\n            return this.layer;\n        }\n    }\n    // Implementation\n    /**\n     * `Adds` a new PDF Page layer.\n     * @private\n     */\n    add() {\n        let layer = new PdfPageLayer(this.pdfPage);\n        layer.name = '';\n        return layer;\n    }\n    /**\n     * Returns a value indicating the `sign` of a single-precision floating-point number.\n     * @private\n     */\n    sign(number) {\n        if (number === 0) {\n            return 0;\n        }\n        else if (number > 0) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n    /**\n     * `Initializes Graphics context` of the layer.\n     * @private\n     */\n    initializeGraphics(page) {\n        let oPage = page;\n        let gr = new GetResourceEventHandler(this.page);\n        this.pdfGraphics = new PdfGraphics(page.size, gr, this.content);\n        this.pdfGraphics.mediaBoxUpperRightBound = 0;\n        if (oPage != null) {\n            let sc = oPage.section.parent;\n            if (sc != null) {\n                this.pdfGraphics.colorSpace = sc.document.colorSpace;\n                this.colorSpace = sc.document.colorSpace;\n            }\n        }\n        // Transform coordinates to the left/top and activate margins.\n        let isSame = (this.sign(page.origin.y) === this.sign(page.origin.x));\n        // if (page != null) {\n        if (page.origin.x >= 0 && page.origin.y >= 0 || !(isSame)) {\n            this.pdfGraphics.initializeCoordinates();\n        }\n        else {\n            // this.m_graphics.InitializeCoordinates(page);\n        }\n        let clipRect = oPage.section.getActualBounds(oPage, true);\n        let margins = oPage.section.pageSettings.margins;\n        if (this.clipPageTemplates) {\n            if (page.origin.x >= 0 && page.origin.y >= 0) {\n                this.pdfGraphics.clipTranslateMargins(clipRect);\n            }\n        }\n        else {\n            this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);\n        }\n        this.pdfGraphics.setLayer(this);\n        // this.bSaved = false;\n    }\n    // IPdfWrapper Members\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get element() {\n        return this.content;\n    }\n}\n\n/**\n * PdfCollection.ts class for EJ2-PDF\n * The class used to handle the collection of PdF objects.\n */\nclass PdfCollection {\n    // Constructors\n    /**\n     * Initializes a new instance of the `Collection` class.\n     * @private\n     */\n    constructor() {\n        //\n    }\n    // Properties\n    /**\n     * Gets the `Count` of stored objects.\n     * @private\n     */\n    get count() {\n        if (typeof this.collection === 'undefined') {\n            this.collection = [];\n        }\n        return this.collection.length;\n    }\n    /**\n     * Gets the `list` of stored objects.\n     * @private\n     */\n    get list() {\n        if (typeof this.collection === 'undefined') {\n            this.collection = [];\n        }\n        return this.collection;\n    }\n}\n\n/**\n * PdfPageLayerCollection.ts class for EJ2-PDF\n */\n/**\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\n */\nclass PdfPageLayerCollection extends PdfCollection {\n    constructor(page) {\n        super();\n        /**\n         * Stores the `number of first level layers` in the document.\n         * @default 0\n         * @private\n         */\n        this.parentLayerCount = 0;\n        /**\n         * Indicates if `Sublayer` is present.\n         * @default false\n         * @private\n         */\n        this.sublayer = false;\n        /**\n         * Stores the `optional content dictionary`.\n         * @private\n         */\n        this.optionalContent = new PdfDictionary();\n        if (page instanceof PdfPageBase) {\n            // if (page == null) {\n            //     throw new Error('ArgumentNullException:page');\n            // }\n            this.page = page;\n            let lPage = page;\n            // if (lPage != null) {\n            this.parseLayers(lPage);\n            // }\n        }\n    }\n    items(index, value) {\n        if (typeof index === 'number' && typeof value === 'undefined') {\n            let obj = this.list[index];\n            return obj;\n        }\n        else {\n            if (value == null) {\n                throw new Error('ArgumentNullException: layer');\n            }\n            if (value.page !== this.page) {\n                throw new Error('ArgumentException: The layer belongs to another page');\n            }\n            // // Add/remove the layer.\n            // let layer : PdfPageLayer = this.items(index);\n            // if (layer != null) {\n            //     this.RemoveLayer(layer);\n            // }\n            // this.List[index] = value;\n            // this.InsertLayer(index, value);\n        }\n    }\n    add(firstArgument, secondArgument) {\n        if (typeof firstArgument === 'undefined') {\n            let layer = new PdfPageLayer(this.page);\n            layer.name = '';\n            this.add(layer);\n            return layer;\n        }\n        else if (firstArgument instanceof PdfPageLayer) {\n            // if (layer == null)\n            //     throw new ArgumentNullException(\"layer\");\n            // if (layer.Page != m_page)\n            //     throw new ArgumentException(\"The layer belongs to another page\");\n            let index = this.list.push(firstArgument);\n            // Register layer.\n            this.addLayer(index, firstArgument);\n            return index;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Registers `layer` at the page.\n     * @private\n     */\n    addLayer(index, layer) {\n        let reference = new PdfReferenceHolder(layer);\n        this.page.contents.add(reference);\n    }\n    // private RemoveLayer(layer : PdfPageLayer) : void {\n    //     if (layer == null) {\n    //         throw new Error('ArgumentNullException:layer');\n    //     }\n    //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\n    //     if (this.page != null) {\n    //         this.page.Contents.Remove(reference);\n    //     }\n    // }\n    /**\n     * Inserts `PdfPageLayer` into the collection at specified index.\n     * @private\n     */\n    insert(index, layer) {\n        // if (index < 0)\n        //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\n        // if (layer == null)\n        //     throw new ArgumentNullException(\"layer\");\n        // if (layer.Page != m_page)\n        //     throw new ArgumentException(\"The layer belongs to another page\");\n        let list = [];\n        let length = this.list.length;\n        for (let i = index; i < length; i++) {\n            list.push(this.list.pop());\n        }\n        this.list.push(layer);\n        for (let i = 0; i < list.length; i++) {\n            this.list.push(list[i]);\n        }\n        // Register layer.\n        this.insertLayer(index, layer);\n    }\n    /**\n     * Registers layer at the page.\n     * @private\n     */\n    insertLayer(index, layer) {\n        if (layer == null) {\n            throw new Error('ArgumentNullException:layer');\n        }\n        let reference = new PdfReferenceHolder(layer);\n        this.page.contents.insert(index, reference);\n    }\n    // tslint:disable\n    /**\n     * `Parses the layers`.\n     * @private\n     */\n    parseLayers(loadedPage) {\n        // if (loadedPage == null) {\n        //     throw new Error('ArgumentNullException:loadedPage');\n        // }\n        let contents = this.page.contents;\n        let resource = this.page.getResources();\n        let crossTable = null;\n        crossTable = loadedPage.crossTable;\n        // } else {\n        //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\n        //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\n        //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\n        //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\n        // }\n        let saveStream = new PdfStream();\n        let restoreStream = new PdfStream();\n        let saveState = 'q';\n        let restoreState = 'Q';\n        // for (let index : number = 0; index < contents.Items.length; index++) {\n        //     let obj : IPdfPrimitive = contents[index];\n        //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\n        //     if (stream == null)\n        //         throw new PdfDocumentException(\"Invalid contents array.\");\n        //     // if (stream.Compress)\n        //     {\n        //         if (!loadedPage.Imported)\n        //             stream.Decompress();\n        //     }\n        //     byte[] contentId = stream.Data;\n        //     string str = PdfString.ByteToString(contentId);\n        //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\n        //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\n        //     {\n        //         byte[] content = stream.Data;\n        //         byte[] data = new byte[content.Length + 4];\n        //         data[0] = SaveState;\n        //         data[1] = NewLine;\n        //         content.CopyTo(data, 2);\n        //         data[data.Length - 2] = NewLine;\n        //         data[data.Length - 1] = RestoreState;\n        //         stream.Data = data;\n        //     }\n        //     if (ocproperties != null)\n        //     {\n        //         if (Propertie != null)\n        //         {\n        //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\n        //             {\n        //                 String Key = prop.Key.ToString();\n        //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\n        //                 PdfDictionary Dict = null;\n        //                 if (refh != null)\n        //                 {\n        //                     Dict = refh.Object as PdfDictionary;\n        //                 }\n        //                 else\n        //                 {\n        //                     Dict = prop.Value as PdfDictionary;\n        //                 }\n        //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\n        //                 if (m_usage != null)\n        //                 {\n        //                     if (str.Contains(Key))\n        //                     {\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\n        //                         as PdfDictionary;\n        //                         if (printoption != null)\n        //                         {\n        //                             layer.m_printOption = printoption;\n        //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\n        //                             {\n        //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\n        //                                 {\n        //                                     string printState = (value.Value as PdfName).Value;\n        //                                     if (printState.Equals(DictionaryProperties.OCGON))\n        //                                     {\n        //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\n        //                                         break;\n        //                                     }\n        //                                     else\n        //                                     {\n        //                                         layer.PrintState = PdfPrintState.NeverPrint;\n        //                                         break;\n        //                                     }\n        //                                 }\n        //                             }\n        //                         }\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n        //                         layer.Name = layerName.Value;\n        //                         List.add(layer);\n        //                         isLayerAdded = true;\n        //                         if(!str.Contains(\"EMC\"))\n        //                         break;\n        //                     }\n        //                 }\n        //                 else\n        //                 {\n        //                     if (str.Contains(Key))\n        //                     {\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //                         List.add(layer);\n        //                         if(Dict.ContainsKey(DictionaryProperties.Name))\n        //                         {\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n        //                         layer.Name = layerName.Value;\n        //                         }\n        //                         isLayerAdded = true;\n        //                         break;\n        //                     }\n        //                 }\n        //             }\n        //         }\n        //     }\n        //     if (!isLayerAdded)\n        //     {\n        //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //         List.add(layer);\n        //     }\n        //     else\n        //         isLayerAdded = false;\n        // }\n        let saveData = [];\n        saveData.push(saveState);\n        saveStream.data = saveData;\n        contents.insert(0, new PdfReferenceHolder(saveStream));\n        saveData = [];\n        saveData.push(restoreState);\n        restoreStream.data = saveData;\n        contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\n    }\n    /**\n     * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\n     * @private\n     */\n    indexOf(layer) {\n        if (layer == null) {\n            throw new Error('ArgumentNullException: layer');\n        }\n        let index = this.list.indexOf(layer);\n        return index;\n    }\n}\n\n/**\n * PdfTemplate.ts class for EJ2-PDF\n */\n/**\n * Represents `Pdf Template` object.\n * @private\n */\nclass PdfTemplate {\n    constructor(arg1, arg2) {\n        /**\n         * Initialize an instance for `DictionaryProperties` class.\n         * @private\n         * @hidden\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the transformation 'is performed'.\n         * @default true\n         * @private\n         */\n        this.writeTransformation = true;\n        if (typeof arg1 === 'undefined') {\n            //\n        }\n        else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {\n            this.content = new PdfStream();\n            let tempSize = new SizeF(arg1.width, arg1.height);\n            this.setSize(tempSize);\n            this.initialize();\n        }\n        else {\n            this.content = new PdfStream();\n            this.setSize(new SizeF(arg1, arg2));\n            this.initialize();\n        }\n    }\n    //Properties\n    /**\n     * Gets the size of the 'PdfTemplate'.\n     */\n    get size() {\n        return this.templateSize;\n    }\n    /**\n     * Gets the width of the 'PdfTemplate'.\n     */\n    get width() {\n        return this.size.width;\n    }\n    /**\n     * Gets the height of the 'PdfTemplate'.\n     */\n    get height() {\n        return this.size.height;\n    }\n    /**\n     * Gets the `graphics` of the 'PdfTemplate'.\n     */\n    get graphics() {\n        if (this.pdfGraphics == null || typeof this.pdfGraphics === 'undefined') {\n            let gr = new GetResourceEventHandler(this);\n            let g = new PdfGraphics(this.size, gr, this.content);\n            this.pdfGraphics = g;\n            // if(this.writeTransformation) {\n            // Transform co-ordinates to Top/Left.\n            this.pdfGraphics.initializeCoordinates();\n            // }\n        }\n        return this.pdfGraphics;\n    }\n    /**\n     * Gets the resources and modifies the template dictionary.\n     * @private\n     */\n    getResources() {\n        if (this.resources == null) {\n            this.resources = new PdfResources();\n            this.content.items.setValue(this.dictionaryProperties.resources, this.resources);\n        }\n        return this.resources;\n    }\n    // Public methods\n    /**\n     * `Initialize` the type and subtype of the template.\n     * @private\n     */\n    initialize() {\n        this.addType();\n        this.addSubType();\n    }\n    /**\n     * `Adds type key`.\n     * @private\n     */\n    addType() {\n        let value = new PdfName(this.dictionaryProperties.xObject);\n        this.content.items.setValue(this.dictionaryProperties.type, value);\n    }\n    /**\n     * `Adds SubType key`.\n     * @private\n     */\n    addSubType() {\n        let value = new PdfName(this.dictionaryProperties.form);\n        this.content.items.setValue(this.dictionaryProperties.subtype, value);\n    }\n    reset(size) {\n        if (typeof size === 'undefined') {\n            if (this.resources != null) {\n                this.resources = null;\n                this.content.remove(this.dictionaryProperties.resources);\n            }\n            if (this.graphics != null) {\n                this.graphics.reset(this.size);\n            }\n        }\n        else {\n            this.setSize(size);\n            this.reset();\n        }\n    }\n    /**\n     * `Set the size` of the 'PdfTemplate'.\n     * @private\n     */\n    setSize(size) {\n        let rect = new RectangleF(new PointF(0, 0), size);\n        let val = PdfArray.fromRectangle(rect);\n        this.content.items.setValue(this.dictionaryProperties.bBox, val);\n        this.templateSize = size;\n    }\n    // /**\n    //  * Returns the value of current graphics.\n    //  * @private\n    //  */\n    // public GetGraphics(g : PdfGraphics) : PdfGraphics {\n    //     if (this.graphics == null || typeof this.graphics === 'undefined') {\n    //         this.graphics = g;\n    //         this.graphics.Size = this.Size;\n    //         this.graphics.StreamWriter = new PdfStreamWriter(this.content)\n    //         this.graphics.Initialize();\n    //         if(this.writeTransformation) {\n    //             this.graphics.InitializeCoordinates();\n    //         }\n    //     }\n    //     return this.graphics;\n    // }\n    // IPdfWrapper Members\n    /**\n     * Gets the `content stream` of 'PdfTemplate' class.\n     * @private\n     */\n    get element() {\n        return this.content;\n    }\n}\n\n/**\n * ByteArray class\n * Used to keep information about image stream as byte array.\n * @private\n */\nclass ByteArray {\n    /**\n     * Initialize the new instance for `byte-array` class\n     * @hidden\n     * @private\n     */\n    constructor(length) {\n        /**\n         * Current stream `position`.\n         * @default 0\n         * @private\n         */\n        this.mPosition = 0;\n        this.buffer = new Uint8Array(length);\n        this.dataView = new DataView(this.buffer.buffer);\n    }\n    /**\n     * Gets and Sets a current `position` of byte array.\n     * @hidden\n     * @private\n     */\n    get position() {\n        return this.mPosition;\n    }\n    set position(value) {\n        this.mPosition = value;\n    }\n    /**\n     * `Read` from current stream position.\n     * @default 0\n     * @hidden\n     * @private\n     */\n    read(buffer, offset, count) {\n        for (let index = offset; index < count; index++) {\n            let position = this.position;\n            buffer.buffer[index] = this.readByte(position);\n            this.position++;\n        }\n    }\n    /**\n     * @hidden\n     */\n    getBuffer(index) {\n        return this.buffer[index];\n    }\n    /**\n     * @hidden\n     */\n    writeFromBase64String(base64) {\n        let arr = this.encodedString(base64);\n        this.buffer = arr;\n    }\n    /**\n     * @hidden\n     */\n    encodedString(input) {\n        let keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        let resultIndex = 0;\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n        let totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\n            totalLength--;\n        }\n        let output = new Uint8Array(totalLength | 0);\n        while (i < input.length) {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output[resultIndex++] = chr1;\n            output[resultIndex++] = chr2;\n            output[resultIndex++] = chr3;\n        }\n        return output;\n    }\n    /**\n     * @hidden\n     */\n    readByte(offset) {\n        return (this.buffer[offset]);\n    }\n    /**\n     * @hidden\n     */\n    get internalBuffer() {\n        return this.buffer;\n    }\n    /**\n     * @hidden\n     */\n    get count() {\n        return this.buffer.byteLength;\n    }\n}\n\n/**\n * `PdfBoolean` class is used to perform boolean related primitive operations.\n * @private\n */\nclass PdfBoolean {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfBoolean` class.\n     * @private\n     */\n    constructor(value) {\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.currentPosition = -1;\n        this.value = value;\n    }\n    //Properties\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get status() {\n        return this.objectStatus;\n    }\n    set status(value) {\n        this.objectStatus = value;\n    }\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get isSaving() {\n        return this.saving;\n    }\n    set isSaving(value) {\n        this.saving = value;\n    }\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get objectCollectionIndex() {\n        return this.index;\n    }\n    set objectCollectionIndex(value) {\n        this.index = value;\n    }\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get position() {\n        return this.currentPosition;\n    }\n    set position(value) {\n        this.currentPosition = value;\n    }\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get clonedObject() {\n        let rValue = null;\n        return rValue;\n    }\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    save(writer) {\n        writer.write(this.boolToStr(this.value));\n    }\n    /**\n     * Creates a `copy of PdfBoolean`.\n     * @private\n     */\n    clone(crossTable) {\n        let newNumber = new PdfBoolean(this.value);\n        return newNumber;\n    }\n    // Implementation\n    /**\n     * Converts `boolean to string` - 0/1 'true'/'false'.\n     * @private\n     */\n    boolToStr(value) {\n        return value ? 'true' : 'false';\n    }\n}\n\n/**\n * ImageDecoder class\n */\n/**\n * Specifies the image `format`.\n * @private\n */\nvar ImageFormat;\n(function (ImageFormat) {\n    /**\n     * Specifies the type of `Unknown`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Specifies the type of `Bmp`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Bmp\"] = 1] = \"Bmp\";\n    /**\n     * Specifies the type of `Emf`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Emf\"] = 2] = \"Emf\";\n    /**\n     * Specifies the type of `Gif`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Gif\"] = 3] = \"Gif\";\n    /**\n     * Specifies the type of `Jpeg`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Jpeg\"] = 4] = \"Jpeg\";\n    /**\n     * Specifies the type of `Png`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Png\"] = 5] = \"Png\";\n    /**\n     * Specifies the type of `Wmf`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Wmf\"] = 6] = \"Wmf\";\n    /**\n     * Specifies the type of `Icon`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Icon\"] = 7] = \"Icon\";\n})(ImageFormat || (ImageFormat = {}));\n/**\n * `Decode the image stream`.\n * @private\n */\nclass ImageDecoder {\n    /**\n     * Initialize the new instance for `image-decoder` class.\n     * @private\n     */\n    constructor(stream) {\n        /**\n         * Specifies `format` of image.\n         * @hidden\n         * @private\n         */\n        this.mFormat = ImageFormat.Unknown;\n        /**\n         * `Bits per component`.\n         * @default 8\n         * @hidden\n         * @private\n         */\n        this.mbitsPerComponent = 8;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.mStream = stream;\n        this.initialize();\n    }\n    /**\n     * Gets the `height` of image.\n     * @hidden\n     * @private\n     */\n    get height() {\n        return this.mHeight;\n    }\n    /**\n     * Gets the `width` of image.\n     * @hidden\n     * @private\n     */\n    get width() {\n        return this.mWidth;\n    }\n    /**\n     * Gets `bits per component`.\n     * @hidden\n     * @private\n     */\n    get bitsPerComponent() {\n        return this.mbitsPerComponent;\n    }\n    /**\n     * Gets the `size` of an image data.\n     * @hidden\n     * @private\n     */\n    get size() {\n        return this.mImageData.count;\n    }\n    /**\n     * Gets the value of an `image data`.\n     * @hidden\n     * @private\n     */\n    get imageData() {\n        return this.mImageData;\n    }\n    /**\n     * Gets the value of an `image data as number array`.\n     * @hidden\n     * @private\n     */\n    get imageDataAsNumberArray() {\n        return this.mImageData.internalBuffer.buffer;\n    }\n    /**\n     * `Initialize` image data and image stream.\n     * @hidden\n     * @private\n     */\n    initialize() {\n        if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {\n            this.mFormat = ImageFormat.Jpeg;\n            this.parseJpegImage();\n        }\n        this.reset();\n        this.mImageData = new ByteArray(this.mStream.count);\n        this.mStream.read(this.mImageData, 0, this.mImageData.count);\n    }\n    /**\n     * `Reset` stream position into 0.\n     * @hidden\n     * @private\n     */\n    reset() {\n        this.mStream.position = 0;\n    }\n    /**\n     * `Parse` Jpeg image.\n     * @hidden\n     * @private\n     */\n    parseJpegImage() {\n        this.reset();\n        let imgData = new ByteArray(this.mStream.count);\n        this.mStream.read(imgData, 0, imgData.count);\n        let i = 4;\n        /* tslint:disable */\n        if (String.fromCharCode(imgData.getBuffer(i + 2)) === 'J' && String.fromCharCode(imgData.getBuffer(i + 3)) === 'F' && String.fromCharCode(imgData.getBuffer(i + 4)) === 'I' && String.fromCharCode(imgData.getBuffer(i + 5)) === 'F' && imgData.getBuffer(i + 6) === 0) {\n            let length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n            while (i + length < imgData.count) {\n                i += length;\n                if (imgData.getBuffer(i + 1) === 192) {\n                    this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);\n                    this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);\n                    return;\n                }\n                else {\n                    i += 2;\n                    length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n                }\n            }\n        }\n        /* tslint:enable */\n    }\n    /**\n     * Gets the image `format`.\n     * @private\n     * @hidden\n     */\n    get format() {\n        return this.mFormat;\n    }\n    /**\n     * `Checks if JPG`.\n     * @private\n     * @hidden\n     */\n    checkIfJpeg() {\n        this.reset();\n        for (let i = 0; i < ImageDecoder.mJpegHeader.length; i++) {\n            if (ImageDecoder.mJpegHeader[i] !== this.mStream.readByte(i)) {\n                return false;\n            }\n            this.mStream.position++;\n        }\n        return true;\n    }\n    /**\n     * Return image `dictionary`.\n     * @hidden\n     * @private\n     */\n    getImageDictionary() {\n        if (this.mFormat === ImageFormat.Jpeg) {\n            let tempArrayBuffer = this.imageData.internalBuffer.length;\n            this.imageStream = new PdfStream();\n            this.imageStream.isImage = true;\n            let tempString = '';\n            let decodedString = '';\n            for (let i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {\n                tempString += String.fromCharCode(null, this.mStream.readByte(i));\n            }\n            for (let i = 0; i < tempString.length; i++) {\n                if (i % 2 !== 0) {\n                    decodedString += tempString[i];\n                }\n            }\n            this.imageStream.data = [decodedString];\n            this.imageStream.compress = false;\n            this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject));\n            this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image));\n            this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width));\n            this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height));\n            this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n            this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode));\n            this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace()));\n            this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());\n            return this.imageStream;\n        }\n        else {\n            return this.imageStream;\n        }\n    }\n    /**\n     * Return `colorSpace` of an image.\n     * @hidden\n     * @private\n     */\n    getColorSpace() {\n        return this.dictionaryProperties.deviceRgb;\n    }\n    /**\n     * Return `decode parameters` of an image.\n     * @hidden\n     * @private\n     */\n    getDecodeParams() {\n        let decodeParams = new PdfDictionary();\n        decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width));\n        decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(true));\n        decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1));\n        decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15));\n        decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n        return decodeParams;\n    }\n}\n/**\n * Number array for `png header`.\n * @hidden\n * @private\n */\nImageDecoder.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];\n/**\n * Number Array for `jpeg header`.\n * @hidden\n * @private\n */\nImageDecoder.mJpegHeader = [255, 216];\n/**\n * Number array for `gif header`.\n * @hidden\n * @private\n */\nImageDecoder.GIF_HEADER = 'G,I,F,8';\n/**\n * Number array for `bmp header.`\n * @hidden\n * @private\n */\nImageDecoder.BMP_HEADER = 'B,M';\n\n/**\n * Used to perform `convertion between pixels and points`.\n * @private\n */\nclass PdfUnitConverter {\n    //constructors\n    /**\n     * Initializes a new instance of the `UnitConvertor` class with DPI value.\n     * @private\n     */\n    constructor(dpi) {\n        this.updateProportionsHelper(dpi);\n    }\n    /**\n     * `Converts` the value, from one graphics unit to another graphics unit.\n     * @private\n     */\n    convertUnits(value, from, to) {\n        return this.convertFromPixels(this.convertToPixels(value, from), to);\n    }\n    /**\n     * Converts the value `to pixel` from specified graphics unit.\n     * @private\n     */\n    convertToPixels(value, from) {\n        let index = from;\n        let result = (value * this.proportions[index]);\n        return result;\n    }\n    /**\n     * Converts value, to specified graphics unit `from Pixel`.\n     * @private\n     */\n    convertFromPixels(value, to) {\n        let index = to;\n        let result = (value / this.proportions[index]);\n        return result;\n    }\n    /**\n     * `Update proportions` matrix according to Graphics settings.\n     * @private\n     */\n    updateProportionsHelper(pixelPerInch) {\n        this.proportions = [\n            pixelPerInch / 2.54,\n            pixelPerInch / 6.0,\n            1,\n            pixelPerInch / 72.0,\n            pixelPerInch,\n            pixelPerInch / 300.0,\n            pixelPerInch / 25.4 // Millimeter\n        ];\n    }\n}\n//Fields\n/**\n * Indicates default `horizontal resolution`.\n * @default 96\n * @private\n */\nPdfUnitConverter.horizontalResolution = 96;\n/**\n * Indicates default `vertical resolution`.\n * @default 96\n * @private\n */\nPdfUnitConverter.verticalResolution = 96;\n\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\nclass PdfImage {\n    /**\n     * Gets and Sets the `width` of an image.\n     * @private\n     */\n    get width() {\n        return this.imageWidth;\n    }\n    set width(value) {\n        this.imageWidth = value;\n    }\n    /**\n     * Gets and Sets the `height` of an image.\n     * @private\n     */\n    get height() {\n        return this.imageHeight;\n    }\n    set height(value) {\n        this.imageHeight = value;\n    }\n    /**\n     * Gets or sets the size of the image.\n     * @private\n     */\n    set size(value) {\n        this.width = value.width;\n        this.height = value.height;\n    }\n    /**\n     * Gets the `physical dimension` of an image.\n     * @private\n     */\n    get physicalDimension() {\n        this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n        return new SizeF(this.width, this.height);\n    }\n    // /**\n    //  * Gets the `image stream as string`.\n    //  * @private\n    //  */\n    // public static fromString(string : string) : PdfImage {\n    //     let image : PdfImage = new PdfBitmap(string);\n    //     return image;\n    // }\n    /**\n     * Gets the `element` image stream.\n     * @private\n     */\n    get element() {\n        return this.imageStream;\n    }\n    getPointSize(width, height, horizontalResolution, verticalResolution) {\n        if (typeof horizontalResolution === 'undefined') {\n            let dpiX = PdfUnitConverter.horizontalResolution;\n            let dpiY = PdfUnitConverter.verticalResolution;\n            let size = this.getPointSize(width, height, dpiX, dpiY);\n            return size;\n        }\n        else {\n            let ucX = new PdfUnitConverter(horizontalResolution);\n            let ucY = new PdfUnitConverter(verticalResolution);\n            let ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            let ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            let size = new SizeF(ptWidth, ptHeight);\n            return size;\n        }\n    }\n}\n\n/**\n * PdfBitmap.ts class for EJ2-PDF\n */\n/**\n * The 'PdfBitmap' contains methods and properties to handle the Bitmap images.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // base64 string of an image\n * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n * // load the image from the base64 string of original image.\n * let image : PdfBitmap = new PdfBitmap(imageString);\n * // draw the image\n * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfBitmap extends PdfImage {\n    /**\n     * Create an instance for `PdfBitmap` class.\n     * @param encodedString Base64 string of an image.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // base64 string of an image\n     * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n     * //\n     * // load the image from the base64 string of original image.\n     * let image : PdfBitmap = new PdfBitmap(imageString);\n     * //\n     * // draw the image\n     * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    constructor(encodedString) {\n        super();\n        //Fields\n        /**\n         * Specifies the `status` of an image.\n         * @default true.\n         * @hidden\n         * @private\n         */\n        this.imageStatus = true;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.loadImage(encodedString);\n    }\n    /**\n     * `Load image`.\n     * @hidden\n     * @private\n     */\n    loadImage(encodedString) {\n        let task = this.initializeAsync(encodedString);\n    }\n    /**\n     * `Initialize` image parameters.\n     * @private\n     */\n    initializeAsync(encodedString) {\n        let byteArray = new ByteArray(encodedString.length);\n        byteArray.writeFromBase64String(encodedString);\n        this.decoder = new ImageDecoder(byteArray);\n        this.height = this.decoder.height;\n        this.width = this.decoder.width;\n        // FrameCount = BitmapImageDecoder.FrameCount;\n        this.bitsPerComponent = this.decoder.bitsPerComponent;\n    }\n    /**\n     * `Saves` the image into stream.\n     * @private\n     */\n    save() {\n        this.imageStatus = true;\n        this.imageStream = this.decoder.getImageDictionary();\n    }\n}\n\n/**\n * PdfResources.ts class for EJ2-PDF\n */\n/**\n * `PdfResources` class used to set resource contents like font, image.\n * @private\n */\nclass PdfResources extends PdfDictionary {\n    constructor(baseDictionary) {\n        super();\n        /**\n         * Dictionary for the `properties names`.\n         * @private\n         */\n        this.properties = new PdfDictionary();\n        if (baseDictionary instanceof PdfDictionary) {\n            super(baseDictionary);\n        }\n    }\n    //Properties\n    /**\n     * Gets the `font names`.\n     * @private\n     */\n    get names() {\n        return this.getNames();\n    }\n    /**\n     * Get or set the `page document`.\n     * @private\n     */\n    get document() {\n        return this.pdfDocument;\n    }\n    set document(value) {\n        this.pdfDocument = value;\n    }\n    //Public Methods\n    /**\n     * `Generates name` for the object and adds to the resource if the object is new.\n     * @private\n     */\n    getName(obj) {\n        let primitive = obj.element;\n        let name = null;\n        if (this.names.containsKey(primitive)) {\n            name = this.names.getValue(primitive);\n        }\n        // Object is new.\n        if (name == null) {\n            let sName = this.generateName();\n            name = new PdfName(sName);\n            this.names.setValue(primitive, name);\n            if (obj instanceof PdfFont) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfTemplate) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfTransparency) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfImage || obj instanceof PdfBitmap) {\n                this.add(obj, name);\n            }\n        }\n        return name;\n    }\n    /**\n     * Gets `resource names` to font dictionaries.\n     * @private\n     */\n    getNames() {\n        if (this.pdfNames == null) {\n            this.pdfNames = new TemporaryDictionary();\n        }\n        let fonts = this.items.getValue(this.dictionaryProperties.font);\n        if (fonts != null) {\n            let dictionary = fonts;\n            dictionary = PdfCrossTable.dereference(fonts);\n        }\n        return this.pdfNames;\n    }\n    /**\n     * Add `RequireProcedureSet` into procset array.\n     * @private\n     */\n    requireProcedureSet(procedureSetName) {\n        if (procedureSetName == null) {\n            throw new Error('ArgumentNullException:procedureSetName');\n        }\n        let procSets = this.items.getValue(this.dictionaryProperties.procset);\n        if (procSets == null) {\n            procSets = new PdfArray();\n            this.items.setValue(this.dictionaryProperties.procset, procSets);\n        }\n        let name = new PdfName(procedureSetName);\n        if (!procSets.contains(name)) {\n            procSets.add(name);\n        }\n    }\n    //Helper Methods\n    /**\n     * `Remove font` from array.\n     * @private\n     */\n    removeFont(name) {\n        let key = null;\n        let keys = this.pdfNames.keys();\n        for (let index = 0; index < this.pdfNames.size(); index++) {\n            if (this.pdfNames.getValue(keys[index]) === new PdfName(name)) {\n                key = keys[index];\n                break;\n            }\n        }\n        if (key != null) {\n            this.pdfNames.remove(key);\n        }\n    }\n    /**\n     * Generates `Unique string name`.\n     * @private\n     */\n    generateName() {\n        let name = Guid.getNewGuidString();\n        return name;\n    }\n    add(arg1, arg2) {\n        if (arg1 instanceof PdfFont) {\n            let dictionary = null;\n            let fonts = this.items.getValue(this.dictionaryProperties.font);\n            if (fonts != null) {\n                dictionary = fonts;\n                dictionary = fonts;\n            }\n            else {\n                dictionary = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.font, dictionary);\n            }\n            dictionary.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));\n        }\n        else if (arg1 instanceof PdfTemplate) {\n            let xobjects;\n            xobjects = this.items.getValue(this.dictionaryProperties.xObject);\n            // Create fonts dictionary.\n            if (xobjects == null) {\n                xobjects = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.xObject, xobjects);\n            }\n            xobjects.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));\n        }\n        else if (arg1 instanceof PdfBrush) {\n            // let savable : IPdfPrimitive = (arg1 as IPdfWrapper).Element;\n            // if (savable != null)\n            // {\n            //     let pattern : PdfDictionary = this.Items.getValue(this.dictionaryProperties.pattern) as PdfDictionary;\n            //     // Create a new pattern dictionary.\n            //     if (pattern == null) {\n            //         pattern = new PdfDictionary();\n            //         this.Items.setValue(this.dictionaryProperties.pattern, pattern);\n            //     }\n            //     pattern.Items.setValue(name, new PdfReferenceHolder(savable));\n            // }\n        }\n        else if (arg1 instanceof PdfTransparency) {\n            let savable = arg1.element;\n            let transDic = null;\n            transDic = this.items.getValue(this.dictionaryProperties.extGState);\n            // Create a new pattern dictionary.\n            if (transDic == null) {\n                transDic = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.extGState, transDic);\n            }\n            transDic.items.setValue(arg2.value, new PdfReferenceHolder(savable));\n        }\n        else {\n            /* tslint:disable */\n            let xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);\n            let parentXObjects;\n            if (typeof this.pdfDocument !== 'undefined') {\n                parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject);\n            }\n            let values = this.Dictionary.items.values();\n            let hasSameImageStream = false;\n            let oldReference;\n            if (typeof this.pdfDocument !== 'undefined' && (typeof parentXObjects === undefined || parentXObjects == null)) {\n                parentXObjects = new PdfDictionary();\n                this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);\n            }\n            else if (typeof this.pdfDocument !== 'undefined') {\n                let values = parentXObjects.items.values();\n                for (let i = 0; i < values.length; i++) {\n                    if (typeof values[i] !== 'undefined' && typeof values[i].element !== 'undefined') {\n                        if (values[i].element.data[0] === arg1.element.data[0]) {\n                            oldReference = values[i];\n                            hasSameImageStream = true;\n                        }\n                    }\n                }\n            }\n            if (xobjects == null) {\n                xobjects = new PdfDictionary();\n                this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects);\n            }\n            if (hasSameImageStream && typeof oldReference !== 'undefined') {\n                xobjects.items.setValue(arg2.value, oldReference);\n            }\n            else {\n                let reference = new PdfReferenceHolder(arg1.element);\n                xobjects.items.setValue(arg2.value, reference);\n                if (typeof this.pdfDocument !== 'undefined') {\n                    parentXObjects.items.setValue(arg2.value, reference);\n                }\n            }\n            /* tslint:enable */\n        }\n    }\n}\n/**\n * Used to create new guid for resources.\n * @private\n */\nclass Guid {\n    /**\n     * Initialize an `instance of GUID` class.\n     * @private\n     */\n    constructor(stringValue) {\n        this.stringValue = stringValue || Guid.getNewGuidString();\n    }\n    /**\n     * Generate `Random number` for GUID.\n     * @private\n     */\n    static get randomNumber() {\n        Guid.guid = Guid.guid + 1;\n        Guid.guid = Guid.guid > 999999999999 ? 0 : Guid.guid;\n        return Guid.guid;\n    }\n    /**\n     * Return the value of `GUID as string`.\n     * @private\n     */\n    toString() {\n        return this.stringValue;\n    }\n    /**\n     * Generate `new GUID`.\n     * @private\n     */\n    static getNewGuidString() {\n        let guid = 'abc7def4-ghi9-jkl2-m6n3-';\n        let temproaryString = 'opqrstuvwxyz';\n        let randomString = Guid.randomNumber.toString();\n        randomString = guid + temproaryString.substr(0, (12 - randomString.length)) + randomString;\n        return randomString;\n    }\n}\n/**\n * static field to store `endding value of current GUID`.\n * @private\n */\nGuid.guid = 0;\n\n/**\n * The abstract base class for all pages,\n * `PdfPageBase` class provides methods and properties to create PDF pages and its elements.\n * @private\n */\nclass PdfPageBase {\n    //constructors\n    /**\n     * Initializes a new instance of the `PdfPageBase` class.\n     * @private\n     */\n    constructor(dictionary) {\n        /**\n         * `Index` of the default layer.\n         * @default -1.\n         * @private\n         */\n        this.defLayerIndex = -1;\n        /**\n         * Local variable to store if page `updated`.\n         * @default false.\n         * @private\n         */\n        this.modified = false;\n        /**\n         * Instance of `DictionaryProperties` class.\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.pageDictionary = dictionary;\n    }\n    //Properties\n    /**\n     * Gets the `section` of a page.\n     * @private\n     */\n    get section() {\n        // if (this.pdfSection === null) {\n        //     throw new Error('PdfException : Page must be added to some section before using.');\n        // }\n        return this.pdfSection;\n    }\n    set section(value) {\n        this.pdfSection = value;\n    }\n    /**\n     * Gets the page `dictionary`.\n     * @private\n     */\n    get dictionary() {\n        return this.pageDictionary;\n    }\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get element() {\n        return this.pageDictionary;\n    }\n    /**\n     * Gets the `default layer` of the page (Read only).\n     * @private\n     */\n    get defaultLayer() {\n        let layer = this.layers;\n        let index = this.defaultLayerIndex;\n        let returnlayer = layer.items(index);\n        return returnlayer;\n    }\n    /**\n     * Gets or sets `index of the default layer`.\n     * @private\n     */\n    get defaultLayerIndex() {\n        if (this.layerCollection.count === 0 || this.defLayerIndex === -1) {\n            let layer = this.layerCollection.add();\n            this.defLayerIndex = this.layerCollection.indexOf(layer);\n        }\n        return this.defLayerIndex;\n    }\n    /**\n     * Gets the collection of the page's `layers` (Read only).\n     * @private\n     */\n    get layers() {\n        if (this.layerCollection == null || typeof this.layerCollection === 'undefined') {\n            this.layerCollection = new PdfPageLayerCollection(this);\n        }\n        return this.layerCollection;\n    }\n    /**\n     * Return an instance of `PdfResources` class.\n     * @private\n     */\n    getResources() {\n        if (this.resources == null) {\n            this.resources = new PdfResources();\n            this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);\n        }\n        return this.resources;\n    }\n    /**\n     * Gets `array of page's content`.\n     * @private\n     */\n    get contents() {\n        let obj = this.pageDictionary.items.getValue(this.dictionaryProperties.contents);\n        let contents = obj;\n        if (contents == null) {\n            contents = new PdfArray();\n            this.pageDictionary.items.setValue(this.dictionaryProperties.contents, contents);\n        }\n        return contents;\n    }\n    /**\n     * Gets or sets` index of the default layer`.\n     * @private\n     */\n    set defaultLayerIndex(value) {\n        if (value < 0 || value > this.layers.count - 1) {\n            throw new Error('ArgumentOutOfRangeException : value, Index can not be less 0 and greater Layers.Count - 1');\n        }\n        else {\n            this.defLayerIndex = value;\n            this.modified = true;\n        }\n    }\n    /**\n     * Sets the `resources`.\n     * @private\n     */\n    setResources(res) {\n        this.resources = res;\n        this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);\n        this.modified = true;\n    }\n}\n\n/**\n * `PdfAnnotationCollection` class represents the collection of 'PdfAnnotation' objects.\n * @private\n */\nclass PdfAnnotationCollection {\n    constructor(page) {\n        // Constants\n        /**\n         * `Error` constant message.\n         * @private\n         */\n        this.alreadyExistsAnnotationError = 'This annotatation had been already added to page';\n        /**\n         * `Error` constant message.\n         * @private\n         */\n        this.missingAnnotationException = 'Annotation is not contained in collection.';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Array of the `annotations`.\n         * @private\n         */\n        this.internalAnnotations = new PdfArray();\n        /**\n         * privte `list` for the annotations.\n         * @private\n         */\n        this.lists = [];\n        if (typeof page !== 'undefined') {\n            this.page = page;\n        }\n    }\n    /**\n     * Gets the `PdfAnnotation` object at the specified index. Read-Only.\n     * @private\n     */\n    get annotations() {\n        return this.internalAnnotations;\n    }\n    set annotations(value) {\n        this.internalAnnotations = value;\n    }\n    // Public methods\n    /**\n     * `Adds` a new annotation to the collection.\n     * @private\n     */\n    add(annotation) {\n        // this.SetPrint(annotation);\n        this.doAdd(annotation);\n    }\n    /**\n     * `Adds` a Annotation to collection.\n     * @private\n     */\n    /* tslint:disable */\n    doAdd(annotation) {\n        if (typeof annotation.destination !== 'undefined') {\n            let layout = new PdfStringLayouter();\n            let layoutResult = layout.layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF((annotation.bounds.width), 0), false, new SizeF(0, 0));\n            let lastPosition = annotation.bounds.y;\n            if (layoutResult.lines.length === 1) {\n                let size = annotation.font.measureString(layoutResult.lines[0].text);\n                annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n                annotation.text = layoutResult.lines[0].text;\n                //Draw Annotation Text.\n                this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null);\n                //Add annotation to dictionary.\n                annotation.setPage(this.page);\n                this.setColor(annotation);\n                this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n                this.lists.push(annotation);\n            }\n            else {\n                for (let i = 0; i < layoutResult.lines.length; i++) {\n                    let size = annotation.font.measureString(layoutResult.lines[i].text);\n                    if (i === 0) {\n                        annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height);\n                        annotation.text = layoutResult.lines[i].text;\n                        //Draw Annotation Text.\n                        this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null);\n                        //Add annotation to dictionary.\n                        annotation.setPage(this.page);\n                        this.setColor(annotation);\n                        this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n                        this.lists.push(annotation);\n                        //Update y for drawing next line of the text.\n                        lastPosition += annotation.bounds.height;\n                    }\n                    else {\n                        let annot = annotation.clone();\n                        annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n                        annot.text = layoutResult.lines[i].text;\n                        //Draw Annotation Text.\n                        this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null);\n                        //Add annotation to dictionary.\n                        annot.setPage(this.page);\n                        this.setColor(annot);\n                        this.internalAnnotations.add(new PdfReferenceHolder(annot));\n                        this.lists.push(annot);\n                        //Update y for drawing next line of the text.\n                        lastPosition += annot.bounds.height;\n                    }\n                }\n            }\n        }\n        else {\n            annotation.setPage(this.page);\n            this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n            return this.lists.push(annotation);\n        }\n    }\n    /* tslint:enable */\n    /**\n     * `Set a color of an annotation`.\n     * @private\n     */\n    setColor(annotation) {\n        let cs = PdfColorSpace.Rgb;\n        let colours = annotation.color.toArray(cs);\n        annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);\n    }\n    // IPdfWrapper Members\n    /**\n     * Gets the `Element` representing this object.\n     * @private\n     */\n    get element() {\n        return this.internalAnnotations;\n    }\n}\n\n/**\n * Provides methods and properties to create pages and its elements.\n * `PdfPage` class inherited from the `PdfPageBase` class.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * //\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfPage extends PdfPageBase {\n    //constructors\n    /**\n     * Initialize the new instance for `PdfPage` class.\n     * @private\n     */\n    constructor() {\n        super(new PdfDictionary());\n        /**\n         * Stores the instance of `PdfAnnotationCollection` class.\n         * @hidden\n         * @default null\n         * @private\n         */\n        this.annotationCollection = null;\n        /**\n         * Stores the instance of `PageBeginSave` event for Page Number Field.\n         * @default null\n         * @private\n         */\n        this.beginSave = null;\n        this.initialize();\n    }\n    //Properties\n    /**\n     * Gets current `document`.\n     * @private\n     */\n    get document() {\n        if (this.section !== null && this.section.parent !== null) {\n            return this.section.parent.document;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Get the current `graphics`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a new page to the document\n     * let page1 : PdfPage = document.pages.add();\n     * //\n     * // get graphics\n     * let graphics : PdfGraphics = page1.graphics;\n     * //\n     * // set the font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // create black brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get graphics() {\n        let result = this.defaultLayer.graphics;\n        result.currentPage = this;\n        return result;\n    }\n    /**\n     * Gets the `cross table`.\n     * @private\n     */\n    get crossTable() {\n        if (this.section === null) {\n            throw new Error('PdfDocumentException : Page is not created');\n        }\n        return this.section.parent === null ? this.section.parentDocument.crossTable : this.section.parent.document.crossTable;\n    }\n    /**\n     * Gets the size of the PDF page- Read only.\n     * @public\n     */\n    get size() {\n        return this.section.pageSettings.size;\n    }\n    /**\n     * Gets the `origin` of the page.\n     * @private\n     */\n    get origin() {\n        return this.section.pageSettings.origin;\n    }\n    /**\n     * Gets a collection of the `annotations` of the page- Read only.\n     * @private\n     */\n    get annotations() {\n        if (this.annotationCollection == null) {\n            this.annotationCollection = new PdfAnnotationCollection(this);\n            // if (!this.Dictionary.ContainsKey(this.dictionaryProperties.annots)) {\n            this.dictionary.items.setValue(this.dictionaryProperties.annots, this.annotationCollection.element);\n            // }\n            this.annotationCollection.annotations = this.dictionary.items.getValue(this.dictionaryProperties.annots);\n        }\n        return this.annotationCollection;\n    }\n    //Implementation\n    /**\n     * `Initializes` a page.\n     * @private\n     */\n    initialize() {\n        this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName('Page'));\n        this.dictionary.pageBeginDrawTemplate = new SaveTemplateEventHandler(this);\n    }\n    /**\n     * Sets parent `section` to the page.\n     * @private\n     */\n    setSection(section) {\n        this.section = section;\n        this.dictionary.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(section));\n    }\n    /**\n     * `Resets the progress`.\n     * @private\n     */\n    resetProgress() {\n        this.isProgressOn = false;\n    }\n    /**\n     * Get the page size reduced by page margins and page template dimensions.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // create new standard font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the specified point using `getClientSize` method\n     * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, point);\n     * //\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    getClientSize() {\n        let returnValue = this.section.getActualBounds(this, true);\n        return new SizeF(returnValue.width, returnValue.height);\n    }\n    /**\n     * Helper method to retrive the instance of `PageBeginSave` event for header and footer elements.\n     * @private\n     */\n    pageBeginSave() {\n        let doc = this.document;\n        if (typeof doc !== undefined && doc != null) {\n            this.drawPageTemplates(doc);\n        }\n        if (this.beginSave != null && typeof this.beginSave !== 'undefined') {\n            this.beginSave(this);\n        }\n    }\n    /**\n     * Helper method to draw template elements.\n     * @private\n     */\n    drawPageTemplates(document) {\n        // Draw Background templates.\n        let hasBackTemplates = this.section.containsTemplates(document, this, false);\n        if (hasBackTemplates) {\n            let backLayer = new PdfPageLayer(this, false);\n            this.layers.insert(0, backLayer);\n            this.section.drawTemplates(this, backLayer, document, false);\n            if (backLayer.graphics !== null && typeof backLayer.graphics !== 'undefined') {\n                for (let i = 0; i < backLayer.graphics.automaticFields.automaticFields.length; i++) {\n                    let fieldInfo = backLayer.graphics.automaticFields.automaticFields[i];\n                    fieldInfo.field.performDraw(backLayer.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n                }\n            }\n        }\n        // Draw Foreground templates.\n        let hasFrontTemplates = this.section.containsTemplates(document, this, true);\n        if (hasFrontTemplates) {\n            let frontLayer = new PdfPageLayer(this, false);\n            this.layers.add(frontLayer);\n            this.section.drawTemplates(this, frontLayer, document, true);\n        }\n    }\n}\n\n/**\n * Provides data for `PageAddedEventHandler` event.\n * This event raises when adding the new PDF page to the PDF document.\n */\nclass PageAddedEventArgs {\n    /**\n     * Gets the `newly added page`.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    constructor(page) {\n        if (typeof page !== 'undefined') {\n            this.pdfPage = page;\n        }\n        else {\n            this.pdfPage = null;\n        }\n    }\n}\n\n/**\n * Represents the `collection of pages in a section`.\n * @private\n */\nclass PdfSectionPageCollection {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfSectionPageCollection` class.\n     * @private\n     */\n    constructor(section) {\n        //  Fields\n        /**\n         * @hidden\n         * @private\n         */\n        this.pdfSection = null;\n        if (section == null) {\n            throw Error('ArgumentNullException(\"section\")');\n        }\n        this.section = section;\n    }\n    // Properties\n    /**\n     * Gets the `PdfPage` at the specified index.\n     * @private\n     */\n    get section() {\n        return this.pdfSection;\n    }\n    set section(value) {\n        this.pdfSection = value;\n    }\n    // Public Methods\n    /**\n     * `Determines` whether the specified page is within the collection.\n     * @private\n     */\n    contains(page) {\n        return this.section.contains(page);\n    }\n    /**\n     * `Removes` the specified page from collection.\n     * @private\n     */\n    remove(page) {\n        this.section.remove(page);\n    }\n    /**\n     * `Adds` a new page from collection.\n     * @private\n     */\n    add() {\n        return this.section.add();\n    }\n}\n\n// import { PdfStampCollection } from `./../Pages/PdfStampCollection`;\n/**\n * `PdfDocumentTemplate` class encapsulates a page template for all the pages in the document.\n * @private\n */\nclass PdfDocumentTemplate {\n    // private m_stamps : PdfStampCollection;\n    // Properties\n    /**\n     * `Left` page template object.\n     * @public\n     */\n    get left() {\n        return this.leftTemplate;\n    }\n    set left(value) {\n        this.leftTemplate = this.checkElement(value, TemplateType.Left);\n    }\n    /**\n     * `Top` page template object.\n     * @public\n     */\n    get top() {\n        return this.topTemplate;\n    }\n    set top(value) {\n        this.topTemplate = this.checkElement(value, TemplateType.Top);\n    }\n    /**\n     * `Right` page template object.\n     * @public\n     */\n    get right() {\n        return this.rightTemplate;\n    }\n    set right(value) {\n        this.rightTemplate = this.checkElement(value, TemplateType.Right);\n    }\n    /**\n     * `Bottom` page template object.\n     * @public\n     */\n    get bottom() {\n        return this.bottomTemplate;\n    }\n    set bottom(value) {\n        this.bottomTemplate = this.checkElement(value, TemplateType.Bottom);\n    }\n    /**\n     * `EvenLeft` page template object.\n     * @public\n     */\n    get EvenLeft() {\n        return this.evenLeft;\n    }\n    set EvenLeft(value) {\n        this.evenLeft = this.checkElement(value, TemplateType.Left);\n    }\n    /**\n     * `EvenTop` page template object.\n     * @public\n     */\n    get EvenTop() {\n        return this.evenTop;\n    }\n    set EvenTop(value) {\n        this.evenTop = this.checkElement(value, TemplateType.Top);\n    }\n    /**\n     * `EvenRight` page template object.\n     * @public\n     */\n    get EvenRight() {\n        return this.evenRight;\n    }\n    set EvenRight(value) {\n        this.evenRight = this.checkElement(value, TemplateType.Right);\n    }\n    /**\n     * `EvenBottom` page template object.\n     * @public\n     */\n    get EvenBottom() {\n        return this.evenBottom;\n    }\n    set EvenBottom(value) {\n        this.evenBottom = this.checkElement(value, TemplateType.Bottom);\n    }\n    /**\n     * `OddLeft` page template object.\n     * @public\n     */\n    get OddLeft() {\n        return this.oddLeft;\n    }\n    set OddLeft(value) {\n        this.oddLeft = this.checkElement(value, TemplateType.Left);\n    }\n    /**\n     * `OddTop` page template object.\n     * @public\n     */\n    get OddTop() {\n        return this.oddTop;\n    }\n    set OddTop(value) {\n        this.oddTop = this.checkElement(value, TemplateType.Top);\n    }\n    /**\n     * `OddRight` page template object.\n     * @public\n     */\n    get OddRight() {\n        return this.oddRight;\n    }\n    set OddRight(value) {\n        this.oddRight = this.checkElement(value, TemplateType.Right);\n    }\n    /**\n     * `OddBottom` page template object.\n     * @public\n     */\n    get OddBottom() {\n        return this.oddBottom;\n    }\n    set OddBottom(value) {\n        this.oddBottom = this.checkElement(value, TemplateType.Bottom);\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfDocumentTemplate` class.\n     * @public\n     */\n    constructor() {\n        //\n    }\n    // Implementation\n    /**\n     * Returns `left` template.\n     * @public\n     */\n    getLeft(page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let template = null;\n        // if (page.Document.Pages != null) {\n        let even = this.isEven(page);\n        if (even) {\n            template = (this.EvenLeft != null) ? this.EvenLeft : this.left;\n        }\n        else {\n            template = (this.OddLeft != null) ? this.OddLeft : this.left;\n        }\n        // }\n        return template;\n    }\n    /**\n     * Returns `top` template.\n     * @public\n     */\n    getTop(page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let template = null;\n        // if (page.Document.Pages != null) {\n        let even = this.isEven(page);\n        if (even) {\n            template = (this.EvenTop != null) ? this.EvenTop : this.top;\n        }\n        else {\n            template = (this.OddTop != null) ? this.OddTop : this.top;\n        }\n        // }\n        return template;\n    }\n    /**\n     * Returns `right` template.\n     * @public\n     */\n    getRight(page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let template = null;\n        // if (page.Document.Pages != null) {\n        let even = this.isEven(page);\n        if (even) {\n            template = (this.EvenRight != null) ? this.EvenRight : this.right;\n        }\n        else {\n            template = (this.OddRight != null) ? this.OddRight : this.right;\n        }\n        // }\n        return template;\n    }\n    /**\n     * Returns `bottom` template.\n     * @public\n     */\n    getBottom(page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let template = null;\n        // if (page.Document.Pages != null) {\n        let even = this.isEven(page);\n        if (even) {\n            template = (this.EvenBottom != null) ? this.EvenBottom : this.bottom;\n        }\n        else {\n            template = (this.OddBottom != null) ? this.OddBottom : this.bottom;\n        }\n        // }\n        return template;\n    }\n    /**\n     * Checks whether the page `is even`.\n     * @private\n     */\n    isEven(page) {\n        let pages = page.section.document.pages;\n        let index = 0;\n        if (pages.pageCollectionIndex.containsKey(page)) {\n            index = pages.pageCollectionIndex.getValue(page) + 1;\n        }\n        else {\n            index = pages.indexOf(page) + 1;\n        }\n        let even = ((index % 2) === 0);\n        return even;\n    }\n    /**\n     * Checks a `template element`.\n     * @private\n     */\n    checkElement(templateElement, type) {\n        if (templateElement != null) {\n            if ((typeof templateElement.type !== 'undefined') && (templateElement.type !== TemplateType.None)) {\n                throw new Error('NotSupportedException:Can not reassign the template element. Please, create new one.');\n            }\n            templateElement.type = type;\n        }\n        return templateElement;\n    }\n}\n\n/**\n * PdfSectionTemplate.ts class for EJ2-PDF\n */\n/**\n * Represents a `page template` for all the pages in the section.\n */\nclass PdfSectionTemplate extends PdfDocumentTemplate {\n    // Properties\n    /**\n     * Gets or sets value indicating whether parent `Left page template should be used or not`.\n     * @private\n     */\n    get applyDocumentLeftTemplate() {\n        return this.leftValue;\n    }\n    set applyDocumentLeftTemplate(value) {\n        this.leftValue = value;\n    }\n    /**\n     * Gets or sets value indicating whether parent `Top page template should be used or not`.\n     * @private\n     */\n    get applyDocumentTopTemplate() {\n        return this.topValue;\n    }\n    set applyDocumentTopTemplate(value) {\n        this.topValue = value;\n    }\n    /**\n     * Gets or sets value indicating whether parent `Right page template should be used or not`.\n     * @private\n     */\n    get applyDocumentRightTemplate() {\n        return this.rightValue;\n    }\n    set applyDocumentRightTemplate(value) {\n        this.rightValue = value;\n    }\n    /**\n     * Gets or sets value indicating whether parent `Bottom page template should be used or not`.\n     * @private\n     */\n    get applyDocumentBottomTemplate() {\n        return this.bottomValue;\n    }\n    set applyDocumentBottomTemplate(value) {\n        this.bottomValue = value;\n    }\n    /**\n     * Gets or sets value indicating whether the `stamp value` is true or not.\n     * @private\n     */\n    get applyDocumentStamps() {\n        return this.stampValue;\n    }\n    set applyDocumentStamps(value) {\n        this.stampValue = value;\n    }\n    // Constructors\n    /**\n     * `Creates a new object`.\n     * @private\n     */\n    constructor() {\n        super();\n        this.leftValue = this.topValue = this.rightValue = this.bottomValue = this.stampValue = true;\n    }\n}\n\n/**\n * Represents a `section` entity. A section it's a set of the pages with similar page settings.\n */\nclass PdfSection {\n    constructor(document, pageSettings) {\n        //Fields\n        //public PageAdded() : PageAddedEventArgs.PageAddedEventHandler = new PageAddedEventArgs.PageAddedEventHandler(Object,args)\n        /**\n         * @hidden\n         * @private\n         */\n        this.pageAdded = new PageAddedEventArgs();\n        /**\n         * @hidden\n         * @private\n         */\n        this.pdfPages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        if (typeof pageSettings === 'undefined') {\n            this.constructor(document, document.pageSettings);\n        }\n        else {\n            this.pdfDocument = document;\n            this.settings = pageSettings.clone();\n            this.initialSettings = this.settings.clone();\n            this.initialize();\n        }\n    }\n    //Property\n    /**\n     * Gets or sets the `parent`.\n     * @private\n     */\n    get parent() {\n        return this.sectionCollection;\n    }\n    set parent(value) {\n        this.sectionCollection = value;\n        this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));\n    }\n    /**\n     * Gets the `parent document`.\n     * @private\n     */\n    get parentDocument() {\n        return this.pdfDocument;\n    }\n    /**\n     * Gets or sets the `page settings` of the section.\n     * @private\n     */\n    get pageSettings() {\n        return this.settings;\n    }\n    set pageSettings(value) {\n        if (value != null) {\n            this.settings = value;\n        }\n        else {\n            throw Error('Value can not be null.');\n        }\n    }\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get element() {\n        return this.section;\n    }\n    /**\n     * Gets the `count` of the pages in the section.\n     * @private\n     */\n    get count() {\n        return this.pagesReferences.count;\n    }\n    /**\n     * Gets or sets a `template` for the pages in the section.\n     * @private\n     */\n    get template() {\n        if (this.pageTemplate == null) {\n            this.pageTemplate = new PdfSectionTemplate();\n        }\n        return this.pageTemplate;\n    }\n    set template(value) {\n        this.pageTemplate = value;\n    }\n    /**\n     * Gets the `document`.\n     * @private\n     */\n    get document() {\n        return this.sectionCollection.document;\n    }\n    /**\n     * Gets the collection of `pages` in a section (Read only)\n     * @private\n     */\n    get pages() {\n        if (this.pagesCollection == null || typeof this.pagesCollection === 'undefined') {\n            this.pagesCollection = new PdfSectionPageCollection(this);\n        }\n        return this.pagesCollection;\n    }\n    //methods\n    /**\n     * `Return the page collection` of current section.\n     * @private\n     */\n    getPages() {\n        return this.pdfPages;\n    }\n    /**\n     * `Translates` point into native coordinates of the page.\n     * @private\n     */\n    pointToNativePdf(page, point) {\n        let bounds = this.getActualBounds(page, true);\n        point.x += bounds.x;\n        point.y = this.pageSettings.height - (point.y);\n        return point;\n    }\n    /**\n     * Sets the page setting of the current section.\n     * @public\n     * @param settings Instance of `PdfPageSettings`\n     */\n    setPageSettings(settings) {\n        this.settings = settings;\n        this.state.orientation = settings.orientation;\n        this.state.rotate = settings.rotate;\n        this.state.size = settings.size;\n        this.state.origin = settings.origin;\n    }\n    /**\n     * `Initializes` the object.\n     * @private\n     */\n    initialize() {\n        this.pagesReferences = new PdfArray();\n        this.section = new PdfDictionary();\n        this.state = new PageSettingsState(this.pdfDocument);\n        this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state);\n        this.pageCount = new PdfNumber(0);\n        this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);\n        this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages));\n        this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);\n    }\n    /**\n     * Checks whether any template should be printed on this layer.\n     * @private\n     * @param document The parent document.\n     * @param page The parent page.\n     * @param foreground Layer z-order.\n     * @returns True - if some content should be printed on the layer, False otherwise.\n     */\n    containsTemplates(document, page, foreground) {\n        let documentHeaders = this.getDocumentTemplates(document, page, true, foreground);\n        let documentTemplates = this.getDocumentTemplates(document, page, false, foreground);\n        let contains = (documentHeaders.length > 0 || documentTemplates.length > 0);\n        return contains;\n    }\n    /**\n     * Returns array of the document templates.\n     * @private\n     * @param document The parent document.\n     * @param page The parent page.\n     * @param headers If true - return headers/footers, if false - return simple templates.\n     * @param foreground If true - return foreground templates, if false - return background templates.\n     * @returns Returns array of the document templates.\n     */\n    /* tslint:disable */\n    getDocumentTemplates(document, page, headers, foreground) {\n        let templates = [];\n        if (headers) {\n            if (this.template.applyDocumentTopTemplate && document.template.getTop(page) != null) {\n                if ((!(document.template.getTop(page).foreground || foreground)) || (document.template.getTop(page).foreground && foreground)) {\n                    templates.push(document.template.getTop(page));\n                }\n            }\n            if (this.template.applyDocumentBottomTemplate && document.template.getBottom(page) != null) {\n                if ((!(document.template.getBottom(page).foreground || foreground)) || (document.template.getBottom(page).foreground && foreground)) {\n                    templates.push(document.template.getBottom(page));\n                }\n            }\n            if (this.template.applyDocumentLeftTemplate && document.template.getLeft(page) != null) {\n                if ((!(document.template.getLeft(page).foreground || foreground)) || (document.template.getLeft(page).foreground && foreground)) {\n                    templates.push(document.template.getLeft(page));\n                }\n            }\n            if (this.template.applyDocumentRightTemplate && document.template.getRight(page) != null) {\n                if ((!(document.template.getRight(page).foreground || foreground)) || (document.template.getRight(page).foreground && foreground)) {\n                    templates.push(document.template.getRight(page));\n                }\n            }\n        }\n        return templates;\n    }\n    /* tslint:enable */\n    /**\n     * `Adds` the specified page.\n     * @private\n     */\n    add(page) {\n        if (typeof page === 'undefined') {\n            let page = new PdfPage();\n            this.add(page);\n            return page;\n        }\n        else {\n            let r = this.checkPresence(page);\n            this.pdfPages.push(page);\n            this.pagesReferences.add(r);\n            page.setSection(this);\n            page.resetProgress();\n            this.pageAddedMethod(page);\n        }\n    }\n    /**\n     * `Checks the presence`.\n     * @private\n     */\n    checkPresence(page) {\n        let rh = new PdfReferenceHolder(page);\n        let contains = false;\n        let sc = this.parent;\n        for (let index = 0; index < sc.section.length; index++) {\n            let section = sc.section[index];\n            contains = contains || section.contains(page);\n        }\n        return rh;\n    }\n    /**\n     * `Determines` whether the page in within the section.\n     * @private\n     */\n    contains(page) {\n        let index = this.indexOf(page);\n        return (0 <= index);\n    }\n    /**\n     * Get the `index of` the page.\n     * @private\n     */\n    indexOf(page) {\n        for (let index = 0; index < this.pdfPages.length; index++) {\n            if (this.pdfPages[index] === page) {\n                return this.pdfPages.indexOf(page);\n            }\n        }\n        let r = new PdfReferenceHolder(page);\n        return this.pagesReferences.indexOf(r);\n    }\n    /**\n     * Call two event's methods.\n     * @hidden\n     * @private\n     */\n    pageAddedMethod(page) {\n        //Create event's arguments\n        let args = new PageAddedEventArgs(page);\n        this.onPageAdded(args);\n        let parent = this.parent;\n        parent.document.pages.onPageAdded(args);\n        this.pageCount.intValue = this.count;\n    }\n    /**\n     * Called when the page has been added.\n     * @hidden\n     * @private\n     */\n    onPageAdded(args) {\n        //\n    }\n    getActualBounds(arg1, arg2, arg3) {\n        if (arg1 instanceof PdfPage && typeof arg2 === 'boolean') {\n            let result;\n            let document = this.parent.document;\n            result = this.getActualBounds(document, arg1, arg2);\n            return result;\n        }\n        else {\n            arg1 = arg1;\n            arg2 = arg2;\n            arg3 = arg3;\n            let bounds = new RectangleF(0, 0, 0, 0);\n            bounds.height = (arg3) ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;\n            bounds.width = (arg3) ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;\n            let left = this.getLeftIndentWidth(arg1, arg2, arg3);\n            let top = this.getTopIndentHeight(arg1, arg2, arg3);\n            let right = this.getRightIndentWidth(arg1, arg2, arg3);\n            let bottom = this.getBottomIndentHeight(arg1, arg2, arg3);\n            bounds.x += left;\n            bounds.y += top;\n            bounds.width -= (left + right);\n            bounds.height -= (top + bottom);\n            return bounds;\n        }\n    }\n    /**\n     * Calculates width of the `left indent`.\n     * @private\n     */\n    getLeftIndentWidth(document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let value = (includeMargins) ? this.pageSettings.margins.left : 0;\n        let templateWidth = (this.template.getLeft(page) != null) ? this.template.getLeft(page).width : 0;\n        let docTemplateWidth = (document.template.getLeft(page) != null) ? document.template.getLeft(page).width : 0;\n        value += (this.template.applyDocumentLeftTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n        return value;\n    }\n    /**\n     * Calculates `Height` of the top indent.\n     * @private\n     */\n    getTopIndentHeight(document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let value = (includeMargins) ? this.pageSettings.margins.top : 0;\n        let templateHeight = (this.template.getTop(page) != null) ? this.template.getTop(page).height : 0;\n        let docTemplateHeight = (document.template.getTop(page) != null) ? document.template.getTop(page).height : 0;\n        value += (this.template.applyDocumentTopTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n        return value;\n    }\n    /**\n     * Calculates `width` of the right indent.\n     * @private\n     */\n    getRightIndentWidth(document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let value = (includeMargins) ? this.pageSettings.margins.right : 0;\n        let templateWidth = (this.template.getRight(page) != null) ? this.template.getRight(page).width : 0;\n        let docTemplateWidth = (document.template.getRight(page) != null) ? document.template.getRight(page).width : 0;\n        value += (this.template.applyDocumentRightTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n        return value;\n    }\n    /**\n     * Calculates `Height` of the bottom indent.\n     * @private\n     */\n    getBottomIndentHeight(document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        let value = (includeMargins) ? this.pageSettings.margins.bottom : 0;\n        let templateHeight = (this.template.getBottom(page) != null) ? this.template.getBottom(page).height : 0;\n        let docTemplateHeight = (document.template.getBottom(page) != null) ? document.template.getBottom(page).height : 0;\n        value += (this.template.applyDocumentBottomTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n        return value;\n    }\n    /**\n     * `Removes` the page from the section.\n     * @private\n     */\n    remove(page) {\n        if (page == null) {\n            throw Error('ArgumentNullException(\"page\")');\n        }\n        let index = this.pdfPages.indexOf(page);\n        this.pagesReferences.removeAt(index);\n        let temproaryPages = [];\n        for (let j = 0; j < index; j++) {\n            temproaryPages.push(this.pdfPages[j]);\n        }\n        for (let j = index + 1; j < this.pdfPages.length; j++) {\n            temproaryPages.push(this.pdfPages[j]);\n        }\n        this.pdfPages = temproaryPages;\n    }\n    /**\n     * In fills dictionary by the data from `Page settings`.\n     * @private\n     */\n    applyPageSettings(container, parentSettings, state) {\n        let bounds = new RectangleF(state.origin, state.size);\n        container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));\n        let rotate = 0;\n        rotate = PdfSectionCollection.rotateFactor * state.rotate;\n        let angle = new PdfNumber(rotate);\n        container.items.setValue(this.dictionaryProperties.rotate, angle);\n    }\n    /**\n     * Catches the Save event of the dictionary.\n     * @hidden\n     * @private\n     */\n    beginSave(state, writer) {\n        let doc = writer.document;\n        this.applyPageSettings(this.section, doc.pageSettings, state);\n    }\n    /**\n     * Draws page templates on the page.\n     * @private\n     */\n    drawTemplates(page, layer, document, foreground) {\n        let documentHeaders = this.getDocumentTemplates(document, page, true, foreground);\n        let documentTemplates = this.getDocumentTemplates(document, page, false, foreground);\n        if (foreground) {\n            this.drawTemplatesHelper(layer, document, documentHeaders);\n            this.drawTemplatesHelper(layer, document, documentTemplates);\n        }\n        else {\n            this.drawTemplatesHelper(layer, document, documentHeaders);\n            this.drawTemplatesHelper(layer, document, documentTemplates);\n        }\n    }\n    /**\n     * Draws page templates on the page.\n     * @private\n     */\n    drawTemplatesHelper(layer, document, templates) {\n        if (templates != null && templates.length > 0) {\n            let len = templates.length;\n            for (let i = 0; i < len; i++) {\n                let template = templates[i];\n                template.draw(layer, document);\n            }\n        }\n    }\n}\nclass PageSettingsState {\n    //public Properties\n    /**\n     * @hidden\n     * @private\n     */\n    get orientation() {\n        return this.pageOrientation;\n    }\n    set orientation(value) {\n        this.pageOrientation = value;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    get rotate() {\n        return this.pageRotate;\n    }\n    set rotate(value) {\n        this.pageRotate = value;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    get size() {\n        return this.pageSize;\n    }\n    set size(value) {\n        this.pageSize = value;\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    get origin() {\n        return this.pageOrigin;\n    }\n    set origin(value) {\n        this.pageOrigin = value;\n    }\n    //Public Constructor\n    /**\n     * New instance to store the `PageSettings`.\n     * @private\n     */\n    constructor(document) {\n        this.pageOrientation = document.pageSettings.orientation;\n        this.pageRotate = document.pageSettings.rotate;\n        this.pageSize = document.pageSettings.size;\n        this.pageOrigin = document.pageSettings.origin;\n    }\n}\n\n/**\n * Represents the `collection of the sections`.\n * @private\n */\nclass PdfSectionCollection {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfSectionCollection` class.\n     * @private\n     */\n    constructor(document) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.sections = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (document === null) {\n        //     throw new Error('ArgumentNullException : document');\n        // }\n        this.pdfDocument = document.clone();\n        this.initialize();\n    }\n    //Properties\n    /**\n     * Gets the `Section` collection.\n     */\n    get section() {\n        return this.sections;\n    }\n    /**\n     * Gets a parent `document`.\n     * @private\n     */\n    get document() {\n        return this.pdfDocument;\n    }\n    /**\n     * Gets the `number of sections` in a document.\n     * @private\n     */\n    get count() {\n        return this.sections.length;\n    }\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get element() {\n        return this.pages;\n    }\n    //Methods\n    /**\n     * `Initializes the object`.\n     * @private\n     */\n    initialize() {\n        this.sectionCount = new PdfNumber(0);\n        this.sectionCollection = new PdfArray();\n        this.pages = new PdfDictionary();\n        this.pages.beginSave = new SaveSectionCollectionEventHandler(this);\n        this.pages.items.setValue(this.dictionaryProperties.type, new PdfName('Pages'));\n        this.pages.items.setValue(this.dictionaryProperties.kids, this.sectionCollection);\n        this.pages.items.setValue(this.dictionaryProperties.count, this.sectionCount);\n        this.pages.items.setValue(this.dictionaryProperties.resources, new PdfDictionary());\n        this.setPageSettings(this.pages, this.pdfDocument.pageSettings);\n    }\n    /**\n     * Initializes a new instance of the `PdfSectionCollection` class.\n     * @private\n     */\n    pdfSectionCollection(index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException()');\n        }\n        return this.sections[index];\n    }\n    /**\n     * In fills dictionary by the data from `Page settings`.\n     * @private\n     */\n    setPageSettings(container, pageSettings) {\n        // if (container === null) {\n        //     throw new Error('ArgumentNullException : container');\n        // }\n        // if (pageSettings === null) {\n        //     throw new Error('ArgumentNullException : pageSettings');\n        // }\n        let bounds = new RectangleF(new PointF(), pageSettings.size);\n        container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));\n    }\n    /**\n     * `Adds` the specified section.\n     * @private\n     */\n    add(section) {\n        if (typeof section === 'undefined') {\n            let section = new PdfSection(this.pdfDocument);\n            this.add(section);\n            return section;\n        }\n        else {\n            // if (section === null) {\n            //     throw new Error('ArgumentNullException : section');\n            // }\n            let r = this.checkSection(section);\n            this.sections.push(section);\n            section.parent = this;\n            this.sectionCollection.add(r);\n            return this.sections.indexOf(section);\n        }\n    }\n    /**\n     * `Checks` if the section is within the collection.\n     * @private\n     */\n    checkSection(section) {\n        let r = new PdfReferenceHolder(section);\n        let contains = this.sectionCollection.contains(r);\n        // if (contains) {\n        //     throw new Error('ArgumentException : The object can not be added twice to the collection,section');\n        // }\n        return r;\n    }\n    /**\n     * Catches the Save event of the dictionary to `count the pages`.\n     * @private\n     */\n    countPages() {\n        let count = 0;\n        this.sections.forEach((n) => (count += n.count));\n        return count;\n    }\n    /**\n     * Catches the Save event of the dictionary to `count the pages`.\n     * @hidden\n     * @private\n     */\n    beginSave() {\n        this.sectionCount.intValue = this.countPages();\n    }\n}\n//Fields\n/**\n * Rotate factor for page `rotation`.\n * @default 90\n * @private\n */\nPdfSectionCollection.rotateFactor = 90;\n\n/**\n * Represents a virtual collection of all the pages in the document.\n * @private\n */\nclass PdfDocumentPageCollection {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfPageCollection` class.\n     * @private\n     */\n    constructor(document) {\n        /**\n         * It holds the page collection with the `index`.\n         * @private\n         */\n        this.pdfPageCollectionIndex = new Dictionary();\n        /**\n         * Stores the previous pages's `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.previousPageOrientation = PdfPageOrientation.Portrait;\n        this.document = document;\n    }\n    //Property\n    /**\n     * Gets the total `number of the pages`.\n     * @private\n     */\n    get count() {\n        return this.countPages();\n    }\n    /**\n     * Gets a `page index` from the document.\n     * @private\n     */\n    get pageCollectionIndex() {\n        return this.pdfPageCollectionIndex;\n    }\n    add(page) {\n        if (typeof page === 'undefined') {\n            let page = new PdfPage();\n            this.add(page);\n            return page;\n        }\n        else {\n            let section = this.getLastSection();\n            if (section.pageSettings.orientation !== this.previousPageOrientation) {\n                section = this.document.sections.add();\n                section.pageSettings.orientation = this.document.pageSettings.orientation;\n            }\n            section.add(page);\n        }\n    }\n    /**\n     * Returns `last section` in the document.\n     * @private\n     */\n    getLastSection() {\n        let sc = this.document.sections;\n        if (sc.section.length === 0) {\n            sc.add();\n        }\n        let section = sc.section[sc.section.length - 1];\n        return section;\n    }\n    /**\n     * Called when `new page has been added`.\n     * @private\n     */\n    onPageAdded(args) {\n        // if (PageAdded !== null)\n        // {\n        //     PageAdded(this, args);\n        // }\n    }\n    /**\n     * Gets the `total number of pages`.\n     * @private\n     */\n    countPages() {\n        let sc = this.document.sections;\n        let count = 0;\n        for (let index = 0; index < sc.section.length; index++) {\n            count += sc.section[index].count;\n        }\n        return count;\n    }\n    /**\n     * Gets the `page object` from page index.\n     * @private\n     */\n    getPageByIndex(index) {\n        return this.getPage(index);\n    }\n    /**\n     * Gets a page by its `index` in the document.\n     * @private\n     */\n    getPage(index) {\n        if ((index < 0) || (index >= this.count)) {\n            throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\n        }\n        let page = null;\n        let sectionStartIndex = 0;\n        let sectionCount = 0;\n        let pageIndex = 0;\n        let length = this.document.sections.count;\n        for (let i = 0; i < length; i++) {\n            let section = this.document.sections.section[i];\n            sectionCount = section.count;\n            pageIndex = index - sectionStartIndex;\n            // We found a section containing the page.\n            if ((index >= sectionStartIndex && pageIndex < sectionCount)) {\n                page = section.getPages()[pageIndex];\n                break;\n            }\n            sectionStartIndex += sectionCount;\n        }\n        return page;\n    }\n    /**\n     * Gets the `index of` the page in the document.\n     * @private\n     */\n    indexOf(page) {\n        let index = -1;\n        if (page == null) {\n            throw new Error('ArgumentNullException: page');\n        }\n        else {\n            let numPages = 0;\n            for (let i = 0, len = this.document.sections.count; i < len; i++) {\n                let section = this.document.sections.pdfSectionCollection(i);\n                index = section.indexOf(page);\n                if (index >= 0) {\n                    index += numPages;\n                    break;\n                }\n                else {\n                    index = -1;\n                }\n                numPages += section.count;\n            }\n        }\n        return index;\n    }\n    /**\n     * `Removes` the specified page.\n     * @private\n     */\n    remove(page) {\n        if (page == null) {\n            throw Error('ArgumentNullException(\"page\")');\n        }\n        let section = null;\n        for (let i = 0, len = this.document.sections.count; i < len; i++) {\n            section = this.document.sections.pdfSectionCollection(i);\n            if (section.pages.contains(page)) {\n                section.pages.remove(page);\n                break;\n            }\n        }\n        return section;\n    }\n}\n\n/**\n * PdfCacheCollection.ts class for EJ2-PDF\n */\n/**\n * `Collection of the cached objects`.\n * @private\n */\nclass PdfCacheCollection {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfCacheCollection` class.\n     * @private\n     */\n    constructor() {\n        this.referenceObjects = [];\n        this.pdfFontCollection = new Dictionary();\n    }\n    // Public methods\n    /**\n     * `Searches` for the similar cached object. If is not found - adds the object to the cache.\n     * @private\n     */\n    search(obj) {\n        let result = null;\n        let group = this.createNewGroup();\n        group.push(obj);\n        return result;\n    }\n    // Implementation\n    /**\n     * `Creates` a new group.\n     * @private\n     */\n    createNewGroup() {\n        let group = [];\n        this.referenceObjects.push(group);\n        return group;\n    }\n    destroy() {\n        this.pdfFontCollection = undefined;\n        this.referenceObjects = undefined;\n    }\n}\n\n/**\n * Represents a PDF document and can be used to create a new PDF document from the scratch.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfDocument extends PdfDocumentBase {\n    constructor(isMerging) {\n        super();\n        /**\n         * Default `margin` value.\n         * @default 40.0\n         * @private\n         */\n        this.defaultMargin = 40.0;\n        /**\n         * Internal variable to store instance of `StreamWriter` classes..\n         * @default null\n         * @private\n         */\n        this.streamWriter = null;\n        super(this);\n        if (isMerging === true || isMerging === false || typeof isMerging !== 'undefined') {\n            let objects = new PdfMainObjectCollection();\n            this.setMainObjectCollection(objects);\n            let crossTable = new PdfCrossTable();\n            crossTable.isMerging = isMerging;\n            crossTable.document = this;\n            this.setCrossTable(crossTable);\n            let catalog = new PdfCatalog();\n            this.setCatalog(catalog);\n            objects.add(catalog);\n            catalog.position = -1;\n            this.sectionCollection = new PdfSectionCollection(this);\n            this.documentPageCollection = new PdfDocumentPageCollection(this);\n            catalog.pages = this.sectionCollection;\n        }\n        else {\n            PdfDocument.cacheCollection = new PdfCacheCollection();\n            this.constructor(false);\n        }\n    }\n    //Properties\n    /**\n     * Gets the `default font`. It is used for complex objects when font is not explicitly defined.\n     * @private\n     */\n    static get defaultFont() {\n        if (this.defaultStandardFont == null) {\n            this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);\n        }\n        return this.defaultStandardFont;\n    }\n    /**\n     * Gets the collection of the `sections` in the document.\n     * @private\n     */\n    get sections() {\n        return this.sectionCollection;\n    }\n    /**\n     * Gets the document's page setting.\n     * @public\n     */\n    get pageSettings() {\n        if (this.settings == null) {\n            this.settings = new PdfPageSettings(this.defaultMargin);\n        }\n        return this.settings;\n    }\n    /**\n     * Sets the document's page setting.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     *\n     * // sets the right margin of the page\n     * document.pageSettings.margins.right = 0;\n     * // set the page size.\n     * document.pageSettings.size = new SizeF(500, 500);\n     * // change the page orientation to landscape\n     * document.pageSettings.orientation = PdfPageOrientation.Landscape;\n     * // apply 90 degree rotation on the page\n     * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;\n     *\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set the specified Point\n     * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, point);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    set pageSettings(value) {\n        this.settings = value;\n    }\n    /**\n     * Represents the collection of pages in the PDF document.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * //\n     * // get the collection of pages in the document\n     * let pageCollection : PdfDocumentPageCollection  = document.pages;\n     * //\n     * // add pages\n     * let page1 : PdfPage = pageCollection.add();\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get pages() {\n        return this.documentPageCollection;\n    }\n    /**\n     * Gets collection of the `cached objects`.\n     * @private\n     */\n    static get cache() {\n        if (typeof PdfDocument.cacheCollection === 'undefined' || PdfDocument.cacheCollection == null) {\n            return new PdfCacheCollection();\n        }\n        return PdfDocument.cacheCollection;\n    }\n    /**\n     * Sets collection of the `cached objects`.\n     * @private\n     */\n    static set cache(value) {\n        this.cacheCollection = value;\n    }\n    /* tslint:disable */\n    /**\n     * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.\n     * @private\n     */\n    get colorSpace() {\n        if ((this.pdfColorSpace === PdfColorSpace.Rgb) || ((this.pdfColorSpace === PdfColorSpace.Cmyk)\n            || (this.pdfColorSpace === PdfColorSpace.GrayScale))) {\n            return this.pdfColorSpace;\n        }\n        else {\n            return PdfColorSpace.Rgb;\n        }\n    }\n    set colorSpace(value) {\n        if ((value === PdfColorSpace.Rgb) || ((value === PdfColorSpace.Cmyk) ||\n            (value === PdfColorSpace.GrayScale))) {\n            this.pdfColorSpace = value;\n        }\n        else {\n            this.pdfColorSpace = PdfColorSpace.Rgb;\n        }\n    }\n    /* tslint:enable */\n    /**\n     * Gets or sets a `template` to all pages in the document.\n     * @private\n     */\n    get template() {\n        if (this.pageTemplate == null) {\n            this.pageTemplate = new PdfDocumentTemplate();\n        }\n        return this.pageTemplate;\n    }\n    set template(value) {\n        this.pageTemplate = value;\n    }\n    docSave(stream, arg2, arg3) {\n        this.checkPagesPresence();\n        if (stream === null) {\n            throw new Error('ArgumentNullException : stream');\n        }\n        this.streamWriter = stream;\n        let writer = new PdfWriter(stream);\n        writer.document = this;\n        if (typeof arg2 === 'boolean' && typeof arg3 === 'undefined') {\n            return this.crossTable.save(writer);\n        }\n        else {\n            this.crossTable.save(writer, arg2);\n        }\n    }\n    /**\n     * Checks the pages `presence`.\n     * @private\n     */\n    checkPagesPresence() {\n        if (this.pages.count === 0) {\n            this.pages.add();\n        }\n    }\n    /**\n     * disposes the current instance of `PdfDocument` class.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a new page to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set the font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // create black brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    destroy() {\n        this.catalog = undefined;\n        this.colorSpace = undefined;\n        this.currentSavingObj = undefined;\n        this.documentPageCollection = undefined;\n        this.isStreamCopied = undefined;\n        this.pageSettings = undefined;\n        this.pageTemplate = undefined;\n        this.pdfColorSpace = undefined;\n        this.sectionCollection = undefined;\n        PdfDocument.cache.destroy();\n        this.crossTable.pdfObjects.destroy();\n        PdfDocument.cache = undefined;\n        this.streamWriter.destroy();\n    }\n}\n/**\n * `Font` used in complex objects to draw strings and text when it is not defined explicitly.\n * @default null\n * @private\n */\nPdfDocument.defaultStandardFont = null;\n\n/**\n * `Metrics` of the font.\n * @private\n */\nclass PdfFontMetrics {\n    constructor() {\n        /**\n         * `Line gap`.\n         * @private\n         */\n        this.lineGap = 0;\n    }\n    //  Public methods\n    /**\n     * Returns `ascent` taking into consideration font`s size.\n     * @private\n     */\n    getAscent(format) {\n        let returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    }\n    /**\n     * Returns `descent` taking into consideration font`s size.\n     * @private\n     */\n    getDescent(format) {\n        let returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    }\n    /**\n     * Returns `Line gap` taking into consideration font`s size.\n     * @private\n     */\n    getLineGap(format) {\n        let returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    }\n    /**\n     * Returns `height` taking into consideration font`s size.\n     * @private\n     */\n    getHeight(format) {\n        let height;\n        let clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\n        let clearTypeFontCollection = [];\n        for (let index = 0; index < clearTypeFonts.length; index++) {\n            let font = clearTypeFonts[index];\n            clearTypeFontCollection.push(font);\n        }\n        if (this.getDescent(format) < 0) {\n            // if ((clearTypeFontCollection.indexOf(this.name.toLowerCase()) !== -1) && !this.isUnicodeFont) {\n            //     height = (this.GetAscent(format) - this.GetDescent(format) - this.GetLineGap(format));\n            // } else {\n            height = (this.getAscent(format) - this.getDescent(format) + this.getLineGap(format));\n            // }\n        }\n        else {\n            height = (this.getAscent(format) + this.getDescent(format) + this.getLineGap(format));\n        }\n        return height;\n    }\n    /**\n     * Calculates `size` of the font depending on the subscript/superscript value.\n     * @private\n     */\n    getSize(format) {\n        let size = this.size;\n        if (format != null) {\n            switch (format.subSuperScript) {\n                case PdfSubSuperScript.SubScript:\n                    size /= this.subScriptSizeFactor;\n                    break;\n                case PdfSubSuperScript.SuperScript:\n                    size /= this.superscriptSizeFactor;\n                    break;\n            }\n        }\n        return size;\n    }\n    /**\n     * `Clones` the metrics.\n     * @private\n     */\n    clone() {\n        let metrics = this;\n        metrics.widthTable = WidthTable.clone();\n        return metrics;\n    }\n    //  Properies\n    /**\n     * Gets or sets the `width table`.\n     * @private\n     */\n    get widthTable() {\n        return this.internalWidthTable;\n    }\n    set widthTable(value) {\n        this.internalWidthTable = value;\n    }\n}\nclass WidthTable {\n    /**\n     * Static `clones` this instance of the WidthTable class.\n     * @private\n     */\n    static clone() {\n        return null;\n    }\n}\nclass StandardWidthTable extends WidthTable {\n    //Properties\n    /**\n     * Gets the `32 bit number` at the specified index.\n     * @private\n     */\n    items(index) {\n        if (index < 0 || index >= this.widths.length) {\n            throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');\n        }\n        let result = this.widths[index];\n        return result;\n    }\n    /**\n     * Gets the `length` of the internal array.\n     * @private\n     */\n    get length() {\n        return this.widths.length;\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `StandardWidthTable` class.\n     * @private\n     */\n    constructor(widths) {\n        super();\n        if (widths == null) {\n            throw new Error('ArgumentNullException:widths');\n        }\n        this.widths = widths;\n    }\n    //Overrides\n    /**\n     * `Clones` this instance of the WidthTable class.\n     * @private\n     */\n    clone() {\n        let swt = this;\n        swt.widths = this.widths;\n        return swt;\n    }\n    /**\n     * Converts width table to a `PDF array`.\n     * @private\n     */\n    toArray() {\n        let arr = new PdfArray(this.widths);\n        return arr;\n    }\n}\n\n/**\n * PdfStandardFontMetricsFactory.ts class for EJ2-PDF\n */\n/**\n * @private\n * `Factory of the standard fonts metrics`.\n */\nclass PdfStandardFontMetricsFactory {\n    /**\n     * Returns `metrics` of the font.\n     * @private\n     */\n    static getMetrics(fontFamily, fontStyle, size) {\n        let metrics = null;\n        switch (fontFamily) {\n            case PdfFontFamily.Helvetica:\n                metrics = this.getHelveticaMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.Courier:\n                metrics = this.getCourierMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.TimesRoman:\n                metrics = this.getTimesMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.Symbol:\n                metrics = this.getSymbolMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.ZapfDingbats:\n                metrics = this.getZapfDingbatsMetrics(fontFamily, fontStyle, size);\n                break;\n            default:\n                metrics = this.getHelveticaMetrics(PdfFontFamily.Helvetica, fontStyle, size);\n                break;\n        }\n        metrics.name = fontFamily.toString();\n        metrics.subScriptSizeFactor = this.subSuperScriptFactor;\n        metrics.superscriptSizeFactor = this.subSuperScriptFactor;\n        return metrics;\n    }\n    // Implementation\n    /**\n     * Creates `Helvetica font metrics`.\n     * @private\n     */\n    static getHelveticaMetrics(fontFamily, fontStyle, size) {\n        let metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.helveticaBoldItalicAscent;\n            metrics.descent = this.helveticaBoldItalicDescent;\n            metrics.postScriptName = this.helveticaBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.helveticaBoldAscent;\n            metrics.descent = this.helveticaBoldDescent;\n            metrics.postScriptName = this.helveticaBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.helveticaItalicAscent;\n            metrics.descent = this.helveticaItalicDescent;\n            metrics.postScriptName = this.helveticaItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.helveticaAscent;\n            metrics.descent = this.helveticaDescent;\n            metrics.postScriptName = this.helveticaName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    }\n    /**\n     * Creates `Courier font metrics`.\n     * @private\n     */\n    static getCourierMetrics(fontFamily, fontStyle, size) {\n        let metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.courierBoldItalicAscent;\n            metrics.descent = this.courierBoldItalicDescent;\n            metrics.postScriptName = this.courierBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.courierBoldAscent;\n            metrics.descent = this.courierBoldDescent;\n            metrics.postScriptName = this.courierBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.courierItalicAscent;\n            metrics.descent = this.courierItalicDescent;\n            metrics.postScriptName = this.courierItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.courierAscent;\n            metrics.descent = this.courierDescent;\n            metrics.postScriptName = this.courierName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    }\n    /**\n     * Creates `Times font metrics`.\n     * @private\n     */\n    static getTimesMetrics(fontFamily, fontStyle, size) {\n        let metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.timesBoldItalicAscent;\n            metrics.descent = this.timesBoldItalicDescent;\n            metrics.postScriptName = this.timesBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanBoldItalicWidths);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.timesBoldAscent;\n            metrics.descent = this.timesBoldDescent;\n            metrics.postScriptName = this.timesBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.timesItalicAscent;\n            metrics.descent = this.timesItalicDescent;\n            metrics.postScriptName = this.timesItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanItalicWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.timesAscent;\n            metrics.descent = this.timesDescent;\n            metrics.postScriptName = this.timesName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    }\n    /**\n     * Creates `Symbol font metrics`.\n     * @private\n     */\n    static getSymbolMetrics(fontFamily, fontStyle, size) {\n        let metrics = new PdfFontMetrics();\n        metrics.ascent = this.symbolAscent;\n        metrics.descent = this.symbolDescent;\n        metrics.postScriptName = this.symbolName;\n        metrics.size = size;\n        metrics.widthTable = new StandardWidthTable(this.symbolWidth);\n        metrics.height = metrics.ascent - metrics.descent;\n        return metrics;\n    }\n    /**\n     * Creates `ZapfDingbats font metrics`.\n     * @private\n     */\n    static getZapfDingbatsMetrics(fontFamily, fontStyle, size) {\n        let metrics = new PdfFontMetrics();\n        metrics.ascent = this.zapfDingbatsAscent;\n        metrics.descent = this.zapfDingbatsDescent;\n        metrics.postScriptName = this.zapfDingbatsName;\n        metrics.size = size;\n        metrics.widthTable = new StandardWidthTable(this.zapfDingbatsWidth);\n        metrics.height = metrics.ascent - metrics.descent;\n        return metrics;\n    }\n}\n/**\n * `Multiplier` os subscript superscript.\n * @private\n */\nPdfStandardFontMetricsFactory.subSuperScriptFactor = 1.52;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaAscent = 931;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaDescent = -225;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaName = 'Helvetica';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldAscent = 962;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldDescent = -228;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldName = 'Helvetica-Bold';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaItalicAscent = 931;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaItalicDescent = -225;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaItalicName = 'Helvetica-Oblique';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldItalicAscent = 962;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldItalicDescent = -228;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.helveticaBoldItalicName = 'Helvetica-BoldOblique';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierAscent = 805;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierDescent = -250;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.courierName = 'Courier';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldAscent = 801;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldDescent = -250;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldName = 'Courier-Bold';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierItalicAscent = 805;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierItalicDescent = -250;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.courierItalicName = 'Courier-Oblique';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldItalicAscent = 801;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldItalicDescent = -250;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.courierBoldItalicName = 'Courier-BoldOblique';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesAscent = 898;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesDescent = -218;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.timesName = 'Times-Roman';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldAscent = 935;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldDescent = -218;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldName = 'Times-Bold';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesItalicAscent = 883;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesItalicDescent = -217;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.timesItalicName = 'Times-Italic';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldItalicAscent = 921;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldItalicDescent = -218;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.timesBoldItalicName = 'Times-BoldItalic';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.symbolAscent = 1010;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.symbolDescent = -293;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.symbolName = 'Symbol';\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.zapfDingbatsAscent = 820;\n/**\n * `Ascender` value for the font.\n * @private\n */\nPdfStandardFontMetricsFactory.zapfDingbatsDescent = -143;\n/**\n * `Font type`.\n * @private\n */\nPdfStandardFontMetricsFactory.zapfDingbatsName = 'ZapfDingbats';\n/**\n * `Arial` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.arialWidth = [\n    278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333,\n    278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584,\n    584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833,\n    722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278,\n    469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833,\n    556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334,\n    584, 0, 556, 0, 222, 556, 333, 1000, 556, 556, 333, 1000, 667, 333, 1000, 0,\n    611, 0, 0, 222, 222, 333, 333, 350, 556, 1000, 333, 1000, 500, 333, 944, 0,\n    500, 667, 0, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 0,\n    737, 333, 400, 584, 333, 333, 333, 556, 537, 278, 333, 333, 365, 556, 834, 834,\n    834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278,\n    278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667,\n    667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278,\n    278, 278, 556, 556, 556, 556, 556, 556, 556, 584, 611, 556, 556, 556, 556, 500,\n    556, 500\n];\n/**\n * `Arial bold` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.arialBoldWidth = [\n    278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333,\n    278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584,\n    584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833,\n    722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333,\n    584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889,\n    611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389,\n    584, 0, 556, 0, 278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333, 1000, 0,\n    611, 0, 0, 278, 278, 500, 500, 350, 556, 1000, 333, 1000, 556, 333, 944, 0,\n    500, 667, 0, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 0,\n    737, 333, 400, 584, 333, 333, 333, 611, 556, 278, 333, 333, 365, 556, 834, 834,\n    834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278,\n    278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667,\n    667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278,\n    278, 278, 611, 611, 611, 611, 611, 611, 611, 584, 611, 611, 611, 611, 611, 556,\n    611, 556\n];\n/**\n * `Fixed` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.fixedWidth = [\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600\n];\n/**\n * `Times` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.timesRomanWidth = [\n    250, 333, 408, 500, 500, 833, 778, 180, 333, 333, 500, 564, 250, 333,\n    250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 564, 564,\n    564, 444, 921, 722, 667, 667, 722, 611, 556, 722, 722, 333, 389, 722, 611, 889,\n    722, 722, 556, 722, 667, 556, 611, 722, 722, 944, 722, 722, 611, 333, 278, 333,\n    469, 500, 333, 444, 500, 444, 500, 444, 333, 500, 500, 278, 278, 500, 278, 778,\n    500, 500, 500, 500, 333, 389, 278, 500, 500, 722, 500, 500, 444, 480, 200, 480,\n    541, 0, 500, 0, 333, 500, 444, 1000, 500, 500, 333, 1000, 556, 333, 889, 0,\n    611, 0, 0, 333, 333, 444, 444, 350, 500, 1000, 333, 980, 389, 333, 722, 0,\n    444, 722, 0, 333, 500, 500, 500, 500, 200, 500, 333, 760, 276, 500, 564, 0,\n    760, 333, 400, 564, 300, 300, 333, 500, 453, 250, 333, 300, 310, 500, 750, 750,\n    750, 444, 722, 722, 722, 722, 722, 722, 889, 667, 611, 611, 611, 611, 333, 333,\n    333, 333, 722, 722, 722, 722, 722, 722, 722, 564, 722, 722, 722, 722, 722, 722,\n    556, 500, 444, 444, 444, 444, 444, 444, 667, 444, 444, 444, 444, 444, 278, 278,\n    278, 278, 500, 500, 500, 500, 500, 500, 500, 564, 500, 500, 500, 500, 500, 500,\n    500, 500\n];\n/**\n * `Times bold` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.timesRomanBoldWidth = [\n    250, 333, 555, 500, 500, 1000, 833, 278, 333, 333, 500, 570, 250, 333,\n    250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570,\n    570, 500, 930, 722, 667, 722, 722, 667, 611, 778, 778, 389, 500, 778, 667, 944,\n    722, 778, 611, 778, 722, 556, 667, 722, 722, 1000, 722, 722, 667, 333, 278, 333,\n    581, 500, 333, 500, 556, 444, 556, 444, 333, 500, 556, 278, 333, 556, 278, 833,\n    556, 500, 556, 556, 444, 389, 333, 556, 500, 722, 500, 500, 444, 394, 220, 394,\n    520, 0, 500, 0, 333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333, 1000, 0,\n    667, 0, 0, 333, 333, 500, 500, 350, 500, 1000, 333, 1000, 389, 333, 722, 0,\n    444, 722, 0, 333, 500, 500, 500, 500, 220, 500, 333, 747, 300, 500, 570, 0,\n    747, 333, 400, 570, 300, 300, 333, 556, 540, 250, 333, 300, 330, 500, 750, 750,\n    750, 500, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 389, 389,\n    389, 389, 722, 722, 778, 778, 778, 778, 778, 570, 778, 722, 722, 722, 722, 722,\n    611, 556, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278,\n    278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 500,\n    556, 500\n];\n/**\n * `Times italic` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.timesRomanItalicWidth = [\n    250, 333, 420, 500, 500, 833, 778, 214, 333, 333, 500, 675, 250, 333,\n    250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 675, 675,\n    675, 500, 920, 611, 611, 667, 722, 611, 611, 722, 722, 333, 444, 667, 556, 833,\n    667, 722, 611, 722, 611, 500, 556, 722, 611, 833, 611, 556, 556, 389, 278, 389,\n    422, 500, 333, 500, 500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722,\n    500, 500, 500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400, 275, 400,\n    541, 0, 500, 0, 333, 500, 556, 889, 500, 500, 333, 1000, 500, 333, 944, 0,\n    556, 0, 0, 333, 333, 556, 556, 350, 500, 889, 333, 980, 389, 333, 667, 0,\n    389, 556, 0, 389, 500, 500, 500, 500, 275, 500, 333, 760, 276, 500, 675, 0,\n    760, 333, 400, 675, 300, 300, 333, 500, 523, 250, 333, 300, 310, 500, 750, 750,\n    750, 500, 611, 611, 611, 611, 611, 611, 889, 667, 611, 611, 611, 611, 333, 333,\n    333, 333, 722, 667, 722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556,\n    611, 500, 500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444, 278, 278,\n    278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500, 500, 500, 500, 444,\n    500, 444\n];\n/**\n * `Times bold italic` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.timesRomanBoldItalicWidths = [\n    250, 389, 555, 500, 500, 833, 778, 278, 333, 333, 500, 570, 250, 333,\n    250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570,\n    570, 500, 832, 667, 667, 667, 722, 667, 667, 722, 778, 389, 500, 667, 611, 889,\n    722, 722, 611, 722, 667, 556, 611, 722, 667, 889, 667, 611, 611, 333, 278, 333,\n    570, 500, 333, 500, 500, 444, 500, 444, 333, 500, 556, 278, 278, 500, 278, 778,\n    556, 500, 500, 500, 389, 389, 278, 556, 444, 667, 500, 444, 389, 348, 220, 348,\n    570, 0, 500, 0, 333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333, 944, 0,\n    611, 0, 0, 333, 333, 500, 500, 350, 500, 1000, 333, 1000, 389, 333, 722, 0,\n    389, 611, 0, 389, 500, 500, 500, 500, 220, 500, 333, 747, 266, 500, 606, 0,\n    747, 333, 400, 570, 300, 300, 333, 576, 500, 250, 333, 300, 300, 500, 750, 750,\n    750, 500, 667, 667, 667, 667, 667, 667, 944, 667, 667, 667, 667, 667, 389, 389,\n    389, 389, 722, 722, 722, 722, 722, 722, 722, 570, 722, 722, 722, 722, 722, 611,\n    611, 500, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278,\n    278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 444,\n    500, 444\n];\n/**\n * `Symbol` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.symbolWidth = [\n    250, 333, 713, 500, 549, 833, 778, 439, 333, 333, 500, 549, 250, 549,\n    250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278,\n    549, 549, 549, 444, 549, 722, 667, 722, 612, 611, 763, 603, 722, 333,\n    631, 722, 686, 889, 722, 722, 768, 741, 556, 592, 611, 690, 439, 768,\n    645, 795, 611, 333, 863, 333, 658, 500, 500, 631, 549, 549, 494, 439,\n    521, 411, 603, 329, 603, 549, 549, 576, 521, 549, 549, 521, 549, 603,\n    439, 576, 713, 686, 493, 686, 494, 480, 200, 480, 549, 750, 620, 247,\n    549, 167, 713, 500, 753, 753, 753, 753, 1042, 987, 603, 987, 603, 400,\n    549, 411, 549, 549, 713, 494, 460, 549, 549, 549, 549, 1000, 603, 1000,\n    658, 823, 686, 795, 987, 768, 768, 823, 768, 768, 713, 713, 713, 713,\n    713, 713, 713, 768, 713, 790, 790, 890, 823, 549, 250, 713, 603, 603,\n    1042, 987, 603, 987, 603, 494, 329, 790, 790, 786, 713, 384, 384, 384,\n    384, 384, 384, 494, 494, 494, 494, 329, 274, 686, 686, 686, 384, 384,\n    384, 384, 384, 384, 494, 494, 494, -1\n];\n/**\n * `Zip dingbats` widths table.\n * @private\n */\nPdfStandardFontMetricsFactory.zapfDingbatsWidth = [\n    278, 974, 961, 974, 980, 719, 789, 790, 791, 690, 960, 939, 549, 855,\n    911, 933, 911, 945, 974, 755, 846, 762, 761, 571, 677, 763, 760, 759,\n    754, 494, 552, 537, 577, 692, 786, 788, 788, 790, 793, 794, 816, 823,\n    789, 841, 823, 833, 816, 831, 923, 744, 723, 749, 790, 792, 695, 776,\n    768, 792, 759, 707, 708, 682, 701, 826, 815, 789, 789, 707, 687, 696,\n    689, 786, 787, 713, 791, 785, 791, 873, 761, 762, 762, 759, 759, 892,\n    892, 788, 784, 438, 138, 277, 415, 392, 392, 668, 668, 390, 390, 317,\n    317, 276, 276, 509, 509, 410, 410, 234, 234, 334, 334, 732, 544, 544,\n    910, 667, 760, 760, 776, 595, 694, 626, 788, 788, 788, 788, 788, 788,\n    788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788,\n    788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788,\n    788, 788, 788, 788, 788, 788, 894, 838, 1016, 458, 748, 924, 748, 918,\n    927, 928, 928, 834, 873, 828, 924, 924, 917, 930, 931, 463, 883, 836,\n    836, 867, 867, 696, 696, 874, 874, 760, 946, 771, 865, 771, 888, 967,\n    888, 831, 873, 927, 970, 918\n];\n\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfStandardFont extends PdfFont {\n    constructor(fontFamilyPrototype, size, style) {\n        super(size, style);\n        /**\n         * Gets `ascent` of the font.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Gets `encodings` for internal class use.\n         * @hidden\n         * @private\n         */\n        this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding',\n            'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n        if ((typeof fontFamilyPrototype === 'number') && (typeof style === 'undefined')) {\n            this.constructor(fontFamilyPrototype, size, PdfFontStyle.Regular);\n        }\n        else if ((typeof fontFamilyPrototype === 'number') && (typeof style !== 'undefined')) {\n            super(size, style);\n            this.pdfFontFamily = fontFamilyPrototype;\n            this.checkStyle();\n            this.initializeInternals();\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont) && (typeof style === 'undefined')) {\n            this.constructor(fontFamilyPrototype.fontFamily, size, fontFamilyPrototype.style);\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont) && (typeof style !== 'undefined')) {\n            this.constructor(fontFamilyPrototype.fontFamily, size, style);\n        }\n    }\n    //Properties\n    /**\n     * Gets the `FontFamily`.\n     * @private\n     */\n    get fontFamily() {\n        return this.pdfFontFamily;\n    }\n    //methods\n    /**\n     * Checks font `style` of the font.\n     * @private\n     */\n    checkStyle() {\n        if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n            let style = this.style;\n            style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n            this.setStyle(style);\n        }\n    }\n    /**\n     * Returns `width` of the line.\n     * @public\n     */\n    getLineWidth(line, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException:line');\n        }\n        let width = 0;\n        let name = this.name;\n        line = PdfStandardFont.convert(line);\n        for (let i = 0, len = line.length; i < len; i++) {\n            let ch = line[i];\n            let charWidth = this.getCharWidthInternal(ch, format);\n            width += charWidth;\n        }\n        let size = this.metrics.getSize(format);\n        width *= (PdfFont.charSizeMultiplier * size);\n        width = this.applyFormatSettings(line, format, width);\n        return width;\n    }\n    /**\n     * Checks whether fonts are `equals`.\n     * @private\n     */\n    equalsToFont(font) {\n        let equal = false;\n        let stFont = font;\n        if (stFont != null) {\n            let fontFamilyEqual = (this.fontFamily === stFont.fontFamily);\n            let lineReducer = (~(PdfFontStyle.Underline | PdfFontStyle.Strikeout));\n            let styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n            equal = (fontFamilyEqual && styleEqual);\n        }\n        return equal;\n    }\n    /**\n     * `Initializes` font internals..\n     * @private\n     */\n    initializeInternals() {\n        let equalFont = null;\n        // if (PdfDocument.EnableCache) {\n        equalFont = PdfDocument.cache.search(this);\n        // }\n        let internals = null;\n        // if (equalFont == null) {\n        // Create font metrics.\n        let metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n        this.metrics = metrics;\n        internals = this.createInternals();\n        this.setInternals(internals);\n    }\n    /**\n     * `Creates` font`s dictionary.\n     * @private\n     */\n    createInternals() {\n        let dictionary = new PdfDictionary();\n        dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n        dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n        if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n            let encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n            dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n        }\n        return dictionary;\n    }\n    /**\n     * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n     * @private\n     */\n    getCharWidthInternal(charCode, format) {\n        let width = 0;\n        let code = 0;\n        code = charCode.charCodeAt(0);\n        if (this.name === '0' || this.name === '1' || this.name === '2' ||\n            this.name === '3' || this.name === '4') {\n            code = code - PdfStandardFont.charOffset;\n        }\n        code = (code >= 0 && code !== 128) ? code : 0;\n        let metrics = this.metrics;\n        let widthTable = metrics.widthTable;\n        width = widthTable.items(code);\n        return width;\n    }\n    /**\n     * `Converts` the specified text.\n     * @private\n     */\n    static convert(text) {\n        return text;\n    }\n}\n//Constants\n/**\n * First character `position`.\n * @private\n */\nPdfStandardFont.charOffset = 32;\n\n/**\n * `PdfAnnotation` class represents the base class for annotation objects.\n * @private\n */\nclass PdfAnnotation {\n    constructor(arg1) {\n        // Fields\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * `Color` of the annotation\n         * @private\n         */\n        this.pdfColor = new PdfColor(255, 255, 255);\n        /**\n         * `Bounds` of the annotation.\n         * @private\n         */\n        this.rectangle = new RectangleF(0, 0, 0, 0);\n        /**\n         * Parent `page` of the annotation.\n         * @private\n         */\n        this.pdfPage = null;\n        /**\n         * `Brush of the text` of the annotation.\n         * @default new PdfSolidBrush(new PdfColor(0, 0, 0))\n         * @private\n         */\n        this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        /**\n         * `Font of the text` of the annotation.\n         * @default new PdfStandardFont(PdfFontFamily.TimesRoman, 10)\n         * @private\n         */\n        this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);\n        /**\n         * `StringFormat of the text` of the annotation.\n         * @default new PdfStringFormat(PdfTextAlignment.Left)\n         * @private\n         */\n        this.format = new PdfStringFormat(PdfTextAlignment.Left);\n        /**\n         * `Text` of the annotation.\n         * @private\n         */\n        this.content = '';\n        /**\n         * Internal variable to store `dictionary`.\n         * @private\n         */\n        this.pdfDictionary = new PdfDictionary();\n        /**\n         * To specifying the `Inner color` with which to fill the annotation\n         * @private\n         */\n        this.internalColor = new PdfColor();\n        /**\n         * `opacity or darkness` of the annotation.\n         * @private\n         * @default 1.0\n         */\n        this.darkness = 1.0;\n        if (typeof arg1 === 'undefined') {\n            this.initialize();\n        }\n        else {\n            this.initialize();\n            this.bounds = arg1;\n        }\n    }\n    // Properties\n    /**\n     * `Color` of the annotation\n     * @private\n     */\n    get color() {\n        return this.pdfColor;\n    }\n    set color(value) {\n        this.pdfColor = value;\n    }\n    /**\n     * To specifying the `Inner color` with which to fill the annotation\n     * @private\n     */\n    get innerColor() {\n        return this.internalColor;\n    }\n    set innerColor(value) {\n        this.internalColor = value;\n    }\n    /**\n     * `bounds` of the annotation.\n     * @private\n     */\n    get bounds() {\n        return this.rectangle;\n    }\n    set bounds(value) {\n        this.rectangle = value;\n    }\n    /**\n     * Parent `page` of the annotation.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    /**\n     * To specifying the `Font of the text` in the annotation.\n     * @private\n     */\n    get font() {\n        return this.textFont;\n    }\n    set font(value) {\n        this.textFont = value;\n    }\n    /**\n     * To specifying the `StringFormat of the text` in the annotation.\n     * @private\n     */\n    get stringFormat() {\n        return this.format;\n    }\n    set stringFormat(value) {\n        this.format = value;\n    }\n    /**\n     * To specifying the `Brush of the text` in the annotation.\n     * @private\n     */\n    get brush() {\n        return this.textBrush;\n    }\n    set brush(value) {\n        this.textBrush = value;\n    }\n    /**\n     * `Text` of the annotation.\n     * @private\n     */\n    get text() {\n        return this.content;\n    }\n    set text(value) {\n        this.content = value;\n        this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));\n    }\n    /**\n     * Internal variable to store `dictionary`.\n     * @hidden\n     */\n    get dictionary() {\n        return this.pdfDictionary;\n    }\n    set dictionary(value) {\n        this.pdfDictionary = value;\n    }\n    // Implementation\n    /**\n     * `Initialize` the annotation event handler and specifies the type of the annotation.\n     * @private\n     */\n    initialize() {\n        this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this);\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));\n    }\n    /**\n     * Sets related `page` of the annotation.\n     * @private\n     */\n    setPage(page) {\n        this.pdfPage = page;\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));\n    }\n    /**\n     * Handles the `BeginSave` event of the Dictionary.\n     * @private\n     */\n    beginSave() {\n        this.save();\n    }\n    /**\n     * `Saves` an annotation.\n     * @private\n     */\n    /* tslint:disable */\n    save() {\n        let nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n        let section = this.pdfPage.section;\n        let initialHeight = nativeRectangle.height;\n        let tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));\n        nativeRectangle.x = tempLoacation.x;\n        nativeRectangle.width = tempLoacation.x + nativeRectangle.width;\n        nativeRectangle.y = (tempLoacation.y - this.page.document.pageSettings.margins.top);\n        nativeRectangle.height = nativeRectangle.y - initialHeight;\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle));\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));\n    }\n    /* tslint:enable */\n    // IPdfWrapper Members\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get element() {\n        return this.pdfDictionary;\n    }\n}\n\n/**\n * `PdfLinkAnnotation` class represents the ink annotation class.\n * @private\n */\nclass PdfLinkAnnotation extends PdfAnnotation {\n    constructor(rectangle) {\n        if (typeof rectangle === 'undefined') {\n            super();\n        }\n        else {\n            super(rectangle);\n        }\n    }\n    // Implementation\n    /**\n     * `Initializes` annotation object.\n     * @private\n     */\n    initialize() {\n        super.initialize();\n        this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));\n    }\n}\n\n/**\n * Represents base class for `link annotations` with associated action.\n * @private\n */\nclass PdfActionLinkAnnotation extends PdfLinkAnnotation {\n    // Constructors\n    /**\n     * Specifies the constructor for `ActionLinkAnnotation`.\n     * @private\n     */\n    constructor(rectangle) {\n        super(rectangle);\n        // Fields\n        /**\n         * Internal variable to store annotation's `action`.\n         * @default null\n         * @private\n         */\n        this.pdfAction = null;\n    }\n    //Public method\n    /**\n     * get and set the `action`.\n     * @hidden\n     */\n    getSetAction(value) {\n        if (typeof value === 'undefined') {\n            return this.pdfAction;\n        }\n        else {\n            this.pdfAction = value;\n        }\n    }\n}\n\n/**\n * `PdfDocumentLinkAnnotation` class represents an annotation object with holds link on another location within a document.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create new pages\n * let page1 : PdfPage = document.pages.add();\n * let page2 : PdfPage = document.pages.add();\n * // create a new rectangle\n * let bounds : RectangleF = new RectangleF({x : 10, y : 200}, {width : 300, height : 25});\n * //\n * // create a new document link annotation\n * let documentLinkAnnotation : PdfDocumentLinkAnnotation = new PdfDocumentLinkAnnotation(bounds);\n * // set the annotation text\n * documentLinkAnnotation.text = 'Document link annotation';\n * // set the destination\n * documentLinkAnnotation.destination = new PdfDestination(page2);\n * // set the documentlink annotation location\n * documentLinkAnnotation.destination.location = new PointF(10, 0);\n * // add this annotation to a new page\n * page1.annotations.add(documentLinkAnnotation);\n * //\n * // save the document to disk\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfDocumentLinkAnnotation extends PdfLinkAnnotation {\n    constructor(rectangle, destination) {\n        super(rectangle);\n        // Fields\n        /**\n         * `Destination` of the annotation.\n         * @default null\n         * @private\n         */\n        this.pdfDestination = null;\n        if (typeof destination !== 'undefined') {\n            this.destination = destination;\n        }\n    }\n    // Properties\n    /**\n     * Gets or sets the `destination` of the annotation.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create new pages\n     * let page1 : PdfPage = document.pages.add();\n     * let page2 : PdfPage = document.pages.add();\n     * // create a new rectangle\n     * let bounds : RectangleF = new RectangleF({x : 10, y : 200}, {width : 300, height : 25});\n     * //\n     * // create a new document link annotation\n     * let documentLinkAnnotation : PdfDocumentLinkAnnotation = new PdfDocumentLinkAnnotation(bounds);\n     * // set the annotation text\n     * documentLinkAnnotation.text = 'Document link annotation';\n     * // set the destination\n     * documentLinkAnnotation.destination = new PdfDestination(page2);\n     * // set the documentlink annotation location\n     * documentLinkAnnotation.destination.location = new PointF(10, 0);\n     * // add this annotation to a new page\n     * page1.annotations.add(documentLinkAnnotation);\n     * //\n     * // save the document to disk\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @default null\n     */\n    get destination() {\n        return this.pdfDestination;\n    }\n    set destination(value) {\n        // if (this.pdfDestination !== value) {\n        this.pdfDestination = value;\n        // }\n    }\n    // Implementation\n    /**\n     * `Saves` annotation object.\n     * @private\n     */\n    save() {\n        super.save();\n        if (this.pdfDestination != null) {\n            this.dictionary.items.setValue(this.dictionaryProperties.dest, this.pdfDestination.element);\n        }\n    }\n    /**\n     * `Clone` the document link annotation.\n     * @private\n     */\n    clone() {\n        let annot = new PdfDocumentLinkAnnotation(this.bounds, this.destination);\n        annot.color = this.color;\n        annot.brush = this.brush;\n        annot.destination = this.destination;\n        annot.font = this.font;\n        return annot;\n    }\n}\n\n/**\n * public Enum for `PdfLayoutType`.\n * @private\n */\nvar PdfLayoutType;\n(function (PdfLayoutType) {\n    /**\n     * Specifies the type of `Paginate`.\n     * @private\n     */\n    PdfLayoutType[PdfLayoutType[\"Paginate\"] = 0] = \"Paginate\";\n    /**\n     * Specifies the type of `OnePage`.\n     * @private\n     */\n    PdfLayoutType[PdfLayoutType[\"OnePage\"] = 1] = \"OnePage\";\n})(PdfLayoutType || (PdfLayoutType = {}));\n/**\n * public Enum for `PdfLayoutBreakType`.\n * @private\n */\nvar PdfLayoutBreakType;\n(function (PdfLayoutBreakType) {\n    /**\n     * Specifies the type of `FitPage`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitPage\"] = 0] = \"FitPage\";\n    /**\n     * Specifies the type of `FitElement`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitElement\"] = 1] = \"FitElement\";\n    /**\n     * Specifies the type of `FitColumnsToPage`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitColumnsToPage\"] = 2] = \"FitColumnsToPage\";\n})(PdfLayoutBreakType || (PdfLayoutBreakType = {}));\n\n/**\n * ElementLayouter.ts class for EJ2-PDF\n */\n/**\n * Base class for `elements lay outing`.\n * @private\n */\nclass ElementLayouter {\n    // Constructor\n    /**\n     * Initializes a new instance of the `ElementLayouter` class.\n     * @private\n     */\n    constructor(element) {\n        this.layoutElement = element;\n    }\n    // Properties\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get elements() {\n        return this.layoutElement;\n    }\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    getElement() {\n        return this.layoutElement;\n    }\n    layout(param, isBoundsChanged) {\n        if (typeof isBoundsChanged === 'boolean' && isBoundsChanged === true) {\n            return this.layoutInternal(param, true);\n        }\n        else {\n            return this.layoutInternal(param);\n        }\n    }\n    /**\n     * Returns the `next page`.\n     * @private\n     */\n    getNextPage(currentPage) {\n        let section = currentPage.section;\n        let nextPage = section.add();\n        return nextPage;\n    }\n}\nclass PdfLayoutFormat {\n    // Properties\n    /**\n     * Gets or sets `layout` type of the element.\n     * @private\n     */\n    get layout() {\n        if (typeof this.layoutType === 'undefined' || this.layoutType == null) {\n            this.layoutType = PdfLayoutType.Paginate;\n        }\n        return this.layoutType;\n    }\n    set layout(value) {\n        this.layoutType = value;\n    }\n    /**\n     * Gets or sets `break` type of the element.\n     * @private\n     */\n    get break() {\n        if (typeof this.breakType === 'undefined' || this.boundsSet == null) {\n            this.breakType = PdfLayoutBreakType.FitPage;\n        }\n        return this.breakType;\n    }\n    set break(value) {\n        this.breakType = value;\n    }\n    /**\n     * Gets or sets the `bounds` on the next page.\n     * @private\n     */\n    get paginateBounds() {\n        if (typeof this.layoutPaginateBounds === 'undefined' && this.layoutPaginateBounds == null) {\n            this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);\n        }\n        return this.layoutPaginateBounds;\n    }\n    set paginateBounds(value) {\n        this.layoutPaginateBounds = value;\n        this.boundsSet = true;\n    }\n    /**\n     * Gets a value indicating whether [`use paginate bounds`].\n     * @private\n     */\n    get usePaginateBounds() {\n        if (typeof this.boundsSet === 'undefined' || this.boundsSet == null) {\n            this.boundsSet = false;\n        }\n        return this.boundsSet;\n    }\n    constructor(baseFormat) {\n        if (typeof baseFormat === 'undefined') {\n            //\n        }\n        else {\n            this.break = baseFormat.break;\n            this.layout = baseFormat.layout;\n            this.paginateBounds = baseFormat.paginateBounds;\n            this.boundsSet = baseFormat.usePaginateBounds;\n        }\n    }\n}\nclass PdfLayoutParams {\n    // Properties\n    /**\n     * Gets or sets the layout `page` for the element.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    set page(value) {\n        this.pdfPage = value;\n    }\n    /**\n     * Gets or sets layout `bounds` for the element.\n     * @private\n     */\n    get bounds() {\n        return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);\n    }\n    set bounds(value) {\n        this.layoutBounds = value;\n    }\n    /**\n     * Gets or sets `layout settings` for the element.\n     * @private\n     */\n    get format() {\n        return this.layoutFormat;\n    }\n    set format(value) {\n        this.layoutFormat = value;\n    }\n}\nclass PdfLayoutResult {\n    // Properties\n    /**\n     * Gets the last `page` where the element was drawn.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    /**\n     * Gets the `bounds` of the element on the last page where it was drawn.\n     * @private\n     */\n    get bounds() {\n        return this.layoutBounds;\n    }\n    // Constructors\n    /**\n     * Initializes the new instance of `PdfLayoutResult` class.\n     * @private\n     */\n    constructor(page, bounds) {\n        this.pdfPage = page;\n        this.layoutBounds = bounds;\n    }\n}\n\n/**\n * `PdfLayoutElement` class represents the base class for all elements that can be layout on the pages.\n * @private\n */\nclass PdfLayoutElement {\n    drawHelper(arg2, arg3, arg4, arg5) {\n        if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg2, arg3.x, arg3.y);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            return this.drawHelper(arg2, arg3, arg4, null);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg2, arg3, null);\n        }\n        else if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && arg4 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg2, arg3.x, arg3.y, arg4);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {\n            let width = (arg2.graphics.clientSize.width - arg3);\n            let layoutRectangle = new RectangleF(arg3, arg4, width, 0);\n            return this.drawHelper(arg2, layoutRectangle, arg5);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {\n            this.bEmbedFonts = arg4;\n            return this.drawHelper(arg2, arg3, null);\n        }\n        else {\n            let param = new PdfLayoutParams();\n            let temparg3 = arg3;\n            let temparg4 = arg4;\n            param.page = arg2;\n            param.bounds = temparg3;\n            param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n            let result = this.layout(param);\n            return result;\n        }\n    }\n}\n\n/**\n * TextLayouter.ts class for EJ2-PDF\n */\n/**\n * Class that `layouts the text`.\n * @private\n */\nclass TextLayouter extends ElementLayouter {\n    /**\n     * Gets the layout `element`.\n     * @private\n     */\n    get element() {\n        return super.getElement();\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `TextLayouter` class.\n     * @private\n     */\n    constructor(element) {\n        super(element);\n    }\n    // Implementation\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    layoutInternal(param) {\n        /* tslint:disable */\n        this.format = (this.element.stringFormat != null && typeof this.element.stringFormat !== 'undefined') ? this.element.stringFormat : null;\n        let currentPage = param.page;\n        let currentBounds = param.bounds;\n        let text = this.element.value;\n        let result = null;\n        let pageResult = new TextPageLayoutResult();\n        pageResult.page = currentPage;\n        pageResult.remainder = text;\n        for (;;) {\n            pageResult = this.layoutOnPage(text, currentPage, currentBounds, param);\n            result = this.getLayoutResult(pageResult);\n            break;\n        }\n        /* tslint:enable */\n        return result;\n    }\n    /**\n     * Raises `PageLayout` event if needed.\n     * @private\n     */\n    getLayoutResult(pageResult) {\n        let result = new PdfTextLayoutResult(pageResult.page, pageResult.bounds, pageResult.remainder, pageResult.lastLineBounds);\n        return result;\n    }\n    /* tslint:disable */\n    /**\n     * `Layouts` the text on the page.\n     * @private\n     */\n    layoutOnPage(text, currentPage, currentBounds, param) {\n        let result = new TextPageLayoutResult();\n        result.remainder = text;\n        result.page = currentPage;\n        currentBounds = this.checkCorrectBounds(currentPage, currentBounds);\n        let layouter = new PdfStringLayouter();\n        let stringResult = layouter.layout(text, this.element.font, this.format, currentBounds, currentPage.getClientSize().height, false, new SizeF(0, 0));\n        let textFinished = (stringResult.remainder == null);\n        let doesntFit = (param.format.break === PdfLayoutBreakType.FitElement);\n        let canDraw = !(doesntFit || stringResult.empty);\n        // Draw the text.\n        let graphics = currentPage.graphics;\n        let brush = this.element.getBrush();\n        if (this.element instanceof PdfTextWebLink) {\n            brush.color = new PdfColor(0, 0, 255);\n        }\n        graphics.drawStringLayoutResult(stringResult, this.element.font, this.element.pen, brush, currentBounds, this.format);\n        let lineInfo = stringResult.lines[stringResult.lineCount - 1];\n        result.lastLineBounds = graphics.getLineBounds(stringResult.lineCount - 1, stringResult, this.element.font, currentBounds, this.format);\n        result.bounds = this.getTextPageBounds(currentPage, currentBounds, stringResult);\n        result.remainder = stringResult.remainder;\n        result.end = (textFinished);\n        return result;\n    }\n    /* tslint:enable */\n    /**\n     * `Corrects current bounds` on the page.\n     * @private\n     */\n    checkCorrectBounds(currentPage, currentBounds) {\n        let pageSize = currentPage.graphics.clientSize;\n        currentBounds.height = (currentBounds.height > 0) ? currentBounds.height : pageSize.height - currentBounds.y;\n        return currentBounds;\n    }\n    /**\n     * Returns a `rectangle` where the text was printed on the page.\n     * @private\n     */\n    /* tslint:disable */\n    getTextPageBounds(currentPage, currentBounds, stringResult) {\n        let textSize = stringResult.actualSize;\n        let x = currentBounds.x;\n        let y = currentBounds.y;\n        let width = (currentBounds.width > 0) ? currentBounds.width : textSize.width;\n        let height = textSize.height;\n        let shiftedRect = currentPage.graphics.checkCorrectLayoutRectangle(textSize, currentBounds.x, currentBounds.y, this.format);\n        // if (currentBounds.width <= 0) {\n        x = shiftedRect.x;\n        // }\n        let verticalShift = currentPage.graphics.getTextVerticalAlignShift(textSize.height, currentBounds.height, this.format);\n        y += verticalShift;\n        let bounds = new RectangleF(x, y, width, height);\n        return bounds;\n    }\n}\nclass TextPageLayoutResult {\n}\nclass PdfTextLayoutResult extends PdfLayoutResult {\n    // Properties\n    /**\n     * Gets a value that contains the `text` that was not printed.\n     * @private\n     */\n    get remainder() {\n        return this.remainderText;\n    }\n    /**\n     * Gets a value that indicates the `bounds` of the last line that was printed on the page.\n     * @private\n     */\n    get lastLineBounds() {\n        return this.lastLineTextBounds;\n    }\n    // Constructors\n    /**\n     * Initializes the new instance of `PdfTextLayoutResult` class.\n     * @private\n     */\n    constructor(page, bounds, remainder, lastLineBounds) {\n        super(page, bounds);\n        this.remainderText = remainder;\n        this.lastLineTextBounds = lastLineBounds;\n    }\n}\n\n/**\n * PdfTextElement.ts class for EJ2-PDF\n */\n/**\n * `PdfTextElement` class represents the text area with the ability to span several pages\n * and inherited from the 'PdfLayoutElement' class.\n * @private\n */\nclass PdfTextElement extends PdfLayoutElement {\n    constructor(arg1, arg2, arg3, arg4, arg5) {\n        super();\n        // Fields\n        /**\n         * `Text` data.\n         * @private\n         */\n        this.content = '';\n        /**\n         * `Value` of text data.\n         * @private\n         */\n        this.elementValue = '';\n        /**\n         * indicate whether the drawText with PointF overload is called or not.\n         * @default false\n         * @private\n         */\n        this.hasPointOverload = false;\n        /**\n         * indicate whether the PdfGridCell value is `PdfTextElement`\n         * @default false\n         * @private\n         */\n        this.isPdfTextElement = false;\n        if (typeof arg1 === 'undefined') {\n            //\n        }\n        else if (typeof arg1 === 'string' && typeof arg2 === 'undefined') {\n            super();\n            this.content = arg1;\n            this.elementValue = arg1;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && typeof arg3 === 'undefined') {\n            super();\n            this.content = arg1;\n            this.elementValue = arg1;\n            this.pdfFont = arg2;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfPen && typeof arg4 === 'undefined') {\n            super();\n            this.content = arg1;\n            this.elementValue = arg1;\n            this.pdfFont = arg2;\n            this.pdfPen = arg3;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && typeof arg4 === 'undefined') {\n            super();\n            this.content = arg1;\n            this.elementValue = arg1;\n            this.pdfFont = arg2;\n            this.pdfBrush = arg3;\n        }\n        else {\n            super();\n            this.content = arg1;\n            this.elementValue = arg1;\n            this.pdfFont = arg2;\n            this.pdfPen = arg3;\n            this.pdfBrush = arg4;\n            this.format = arg5;\n        }\n    }\n    // Properties\n    /**\n     * Gets or sets a value indicating the `text` that should be printed.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * //\n     * // set the link text\n     * textLink.text = 'Google';\n     * //\n     * // set the font\n     * textLink.font = font;\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get text() {\n        return this.content;\n    }\n    set text(value) {\n        this.elementValue = value;\n        this.content = value;\n    }\n    //get value\n    /**\n     * Gets or sets a `value` indicating the text that should be printed.\n     * @private\n     */\n    get value() {\n        return this.elementValue;\n    }\n    //get pen\n    /**\n     * Gets or sets a `PdfPen` that determines the color, width, and style of the text\n     * @private\n     */\n    get pen() {\n        return this.pdfPen;\n    }\n    //Set pen value\n    set pen(value) {\n        this.pdfPen = value;\n    }\n    //get brush\n    /**\n     * Gets or sets the `PdfBrush` that will be used to draw the text with color and texture.\n     * @private\n     */\n    get brush() {\n        return this.pdfBrush;\n    }\n    //Set brush value\n    set brush(value) {\n        this.pdfBrush = value;\n    }\n    //get font\n    /**\n     * Gets or sets a `PdfFont` that defines the text format.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * // set the link text\n     * textLink.text = 'Google';\n     * //\n     * // set the font\n     * textLink.font = font;\n     * //\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get font() {\n        return this.pdfFont;\n    }\n    set font(value) {\n        this.pdfFont = value;\n        if (this.pdfFont instanceof PdfStandardFont && this.content != null) {\n            this.elementValue = PdfStandardFont.convert(this.content);\n        }\n        else {\n            this.elementValue = this.content;\n        }\n    }\n    /**\n     * Gets or sets the `PdfStringFormat` that will be used to set the string format\n     * @private\n     */\n    get stringFormat() {\n        return this.format;\n    }\n    set stringFormat(value) {\n        this.format = value;\n    }\n    // Implementation\n    /**\n     * Gets a `brush` for drawing.\n     * @private\n     */\n    getBrush() {\n        return (this.pdfBrush == null || typeof this.pdfBrush === 'undefined') ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;\n    }\n    // /**\n    //  * `Draws` an element on the Graphics.\n    //  * @private\n    //  */\n    // public drawInternal(graphics : PdfGraphics) : void {\n    //     graphics.drawString(this.elementValue, this.pdfFont, this.pdfPen, this.getBrush(), 0, 0, this.stringFormat);\n    // }\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    layout(param) {\n        let layouter = new TextLayouter(this);\n        let result = layouter.layout(param);\n        return result;\n    }\n    drawText(arg2, arg3, arg4, arg5) {\n        if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && typeof arg4 === 'undefined') {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3.x, arg3.y);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3, arg4, null);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {\n            return this.drawText(arg2, arg3, null);\n        }\n        else if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && arg4 instanceof PdfLayoutFormat) {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3.x, arg3.y, arg4);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {\n            this.hasPointOverload = true;\n            let width = (arg2.graphics.clientSize.width - arg3);\n            let layoutRectangle = new RectangleF(arg3, arg4, width, 0);\n            return this.drawText(arg2, layoutRectangle, arg5);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {\n            return this.drawText(arg2, arg3, null);\n        }\n        else {\n            let layout = new PdfStringLayouter();\n            if (this.hasPointOverload) {\n                let stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF((arg2.graphics.clientSize.width - arg3.x), 0), true, arg2.graphics.clientSize);\n                let layoutResult;\n                let param = new PdfLayoutParams();\n                let temparg3 = arg3;\n                let temparg4 = arg4;\n                param.page = arg2;\n                param.bounds = temparg3;\n                param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n                if (stringLayoutResult.lines.length > 1) {\n                    this.text = stringLayoutResult.layoutLines[0].text;\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        let previousPosition = new PointF(param.bounds.x, param.bounds.y);\n                        layoutResult = this.layout(param);\n                        let bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                        for (let i = 1; i < stringLayoutResult.lines.length; i++) {\n                            param.page = layoutResult.page;\n                            param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n                            this.text = stringLayoutResult.layoutLines[i].text;\n                            if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {\n                                param.page = param.page.graphics.getNextPage();\n                                if (previousPosition.y > (layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height)) {\n                                    bounds = new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                                }\n                                else {\n                                    bounds = new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                                }\n                                param.bounds = bounds;\n                            }\n                            layoutResult = this.layout(param);\n                            if (i !== (stringLayoutResult.lines.length - 1)) {\n                                bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                            }\n                            else {\n                                let lineWidth = this.font.measureString(this.text, this.format).width;\n                                layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);\n                            }\n                        }\n                    }\n                    return layoutResult;\n                }\n                else {\n                    let lineSize = this.font.measureString(this.text, this.format);\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        layoutResult = this.layout(param);\n                        layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);\n                    }\n                    return layoutResult;\n                }\n            }\n            else {\n                let layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), false, arg2.graphics.clientSize);\n                let result;\n                let param = new PdfLayoutParams();\n                let temparg3 = arg3;\n                let temparg4 = arg4;\n                param.page = arg2;\n                param.bounds = temparg3;\n                param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n                if (layoutResult.lines.length > 1) {\n                    this.text = layoutResult.layoutLines[0].text;\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        let previousPosition = new PointF(param.bounds.x, param.bounds.y);\n                        result = this.layout(param);\n                        let bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                        for (let i = 1; i < layoutResult.lines.length; i++) {\n                            param.page = result.page;\n                            param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n                            this.text = layoutResult.layoutLines[i].text;\n                            if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {\n                                param.page = param.page.graphics.getNextPage();\n                                if (previousPosition.y > (result.page.graphics.clientSize.height - result.bounds.height)) {\n                                    bounds = new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                                }\n                                else {\n                                    bounds = new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);\n                                }\n                                param.bounds = bounds;\n                            }\n                            result = this.layout(param);\n                            if (i !== (layoutResult.lines.length - 1)) {\n                                bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                            }\n                            else {\n                                let lineWidth = this.font.measureString(this.text, this.format).width;\n                                result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);\n                            }\n                        }\n                    }\n                    return result;\n                }\n                else {\n                    let lineSize = this.font.measureString(this.text, this.format);\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        result = this.layout(param);\n                        result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n    calculateResultBounds(result, lineWidth, maximumWidth, startPosition) {\n        if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n            result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n            result.bounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n            result.bounds.x = startPosition + (maximumWidth - lineWidth);\n            result.bounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n            result.bounds.x = startPosition;\n            result.bounds.width = maximumWidth;\n        }\n        else {\n            result.bounds.width = startPosition;\n            result.bounds.width = lineWidth;\n        }\n        return result;\n    }\n}\n\n/**\n * `PdfUriAnnotation` class represents the Uri annotation.\n * @private\n */\nclass PdfUriAnnotation extends PdfActionLinkAnnotation {\n    /**\n     * Get `action` of the annotation.\n     * @private\n     */\n    get uriAction() {\n        if (typeof this.pdfUriAction === 'undefined') {\n            this.pdfUriAction = new PdfUriAction();\n        }\n        return this.pdfUriAction;\n    }\n    // Properties\n    /**\n     * Gets or sets the `Uri` address.\n     * @private\n     */\n    get uri() {\n        return this.uriAction.uri;\n    }\n    set uri(value) {\n        if (this.uriAction.uri !== value) {\n            this.uriAction.uri = value;\n        }\n    }\n    /**\n     * Gets or sets the `action`.\n     * @private\n     */\n    get action() {\n        return this.getSetAction();\n    }\n    set action(value) {\n        this.getSetAction(value);\n        this.uriAction.next = value;\n    }\n    constructor(rectangle, uri) {\n        super(rectangle);\n        if (typeof uri !== 'undefined') {\n            this.uri = uri;\n        }\n    }\n    // Implementation\n    /**\n     * `Initializes` annotation object.\n     * @private\n     */\n    initialize() {\n        super.initialize();\n        this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));\n        let tempPrimitive = this.uriAction.element;\n        this.dictionary.items.setValue(this.dictionaryProperties.a, this.uriAction.element);\n    }\n}\n\n/**\n * `PdfTextWebLink` class represents the class for text web link annotation.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // create the font\n * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n * //\n * // create the Text Web Link\n * let textLink : PdfTextWebLink = new PdfTextWebLink();\n * // set the hyperlink\n * textLink.url = 'http://www.google.com';\n * // set the link text\n * textLink.text = 'Google';\n * // set the font\n * textLink.font = font;\n * // draw the hyperlink in PDF page\n * textLink.draw(page1, new PointF(10, 40));\n * //\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nclass PdfTextWebLink extends PdfTextElement {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfTextWebLink` class.\n     * @private\n     */\n    constructor() {\n        super();\n        // Fields\n        /**\n         * Internal variable to store `Url`.\n         * @default ''\n         * @private\n         */\n        this.uniformResourceLocator = '';\n        /**\n         * Internal variable to store `Uri Annotation` object.\n         * @default null\n         * @private\n         */\n        this.uriAnnotation = null;\n        /**\n         * Checks whether the drawTextWebLink method with `PointF` overload is called or not.\n         * If it set as true, then the start position of each lines excluding firest line is changed as (0, Y).\n         * @private\n         * @hidden\n         */\n        this.recalculateBounds = false;\n        this.defaultBorder = new PdfArray();\n        for (let i = 0; i < 3; i++) {\n            this.defaultBorder.add(new PdfNumber(0));\n        }\n    }\n    // Properties\n    /**\n     * Gets or sets the `Uri address`.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * //\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * //\n     * // set the link text\n     * textLink.text = 'Google';\n     * // set the font\n     * textLink.font = font;\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get url() {\n        return this.uniformResourceLocator;\n    }\n    set url(value) {\n        if (value.length === 0) {\n            throw new Error('ArgumentException : Url - string can not be empty');\n        }\n        this.uniformResourceLocator = value;\n    }\n    draw(arg1, arg2) {\n        if (arg1 instanceof PdfPage) {\n            let layout = new PdfStringLayouter();\n            let previousFontStyle = this.font.style;\n            if (arg2 instanceof PointF) {\n                this.recalculateBounds = true;\n                this.font.style = PdfFontStyle.Underline;\n                let layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF((arg1.graphics.clientSize.width - arg2.x), 0), true, arg1.graphics.clientSize);\n                if (layoutResult.lines.length === 1) {\n                    let textSize = this.font.measureString(this.value);\n                    let rect = new RectangleF(arg2, textSize);\n                    rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x);\n                    this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n                    this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n                    arg1.annotations.add(this.uriAnnotation);\n                    let result = this.drawText(arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return result;\n                }\n                else {\n                    let result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return result;\n                }\n            }\n            else {\n                let layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), false, new SizeF(0, 0));\n                this.font.style = PdfFontStyle.Underline;\n                if (layoutResult.lines.length === 1) {\n                    let textSize = this.font.measureString(this.value);\n                    let rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);\n                    rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x);\n                    this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n                    this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n                    arg1.annotations.add(this.uriAnnotation);\n                    let returnValue = this.drawText(arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return returnValue;\n                }\n                else {\n                    let returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return returnValue;\n                }\n            }\n        }\n        else {\n            let page = new PdfPage();\n            page = arg1.page;\n            return this.draw(page, arg2);\n        }\n    }\n    /* tslint:enable */\n    //Private methods\n    /**\n     * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified location.\n     * @private\n     */\n    drawMultipleLineWithPoint(result, page, location) {\n        let layoutResult;\n        for (let i = 0; i < result.layoutLines.length; i++) {\n            let size = this.font.measureString(result.lines[i].text);\n            let bounds = new RectangleF(location, size);\n            if (i !== 0) {\n                bounds.x = 0;\n            }\n            this.text = result.lines[i].text;\n            if (bounds.y + size.height > page.graphics.clientSize.height) {\n                if (i !== 0) {\n                    page = page.graphics.getNextPage();\n                    bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height);\n                    location.y = 0;\n                }\n                else {\n                    break;\n                }\n            }\n            bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x);\n            this.uriAnnotation = new PdfUriAnnotation(bounds, this.url);\n            this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n            page.annotations.add(this.uriAnnotation);\n            if (i !== 0) {\n                layoutResult = this.drawText(page, new PointF(0, bounds.y));\n            }\n            else {\n                layoutResult = this.drawText(page, bounds.x, bounds.y);\n            }\n            location.y += size.height;\n        }\n        return layoutResult;\n    }\n    /**\n     * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified bounds.\n     * @private\n     */\n    drawMultipleLineWithBounds(result, page, bounds) {\n        let layoutResult;\n        for (let i = 0; i < result.layoutLines.length; i++) {\n            let size = this.font.measureString(result.lines[i].text);\n            let internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);\n            internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x);\n            this.text = result.lines[i].text;\n            if (bounds.y + size.height > page.graphics.clientSize.height) {\n                if (i !== 0) {\n                    page = page.graphics.getNextPage();\n                    bounds = new RectangleF(bounds.x, 0, bounds.width, size.height);\n                    internalBounds.y = 0;\n                }\n                else {\n                    break;\n                }\n            }\n            this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url);\n            this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n            page.annotations.add(this.uriAnnotation);\n            layoutResult = this.drawText(page, bounds);\n            bounds.y += size.height;\n        }\n        return layoutResult;\n    }\n    /* tslint:disable */\n    calculateBounds(currentBounds, lineWidth, maximumWidth, startPosition) {\n        if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n            currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n            currentBounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n            currentBounds.x = startPosition + (maximumWidth - lineWidth);\n            currentBounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n            currentBounds.x = startPosition;\n            currentBounds.width = maximumWidth;\n        }\n        else {\n            currentBounds.width = startPosition;\n            currentBounds.width = lineWidth;\n        }\n        return currentBounds;\n    }\n}\n\n/**\n * PdfNumbersConvertor.ts class for EJ2-PDF\n * @private\n */\n/**\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\n * @private\n */\nclass PdfNumbersConvertor {\n    // Static methods\n    /**\n     * Convert string value from page number with correct format.\n     * @private\n     */\n    static convert(intArabic, numberStyle) {\n        let result = '';\n        switch (numberStyle) {\n            case PdfNumberStyle.None:\n                result = '';\n                break;\n            case PdfNumberStyle.Numeric:\n                result = intArabic.toString();\n                break;\n            case PdfNumberStyle.LowerLatin:\n                result = this.arabicToLetter(intArabic).toLowerCase();\n                break;\n            case PdfNumberStyle.LowerRoman:\n                result = this.arabicToRoman(intArabic).toLowerCase();\n                break;\n            case PdfNumberStyle.UpperLatin:\n                result = this.arabicToLetter(intArabic);\n                break;\n            case PdfNumberStyle.UpperRoman:\n                result = this.arabicToRoman(intArabic);\n                break;\n        }\n        return result;\n    }\n    /**\n     * Converts `arabic to roman` letters.\n     * @private\n     */\n    static arabicToRoman(intArabic) {\n        let retval = '';\n        retval += this.generateNumber(intArabic, 1000, 'M');\n        retval += this.generateNumber(intArabic, 900, 'CM');\n        retval += this.generateNumber(intArabic, 500, 'D');\n        retval += this.generateNumber(intArabic, 400, 'CD');\n        retval += this.generateNumber(intArabic, 100, 'C');\n        retval += this.generateNumber(intArabic, 90, 'XC');\n        retval += this.generateNumber(intArabic, 50, 'L');\n        retval += this.generateNumber(intArabic, 40, 'XL');\n        retval += this.generateNumber(intArabic, 10, 'X');\n        retval += this.generateNumber(intArabic, 9, 'IX');\n        retval += this.generateNumber(intArabic, 5, 'V');\n        retval += this.generateNumber(intArabic, 4, 'IV');\n        retval += this.generateNumber(intArabic, 1, 'I');\n        return retval.toString();\n    }\n    /**\n     * Converts `arabic to normal letters`.\n     * @private\n     */\n    static arabicToLetter(arabic) {\n        let stack = this.convertToLetter(arabic);\n        let result = '';\n        while (stack.length > 0) {\n            let num = stack.pop();\n            result = this.appendChar(result, num);\n        }\n        return result.toString();\n    }\n    /**\n     * Generate a string value of an input number.\n     * @private\n     */\n    static generateNumber(value, magnitude, letter) {\n        let numberstring = '';\n        while (value >= magnitude) {\n            value -= magnitude;\n            numberstring += letter;\n        }\n        return numberstring.toString();\n    }\n    /**\n     * Convert a input number into letters.\n     * @private\n     */\n    static convertToLetter(arabic) {\n        if (arabic <= 0) {\n            throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\n        }\n        let stack = [];\n        while (arabic > this.letterLimit) {\n            let remainder = arabic % this.letterLimit;\n            if (remainder === 0.0) {\n                arabic = arabic / this.letterLimit - 1;\n                remainder = this.letterLimit;\n            }\n            else {\n                arabic /= this.letterLimit;\n            }\n            stack.push(remainder);\n        }\n        stack.push(arabic);\n        return stack;\n    }\n    /**\n     * Convert number to actual string value.\n     * @private\n     */\n    static appendChar(builder, value) {\n        let letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\n        builder += letter;\n        return builder;\n    }\n}\n// Fields\n/**\n * numbers of letters in english [readonly].\n * @default = 26.0\n * @private\n */\nPdfNumbersConvertor.letterLimit = 26.0;\n/**\n * Resturns `acsii start index` value.\n * @default 64\n * @private\n */\nPdfNumbersConvertor.acsiiStartIndex = (65 - 1);\n\n/**\n * Represent class to store information about `template and value pairs`.\n * @private\n */\nclass PdfTemplateValuePair {\n    constructor(template, value) {\n        // Fields\n        /**\n         * Internal variable to store template.\n         * @default null\n         * @private\n         */\n        this.pdfTemplate = null;\n        /**\n         * Intenal variable to store value.\n         * @private\n         */\n        this.content = '';\n        if (typeof template === 'undefined') {\n            //\n        }\n        else {\n            this.template = template;\n            this.value = value;\n        }\n    }\n    // Properties\n    /**\n     * Gets or sets the template.\n     * @private\n     */\n    get template() {\n        return this.pdfTemplate;\n    }\n    set template(value) {\n        this.pdfTemplate = value;\n    }\n    /**\n     * Gets or sets the value.\n     * @private\n     */\n    get value() {\n        return this.content;\n    }\n    set value(value) {\n        this.content = value;\n    }\n}\n\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\n/**\n * Represents automatic field which has the same value within the `PdfGraphics`.\n */\nclass PdfMultipleValueField extends PdfAutomaticField {\n    constructor() {\n        super();\n        //  Fields\n        /**\n         * Stores the instance of dictionary values of `graphics and template value pair`.\n         * @private\n         */\n        this.list = new TemporaryDictionary();\n    }\n    // Implementation\n    /* tslint:disable */\n    performDraw(graphics, location, scalingX, scalingY) {\n        super.performDrawHelper(graphics, location, scalingX, scalingY);\n        let value = this.getValue(graphics);\n        let template = new PdfTemplate(this.getSize());\n        this.list.setValue(graphics, new PdfTemplateValuePair(template, value));\n        let size = this.getSize();\n        template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);\n        let drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n        graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));\n    }\n}\n\n/**\n * Represents PDF document `page number field`.\n * @public\n */\nclass PdfPageNumberField extends PdfMultipleValueField {\n    constructor(font, arg2) {\n        super();\n        // Fields\n        /**\n         * Stores the number style of the page number field.\n         * @private\n         */\n        this.internalNumberStyle = PdfNumberStyle.Numeric;\n        if (typeof arg2 === 'undefined') {\n            this.font = font;\n        }\n        else if (arg2 instanceof PdfBrush) {\n            this.font = font;\n            this.brush = arg2;\n        }\n        else {\n            this.font = font;\n            this.bounds = arg2;\n        }\n    }\n    // Properties\n    /**\n     * Gets and sets the number style of the page number field.\n     * @private\n     */\n    get numberStyle() {\n        return this.internalNumberStyle;\n    }\n    set numberStyle(value) {\n        this.internalNumberStyle = value;\n    }\n    /**\n     * Return the `string` value of page number field.\n     * @public\n     */\n    getValue(graphics) {\n        let result = null;\n        let page = this.getPageFromGraphics(graphics);\n        result = this.internalGetValue(page);\n        return result;\n    }\n    /**\n     * Internal method to `get actual value of page number`.\n     * @private\n     */\n    internalGetValue(page) {\n        let document = page.document;\n        let pageIndex = document.pages.indexOf(page) + 1;\n        return PdfNumbersConvertor.convert(pageIndex, this.numberStyle);\n    }\n}\n\n/**\n * PdfCompositeField.ts class for EJ2-PDF\n */\n/**\n * Represents class which can concatenate multiple automatic fields into single string.\n */\nclass PdfCompositeField extends PdfMultipleValueField {\n    // Constructor\n    /**\n     * Initialize a new instance of `PdfCompositeField` class.\n     * @param font Font of the field.\n     * @param brush Color of the field.\n     * @param text Content of the field.\n     * @param list List of the automatic fields in specific order based on the text content.\n     */\n    constructor(font, brush, text, ...list) {\n        super();\n        // Fields\n        /**\n         * Stores the array of automatic fields.\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the text value of the field.\n         * @private\n         */\n        this.internalText = '';\n        this.font = font;\n        this.brush = brush;\n        this.text = text;\n        this.automaticFields = list;\n    }\n    // Properties\n    /**\n     * Gets and sets the content of the field.\n     * @public\n     */\n    get text() {\n        return this.internalText;\n    }\n    set text(value) {\n        this.internalText = value;\n    }\n    /**\n     * Gets and sets the list of the field to drawn.\n     * @public\n     */\n    get automaticFields() {\n        return this.internalAutomaticFields;\n    }\n    set automaticFields(value) {\n        this.internalAutomaticFields = value;\n    }\n    // Implementation\n    /**\n     * Return the actual value generated from the list of automatic fields.\n     * @public\n     */\n    getValue(graphics) {\n        let text = this.text.toString();\n        if (typeof this.automaticFields !== 'undefined' && this.automaticFields != null && this.automaticFields.length > 0) {\n            for (let i = 0; i < this.automaticFields.length; i++) {\n                let automaticField = this.automaticFields[i];\n                text = text.replace('{' + i + '}', automaticField.getValue(graphics));\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * PdfSingleValueField.ts class for EJ2-PDF\n */\n/**\n * Represents automatic field which has the same value in the whole document.\n */\nclass PdfSingleValueField extends PdfAutomaticField {\n    // Constructors\n    constructor() {\n        super();\n        // Fields\n        /* tslint:disable */\n        this.list = new TemporaryDictionary();\n        /* tslint:enable */\n        this.painterGraphics = [];\n    }\n    performDraw(graphics, location, scalingX, scalingY) {\n        super.performDrawHelper(graphics, location, scalingX, scalingY);\n        let page = this.getPageFromGraphics(graphics);\n        let document = page.document;\n        let textValue = this.getValue(graphics);\n        /* tslint:disable */\n        if (this.list.containsKey(document)) {\n            let pair = this.list.getValue(document);\n            let drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n            graphics.drawPdfTemplate(pair.template, drawLocation, new SizeF(pair.template.width * scalingX, pair.template.height * scalingY));\n            this.painterGraphics.push(graphics);\n        }\n        else {\n            let size = this.getSize();\n            let template = new PdfTemplate(size);\n            this.list.setValue(document, new PdfTemplateValuePair(template, textValue));\n            template.graphics.drawString(textValue, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);\n            let drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n            graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));\n            this.painterGraphics.push(graphics);\n        }\n        /* tslint:enable */\n    }\n}\n\n/**\n * PdfPageCountField.ts class for EJ2-PDF\n */\n/**\n * Represents total PDF document page count automatic field.\n */\nclass PdfPageCountField extends PdfSingleValueField {\n    constructor(font, arg2) {\n        super();\n        // Fields\n        /**\n         * Stores the number style of the field.\n         * @private\n         */\n        this.internalNumberStyle = PdfNumberStyle.Numeric;\n        if (typeof arg2 === 'undefined') {\n            this.font = font;\n        }\n        else if (arg2 instanceof PdfBrush) {\n            this.font = font;\n            this.brush = arg2;\n        }\n        else {\n            this.font = font;\n            this.bounds = arg2;\n        }\n    }\n    // Properties\n    /**\n     * Gets and sets the number style of the field.\n     * @public\n     */\n    get numberStyle() {\n        return this.internalNumberStyle;\n    }\n    set numberStyle(value) {\n        this.internalNumberStyle = value;\n    }\n    // Implementation\n    /**\n     * Return the actual value of the content to drawn.\n     * @public\n     */\n    getValue(graphics) {\n        let result = null;\n        let page = this.getPageFromGraphics(graphics);\n        let document = page.section.parent.document;\n        let count = document.pages.count;\n        result = PdfNumbersConvertor.convert(count, this.numberStyle);\n        return result;\n    }\n}\n\n/**\n * public Enum for `PdfDestinationMode`.\n * @private\n */\nvar PdfDestinationMode;\n(function (PdfDestinationMode) {\n    /**\n     * Specifies the type of `Location`.\n     * @private\n     */\n    PdfDestinationMode[PdfDestinationMode[\"Location\"] = 0] = \"Location\";\n    /**\n     * Specifies the type of `FitToPage`.\n     * @private\n     */\n    PdfDestinationMode[PdfDestinationMode[\"FitToPage\"] = 1] = \"FitToPage\";\n    /**\n     * Specifies the type of `FitR`.\n     * @private\n     */\n    PdfDestinationMode[PdfDestinationMode[\"FitR\"] = 2] = \"FitR\";\n})(PdfDestinationMode || (PdfDestinationMode = {}));\n\n/**\n * `PdfDestination` class represents an anchor in the document\n * where bookmarks or annotations can direct when clicked.\n */\nclass PdfDestination {\n    constructor(arg1, arg2) {\n        // Fields\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Type of the `destination`.\n         * @private\n         */\n        this.destinationMode = PdfDestinationMode.Location;\n        /**\n         * `Zoom` factor.\n         * @private\n         * @default 0\n         */\n        this.zoomFactor = 0;\n        /**\n         * `Location` of the destination.\n         * @default new PointF() with 0 ,0 as co-ordinates\n         * @private\n         */\n        this.destinationLocation = new PointF(0, 0);\n        /**\n         * `Bounds` of the destination as RectangleF.\n         * @default RectangleF.Empty\n         * @private\n         */\n        this.bounds = new RectangleF();\n        /**\n         * Pdf primitive representing `this` object.\n         * @private\n         */\n        this.array = new PdfArray();\n        if (typeof arg2 === 'undefined') {\n            let angle = PdfPageRotateAngle.RotateAngle0;\n            this.destinationLocation = new PointF(0, this.destinationLocation.y);\n            this.pdfPage = arg1;\n        }\n        else if (arg2 instanceof PointF) {\n            this.constructor(arg1);\n            this.destinationLocation = arg2;\n        }\n        else {\n            this.constructor(arg1);\n            this.bounds = arg2;\n        }\n    }\n    // Properties\n    /**\n     * Gets and Sets the `zoom` factor.\n     * @private\n     */\n    get zoom() {\n        return this.zoomFactor;\n    }\n    set zoom(value) {\n        this.zoomFactor = value;\n        this.initializePrimitive();\n    }\n    /**\n     * Gets and Sets the `page` object.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    set page(value) {\n        this.pdfPage = value;\n        this.initializePrimitive();\n    }\n    /**\n     * Gets and Sets the destination `mode`.\n     * @private\n     */\n    get mode() {\n        return this.destinationMode;\n    }\n    set mode(value) {\n        this.destinationMode = value;\n        this.initializePrimitive();\n    }\n    /**\n     * Gets and Sets the `location`.\n     * @private\n     */\n    get location() {\n        return this.destinationLocation;\n    }\n    set location(value) {\n        this.destinationLocation = value;\n        this.initializePrimitive();\n    }\n    /**\n     * `Translates` co-ordinates to PDF co-ordinate system (lower/left).\n     * @private\n     */\n    pointToNativePdf(page, point) {\n        let section = page.section;\n        return section.pointToNativePdf(page, point);\n    }\n    /**\n     * `In fills` array by correct values.\n     * @private\n     */\n    initializePrimitive() {\n        this.array.clear();\n        this.array.add(new PdfReferenceHolder(this.pdfPage));\n        switch (this.destinationMode) {\n            case PdfDestinationMode.Location:\n                let simplePage = this.pdfPage;\n                let point = new PointF();\n                point = this.pointToNativePdf(simplePage, this.destinationLocation);\n                this.array.add(new PdfName(this.dictionaryProperties.xyz));\n                this.array.add(new PdfNumber(point.x));\n                this.array.add(new PdfNumber(point.y));\n                this.array.add(new PdfNumber(this.zoomFactor));\n                break;\n            case PdfDestinationMode.FitToPage:\n                this.array.add(new PdfName(this.dictionaryProperties.fit));\n                break;\n        }\n    }\n    /**\n     * Gets the `element` representing this object.\n     * @private\n     */\n    get element() {\n        this.initializePrimitive();\n        return this.array;\n    }\n}\n\n/**\n * PdfPageTemplateElement.ts class for EJ2-Pdf\n */\n/**\n * Describes a `page template` object that can be used as header/footer, watermark or stamp.\n */\nclass PdfPageTemplateElement {\n    // Properties\n    /**\n     * Gets or sets the `dock style` of the page template element.\n     * @private\n     */\n    get dock() {\n        return this.dockStyle;\n    }\n    set dock(value) {\n        // if (this.dockStyle !== value && this.Type === TemplateType.None) {\n        this.dockStyle = value;\n        // Reset alignment.\n        this.resetAlignment();\n        // }\n    }\n    /**\n     * Gets or sets `alignment` of the page template element.\n     * @private\n     */\n    get alignment() {\n        return this.alignmentStyle;\n    }\n    set alignment(value) {\n        // if (this.alignmentStyle !== value) {\n        this.setAlignment(value);\n        // }\n    }\n    /**\n     * Indicates whether the page template is located `in front of the page layers or behind of it`.\n     * @private\n     */\n    get foreground() {\n        return this.isForeground;\n    }\n    set foreground(value) {\n        // if (this.foreground !== value) {\n        this.isForeground = value;\n        // }\n    }\n    /**\n     * Indicates whether the page template is located `behind of the page layers or in front of it`.\n     * @private\n     */\n    get background() {\n        return !this.isForeground;\n    }\n    set background(value) {\n        this.isForeground = !value;\n    }\n    /**\n     * Gets or sets `location` of the page template element.\n     * @private\n     */\n    get location() {\n        return this.currentLocation;\n    }\n    set location(value) {\n        if (this.type === TemplateType.None) {\n            this.currentLocation = value;\n        }\n        else {\n            //\n        }\n    }\n    /**\n     * Gets or sets `X` co-ordinate of the template element on the page.\n     * @private\n     */\n    get x() {\n        let value = (typeof this.currentLocation !== 'undefined') ? this.currentLocation.x : 0;\n        return value;\n    }\n    set x(value) {\n        if (this.type === TemplateType.None) {\n            this.currentLocation.x = value;\n        }\n        else {\n            //\n        }\n    }\n    /**\n     * Gets or sets `Y` co-ordinate of the template element on the page.\n     * @private\n     */\n    get y() {\n        let value = (typeof this.currentLocation !== 'undefined') ? this.currentLocation.y : 0;\n        return value;\n    }\n    set y(value) {\n        if (this.type === TemplateType.None) {\n            this.currentLocation.y = value;\n        }\n        else {\n            //\n        }\n    }\n    /**\n     * Gets or sets `size` of the page template element.\n     * @private\n     */\n    get size() {\n        return this.template.size;\n    }\n    set size(value) {\n        if (this.type === TemplateType.None) {\n            this.template.reset(value);\n        }\n    }\n    /**\n     * Gets or sets `width` of the page template element.\n     * @private\n     */\n    get width() {\n        return this.template.width;\n    }\n    set width(value) {\n        if (this.template.width !== value && this.type === TemplateType.None) {\n            let size = this.template.size;\n            size.width = value;\n            this.template.reset(size);\n        }\n    }\n    /**\n     * Gets or sets `height` of the page template element.\n     * @private\n     */\n    get height() {\n        return this.template.height;\n    }\n    set height(value) {\n        if (this.template.height !== value && this.type === TemplateType.None) {\n            let size = this.template.size;\n            size.height = value;\n            this.template.reset(size);\n        }\n    }\n    /**\n     * Gets `graphics` context of the page template element.\n     * @private\n     */\n    get graphics() {\n        return this.template.graphics;\n    }\n    /**\n     * Gets Pdf `template` object.\n     * @private\n     */\n    get template() {\n        // if (typeof this.pdfTemplate === 'undefined' || this.pdfTemplate == null) {\n        //     this.pdfTemplate = new PdfTemplate(this.size);\n        // }\n        return this.pdfTemplate;\n    }\n    /**\n     * Gets or sets `type` of the usage of this page template.\n     * @private\n     */\n    get type() {\n        return this.templateType;\n    }\n    set type(value) {\n        this.updateDocking(value);\n        this.templateType = value;\n    }\n    /**\n     * Gets or sets `bounds` of the page template.\n     * @public\n     */\n    get bounds() {\n        return new RectangleF(new PointF(this.x, this.y), this.size);\n    }\n    set bounds(value) {\n        if (this.type === TemplateType.None) {\n            this.location = new PointF(value.x, value.y);\n            this.size = new SizeF(value.width, value.height);\n        }\n    }\n    /* tslint:disable */\n    constructor(arg1, arg2, arg3, arg4, arg5) {\n        if (arg1 instanceof RectangleF && typeof arg2 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg1.width, arg1.height);\n        }\n        else if (arg1 instanceof RectangleF && arg2 instanceof PdfPage && typeof arg3 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg1.width, arg1.height, arg2);\n        }\n        else if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg2.width, arg2.height);\n        }\n        else if (arg1 instanceof PointF && arg2 instanceof SizeF && arg3 instanceof PdfPage && typeof arg4 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg2.width, arg2.height, arg3);\n        }\n        else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {\n            this.constructor(arg1.width, arg1.height);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.constructor(0, 0, arg1, arg2);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && arg3 instanceof PdfPage && typeof arg4 === 'undefined') {\n            this.constructor(0, 0, arg1, arg2, arg3);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            this.x = arg1;\n            this.y = arg2;\n            this.pdfTemplate = new PdfTemplate(arg3, arg4);\n        }\n        else {\n            this.x = arg1;\n            this.y = arg2;\n            this.pdfTemplate = new PdfTemplate(arg3, arg4);\n            // this.graphics.colorSpace = this.page.document.colorSpace;\n        }\n        /* tslint:enable */\n    }\n    /**\n     * `Updates Dock` property if template is used as header/footer.\n     * @private\n     */\n    updateDocking(type) {\n        if (type !== TemplateType.None) {\n            switch (type) {\n                case TemplateType.Top:\n                    this.dock = PdfDockStyle.Top;\n                    break;\n                case TemplateType.Bottom:\n                    this.dock = PdfDockStyle.Bottom;\n                    break;\n                case TemplateType.Left:\n                    this.dock = PdfDockStyle.Left;\n                    break;\n                case TemplateType.Right:\n                    this.dock = PdfDockStyle.Right;\n                    break;\n            }\n            this.resetAlignment();\n        }\n    }\n    /**\n     * `Resets alignment` of the template.\n     * @private\n     */\n    resetAlignment() {\n        this.alignment = PdfAlignmentStyle.None;\n    }\n    /**\n     * `Sets alignment` of the template.\n     * @private\n     */\n    setAlignment(alignment) {\n        if (this.dock === PdfDockStyle.None) {\n            this.alignmentStyle = alignment;\n        }\n        else {\n            // Template is docked and alignment has been changed.\n            let canBeSet = false;\n            switch (this.dock) {\n                case PdfDockStyle.Left:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.MiddleLeft ||\n                        alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Top:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.TopCenter ||\n                        alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Right:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.MiddleRight ||\n                        alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Bottom:\n                    canBeSet = (alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.BottomCenter\n                        || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Fill:\n                    canBeSet = (alignment === PdfAlignmentStyle.MiddleCenter || alignment === PdfAlignmentStyle.None);\n                    break;\n            }\n            if (canBeSet) {\n                this.alignmentStyle = alignment;\n            }\n        }\n    }\n    /**\n     * Draws the template.\n     * @private\n     */\n    draw(layer, document) {\n        let page = layer.page;\n        let bounds = this.calculateBounds(page, document);\n        if (bounds.x === -0) {\n            bounds.x = 0;\n        }\n        layer.graphics.drawPdfTemplate(this.template, new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n    }\n    /**\n     * Calculates bounds of the page template.\n     * @private\n     */\n    calculateBounds(page, document) {\n        let result = this.bounds;\n        if (this.alignmentStyle !== PdfAlignmentStyle.None) {\n            result = this.getAlignmentBounds(page, document);\n        }\n        else if (this.dockStyle !== PdfDockStyle.None) {\n            result = this.getDockBounds(page, document);\n        }\n        return result;\n    }\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    getAlignmentBounds(page, document) {\n        let result = this.bounds;\n        if (this.type === TemplateType.None) {\n            result = this.getSimpleAlignmentBounds(page, document);\n        }\n        else {\n            result = this.getTemplateAlignmentBounds(page, document);\n        }\n        return result;\n    }\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    getSimpleAlignmentBounds(page, document) {\n        let bounds = this.bounds;\n        let pdfSection = page.section;\n        let actualBounds = pdfSection.getActualBounds(document, page, false);\n        let x = this.x;\n        let y = this.y;\n        switch (this.alignmentStyle) {\n            case PdfAlignmentStyle.TopLeft:\n                x = 0;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.TopCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.TopRight:\n                x = actualBounds.width - this.width;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.MiddleLeft:\n                x = 0;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleRight:\n                x = actualBounds.width - this.width;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.BottomLeft:\n                x = 0;\n                y = actualBounds.height - this.height;\n                break;\n            case PdfAlignmentStyle.BottomCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = actualBounds.height - this.height;\n                break;\n            case PdfAlignmentStyle.BottomRight:\n                x = actualBounds.width - this.width;\n                y = actualBounds.height - this.height;\n                break;\n        }\n        bounds.x = x;\n        bounds.y = y;\n        return bounds;\n    }\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    getTemplateAlignmentBounds(page, document) {\n        let result = this.bounds;\n        let section = page.section;\n        let actualBounds = section.getActualBounds(document, page, false);\n        let x = this.x;\n        let y = this.y;\n        switch (this.alignmentStyle) {\n            case PdfAlignmentStyle.TopLeft:\n                if (this.type === TemplateType.Left) {\n                    x = -actualBounds.x;\n                    y = 0;\n                }\n                else if (this.type === TemplateType.Top) {\n                    x = -actualBounds.x;\n                    y = -actualBounds.y;\n                }\n                break;\n            case PdfAlignmentStyle.TopCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = -actualBounds.y;\n                break;\n            case PdfAlignmentStyle.TopRight:\n                if (this.type === TemplateType.Right) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = 0;\n                }\n                else if (this.type === TemplateType.Top) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = -actualBounds.y;\n                }\n                break;\n            case PdfAlignmentStyle.MiddleLeft:\n                x = -actualBounds.x;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleRight:\n                x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.BottomLeft:\n                if (this.type === TemplateType.Left) {\n                    x = -actualBounds.x;\n                    y = actualBounds.height - this.height;\n                }\n                else if (this.type === TemplateType.Bottom) {\n                    x = -actualBounds.x;\n                    y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                }\n                break;\n            case PdfAlignmentStyle.BottomCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                break;\n            case PdfAlignmentStyle.BottomRight:\n                if (this.type === TemplateType.Right) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = actualBounds.height - this.height;\n                }\n                else if (this.type === TemplateType.Bottom) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                }\n                break;\n        }\n        result.x = x;\n        result.y = y;\n        return result;\n    }\n    /**\n     * Calculates bounds according to the docking.\n     * @private\n     */\n    getDockBounds(page, document) {\n        let result = this.bounds;\n        if (this.type === TemplateType.None) {\n            result = this.getSimpleDockBounds(page, document);\n        }\n        else {\n            result = this.getTemplateDockBounds(page, document);\n        }\n        return result;\n    }\n    /**\n     * Calculates bounds according to the docking.\n     * @private\n     */\n    getSimpleDockBounds(page, document) {\n        let result = this.bounds;\n        let section = page.section;\n        let actualBounds = section.getActualBounds(document, page, false);\n        let x = this.x;\n        let y = this.y;\n        let width = this.width;\n        let height = this.height;\n        switch (this.dockStyle) {\n            case PdfDockStyle.Left:\n                x = 0;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Top:\n                x = 0;\n                y = 0;\n                width = actualBounds.width;\n                height = this.height;\n                break;\n            case PdfDockStyle.Right:\n                x = actualBounds.width - this.width;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Bottom:\n                x = 0;\n                y = actualBounds.height - this.height;\n                width = actualBounds.width;\n                height = this.height;\n                break;\n            case PdfDockStyle.Fill:\n                x = 0;\n                x = 0;\n                width = actualBounds.width;\n                height = actualBounds.height;\n                break;\n        }\n        result = new RectangleF(x, y, width, height);\n        return result;\n    }\n    /**\n     * Calculates template bounds basing on docking if template is a page template.\n     * @private\n     */\n    getTemplateDockBounds(page, document) {\n        let result = this.bounds;\n        let section = page.section;\n        let actualBounds = section.getActualBounds(document, page, false);\n        let actualSize = section.pageSettings.getActualSize();\n        let x = this.x;\n        let y = this.y;\n        let width = this.width;\n        let height = this.height;\n        switch (this.dockStyle) {\n            case PdfDockStyle.Left:\n                x = -actualBounds.x;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Top:\n                x = -actualBounds.x;\n                y = -actualBounds.y;\n                width = actualSize.width;\n                height = this.height;\n                if (actualBounds.height < 0) {\n                    y = -actualBounds.y + actualSize.height;\n                }\n                break;\n            case PdfDockStyle.Right:\n                x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Bottom:\n                x = -actualBounds.x;\n                y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                width = actualSize.width;\n                height = this.height;\n                if (actualBounds.height < 0) {\n                    y -= actualSize.height;\n                }\n                break;\n            case PdfDockStyle.Fill:\n                x = 0;\n                x = 0;\n                width = actualBounds.width;\n                height = actualBounds.height;\n                break;\n        }\n        result = new RectangleF(x, y, width, height);\n        return result;\n    }\n}\n\n/**\n * PdfBorders.ts class for EJ2-PDF\n */\n/**\n * `PdfBorders` class used represents the cell border of the PDF grid.\n */\nclass PdfBorders {\n    // Properties\n    /**\n     * Gets or sets the `Left`.\n     * @private\n     */\n    get left() {\n        return this.leftPen;\n    }\n    set left(value) {\n        this.leftPen = value;\n    }\n    /**\n     * Gets or sets the `Right`.\n     * @private\n     */\n    get right() {\n        return this.rightPen;\n    }\n    set right(value) {\n        this.rightPen = value;\n    }\n    /**\n     * Gets or sets the `Top`.\n     * @private\n     */\n    get top() {\n        return this.topPen;\n    }\n    set top(value) {\n        this.topPen = value;\n    }\n    /**\n     * Gets or sets the `Bottom`.\n     * @private\n     */\n    get bottom() {\n        return this.bottomPen;\n    }\n    set bottom(value) {\n        this.bottomPen = value;\n    }\n    /**\n     * sets the `All`.\n     * @private\n     */\n    set all(value) {\n        this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;\n    }\n    /**\n     * Gets a value indicating whether this instance `is all`.\n     * @private\n     */\n    get isAll() {\n        return ((this.leftPen === this.rightPen) && (this.leftPen === this.topPen) && (this.leftPen === this.bottomPen));\n    }\n    /**\n     * Gets the `default`.\n     * @private\n     */\n    static get default() {\n        return new PdfBorders();\n    }\n    // Constructor\n    /**\n     * Create a new instance for `PdfBorders` class.\n     * @private\n     */\n    constructor() {\n        let defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;\n        let defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;\n        let defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;\n        let defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;\n        this.leftPen = defaultBorderPenLeft;\n        this.rightPen = defaultBorderPenRight;\n        this.topPen = defaultBorderPenTop;\n        this.bottomPen = defaultBorderPenBottom;\n    }\n}\nclass PdfPaddings {\n    // Properties\n    /**\n     * Gets or sets the `left` value of the edge\n     * @private\n     */\n    get left() {\n        return this.leftPad;\n    }\n    set left(value) {\n        this.leftPad = value;\n    }\n    /**\n     * Gets or sets the `right` value of the edge.\n     * @private\n     */\n    get right() {\n        return this.rightPad;\n    }\n    set right(value) {\n        this.rightPad = value;\n    }\n    /**\n     * Gets or sets the `top` value of the edge\n     * @private\n     */\n    get top() {\n        return this.topPad;\n    }\n    set top(value) {\n        this.topPad = value;\n    }\n    /**\n     * Gets or sets the `bottom` value of the edge.\n     * @private\n     */\n    get bottom() {\n        return this.bottomPad;\n    }\n    set bottom(value) {\n        this.bottomPad = value;\n    }\n    /**\n     * Sets value to all sides `left,right,top and bottom`.s\n     * @private\n     */\n    set all(value) {\n        this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;\n    }\n    constructor(left, right, top, bottom) {\n        if (typeof left === 'undefined') {\n            //5.76 and 0 are taken from ms-word default table margins.\n            this.leftPad = this.rightPad = 5.76;\n            //0.5 is set for top and bottom by default.\n            this.bottom = this.topPad = 0.5;\n        }\n        else {\n            this.leftPad = left;\n            this.rightPad = right;\n            this.topPad = top;\n            this.bottomPad = bottom;\n        }\n    }\n}\n\n/**\n * public Enum for `PdfBorderOverlapStyle`.\n * @private\n */\nvar PdfBorderOverlapStyle;\n(function (PdfBorderOverlapStyle) {\n    /**\n     * Specifies the type of `Overlap`.\n     * @private\n     */\n    PdfBorderOverlapStyle[PdfBorderOverlapStyle[\"Overlap\"] = 0] = \"Overlap\";\n    /**\n     * Specifies the type of `Inside`.\n     * @private\n     */\n    PdfBorderOverlapStyle[PdfBorderOverlapStyle[\"Inside\"] = 1] = \"Inside\";\n})(PdfBorderOverlapStyle || (PdfBorderOverlapStyle = {}));\n\n/**\n * Base class for the `grid style`,\n */\nclass PdfGridStyleBase {\n    // Properties\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get backgroundBrush() {\n        return this.gridBackgroundBrush;\n    }\n    set backgroundBrush(value) {\n        this.gridBackgroundBrush = value;\n    }\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get textBrush() {\n        return this.gridTextBrush;\n    }\n    set textBrush(value) {\n        this.gridTextBrush = value;\n    }\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get textPen() {\n        return this.gridTextPen;\n    }\n    set textPen(value) {\n        this.gridTextPen = value;\n    }\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get font() {\n        return this.gridFont;\n    }\n    set font(value) {\n        this.gridFont = value;\n    }\n}\n/**\n * `PdfGridStyle` class provides customization of the appearance for the 'PdfGrid'.\n */\nclass PdfGridStyle extends PdfGridStyleBase {\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGridStyle` class.\n     * @private\n     */\n    constructor() {\n        super();\n        this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;\n        this.bAllowHorizontalOverflow = false;\n        this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;\n    }\n    //Properties\n    /**\n     * Gets or sets the `cell spacing` of the 'PdfGrid'.\n     * @private\n     */\n    get cellSpacing() {\n        if (typeof this.gridCellSpacing === 'undefined') {\n            this.gridCellSpacing = 0;\n        }\n        return this.gridCellSpacing;\n    }\n    set cellSpacing(value) {\n        this.gridCellSpacing = value;\n    }\n    /**\n     * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.\n     * @private\n     */\n    get horizontalOverflowType() {\n        return this.gridHorizontalOverflowType;\n    }\n    set horizontalOverflowType(value) {\n        this.gridHorizontalOverflowType = value;\n    }\n    /**\n     * Gets or sets a value indicating whether to `allow horizontal overflow`.\n     * @private\n     */\n    get allowHorizontalOverflow() {\n        return this.bAllowHorizontalOverflow;\n    }\n    set allowHorizontalOverflow(value) {\n        this.bAllowHorizontalOverflow = value;\n    }\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get cellPadding() {\n        if (typeof this.gridCellPadding === 'undefined') {\n            this.gridCellPadding = new PdfPaddings();\n        }\n        return this.gridCellPadding;\n    }\n    set cellPadding(value) {\n        if (typeof this.gridCellPadding === 'undefined') {\n            this.gridCellPadding = new PdfPaddings();\n            this.gridCellPadding = value;\n        }\n        else {\n            this.gridCellPadding = value;\n        }\n    }\n    /**\n     * Gets or sets the `border overlap style` of the 'PdfGrid'.\n     * @private\n     */\n    get borderOverlapStyle() {\n        return this.gridBorderOverlapStyle;\n    }\n    set borderOverlapStyle(value) {\n        this.gridBorderOverlapStyle = value;\n    }\n}\n/**\n * `PdfGridCellStyle` class provides customization of the appearance for the 'PdfGridCell'.\n */\nclass PdfGridCellStyle extends PdfGridStyleBase {\n    /**\n     * Initializes a new instance of the `PdfGridCellStyle` class.\n     * @private\n     */\n    constructor() {\n        super();\n        /**\n         * @hidden\n         * @private\n         */\n        this.gridCellBorders = PdfBorders.default;\n    }\n    //Properties\n    /**\n     * Gets the `string format` of the 'PdfGridCell'.\n     * @private\n     */\n    get stringFormat() {\n        return this.format;\n    }\n    set stringFormat(value) {\n        this.format = value;\n    }\n    /**\n     * Gets or sets the `border` of the 'PdfGridCell'.\n     * @private\n     */\n    get borders() {\n        return this.gridCellBorders;\n    }\n    set borders(value) {\n        this.gridCellBorders = value;\n    }\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get cellPadding() {\n        return this.gridCellPadding;\n    }\n    set cellPadding(value) {\n        if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {\n            this.gridCellPadding = new PdfPaddings();\n        }\n        this.gridCellPadding = value;\n    }\n}\n/**\n * `PdfGridRowStyle` class provides customization of the appearance for the `PdfGridRow`.\n */\nclass PdfGridRowStyle {\n    /**\n     * Determine the value of the border is changed or not.\n     * @private\n     */\n    // Properties\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get backgroundBrush() {\n        return this.gridRowBackgroundBrush;\n    }\n    setBackgroundBrush(value) {\n        this.gridRowBackgroundBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (let i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.backgroundBrush = value;\n            }\n        }\n    }\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get textBrush() {\n        return this.gridRowTextBrush;\n    }\n    setTextBrush(value) {\n        this.gridRowTextBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (let i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textBrush = value;\n            }\n        }\n    }\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get textPen() {\n        return this.gridRowTextPen;\n    }\n    setTextPen(value) {\n        this.gridRowTextPen = value;\n        if (typeof this.parent !== 'undefined') {\n            for (let i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textPen = value;\n            }\n        }\n    }\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get font() {\n        return this.gridRowFont;\n    }\n    setFont(value) {\n        this.gridRowFont = value;\n        if (typeof this.parent !== 'undefined') {\n            for (let i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.font = value;\n            }\n        }\n    }\n    /**\n     * Gets or sets the `border` of the current row.\n     * @private\n     */\n    get border() {\n        if (typeof this.gridRowBorder === 'undefined') {\n            this.setBorder(new PdfBorders());\n        }\n        return this.gridRowBorder;\n    }\n    setBorder(value) {\n        this.gridRowBorder = value;\n        if (typeof this.parent !== 'undefined') {\n            for (let i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.borders = value;\n            }\n        }\n    }\n    /**\n     * sets the `parent row` of the current object.\n     * @private\n     */\n    setParent(parent) {\n        this.parent = parent;\n    }\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowStyle` class.\n     * @private\n     */\n    constructor() {\n        //\n    }\n}\n/**\n * public Enum for `PdfHorizontalOverflowType`.\n * @private\n */\nvar PdfHorizontalOverflowType;\n(function (PdfHorizontalOverflowType) {\n    /**\n     * Specifies the type of `NextPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"NextPage\"] = 0] = \"NextPage\";\n    /**\n     * Specifies the type of `LastPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"LastPage\"] = 1] = \"LastPage\";\n})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));\n\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nclass PdfGridCell {\n    constructor(row) {\n        /**\n         * `Width` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellWidth = 0;\n        /**\n         * `Height` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellHeight = 0;\n        /**\n         * Specifies weather the `cell is drawn`.\n         * @default true\n         * @private\n         */\n        this.finsh = true;\n        /**\n         * The `remaining height` of row span.\n         * @default 0\n         * @private\n         */\n        this.rowSpanRemainingHeight = 0;\n        if (typeof row === 'undefined') {\n            this.gridRowSpan = 1;\n            this.colSpan = 1;\n        }\n        else {\n            this.constructor();\n            this.gridRow = row;\n        }\n    }\n    //Properties\n    get isCellMergeContinue() {\n        return this.internalIsCellMergeContinue;\n    }\n    set isCellMergeContinue(value) {\n        this.internalIsCellMergeContinue = value;\n    }\n    get isRowMergeContinue() {\n        return this.internalIsRowMergeContinue;\n    }\n    set isRowMergeContinue(value) {\n        this.internalIsRowMergeContinue = value;\n    }\n    get isCellMergeStart() {\n        return this.internalIsCellMergeStart;\n    }\n    set isCellMergeStart(value) {\n        this.internalIsCellMergeStart = value;\n    }\n    get isRowMergeStart() {\n        return this.internalIsRowMergeStart;\n    }\n    set isRowMergeStart(value) {\n        this.internalIsRowMergeStart = value;\n    }\n    /**\n     * Gets or sets the `remaining string` after the row split between pages.\n     * @private\n     */\n    get remainingString() {\n        return this.remaining;\n    }\n    set remainingString(value) {\n        this.remaining = value;\n    }\n    /**\n     * Gets or sets the `string format`.\n     * @private\n     */\n    get stringFormat() {\n        if (this.format == null) {\n            this.format = new PdfStringFormat();\n        }\n        return this.format;\n    }\n    set stringFormat(value) {\n        this.format = value;\n    }\n    /**\n     * Gets or sets the parent `row`.\n     * @private\n     */\n    get row() {\n        return this.gridRow;\n    }\n    set row(value) {\n        this.gridRow = value;\n    }\n    /**\n     * Gets or sets the `value` of the cell.\n     * @private\n     */\n    get value() {\n        return this.objectValue;\n    }\n    set value(value) {\n        this.objectValue = value;\n    }\n    /**\n     * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get rowSpan() {\n        return this.gridRowSpan;\n    }\n    set rowSpan(value) {\n        if (value < 1) {\n            throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n        }\n        else {\n            this.gridRowSpan = value;\n            this.row.rowSpanExists = true;\n        }\n    }\n    /**\n     * Gets or sets the cell `style`.\n     * @private\n     */\n    get style() {\n        if (this.cellStyle == null) {\n            this.cellStyle = new PdfGridCellStyle();\n        }\n        return this.cellStyle;\n    }\n    set style(value) {\n        this.cellStyle = value;\n    }\n    /**\n     * Gets the `height` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get height() {\n        if (this.cellHeight === 0) {\n            this.cellHeight = this.measureHeight();\n        }\n        return this.cellHeight;\n    }\n    set height(value) {\n        this.cellHeight = value;\n    }\n    /**\n     * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get columnSpan() {\n        return this.colSpan;\n    }\n    set columnSpan(value) {\n        if (value < 1) {\n            throw Error('Invalid span specified, must be greater than or equal to 1');\n        }\n        else {\n            this.colSpan = value;\n            this.row.columnSpanExists = true;\n        }\n    }\n    /**\n     * Gets the `width` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get width() {\n        if (this.cellWidth === 0 || this.row.grid.isComplete) {\n            this.cellWidth = this.measureWidth();\n        }\n        return this.cellWidth;\n    }\n    set width(value) {\n        this.cellWidth = value;\n    }\n    //Implementation\n    /**\n     * `Calculates the width`.\n     * @private\n     */\n    measureWidth() {\n        // .. Calculate the cell text width.\n        // .....Add border widths, cell spacings and paddings to the width.\n        let width = 0;\n        let layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string') {\n            /* tslint:disable */\n            let slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            width += this.objectValue.width;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            let webLink = this.objectValue;\n            let result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            width += result.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);\n        width += this.row.grid.style.cellSpacing;\n        return width;\n    }\n    /**\n     * Draw the `cell background`.\n     * @private\n     */\n    drawCellBackground(graphics, bounds) {\n        let backgroundBrush = this.getBackgroundBrush();\n        if (backgroundBrush != null) {\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n    }\n    /**\n     * `Adjusts the text layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    adjustContentLayoutArea(bounds) {\n        //Add Padding value to its Cell Bounds\n        let returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n        if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n            returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n            returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n            returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            if (this.rowSpan === 1) {\n                returnBounds.width -= (this.style.borders.left.width);\n            }\n        }\n        else {\n            returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n            returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n            returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            if (this.rowSpan === 1) {\n                returnBounds.width -= (this.style.borders.left.width);\n            }\n        }\n        return returnBounds;\n    }\n    /**\n     * `Draws` the specified graphics.\n     * @private\n     */\n    draw(graphics, bounds, cancelSubsequentSpans) {\n        let result = null;\n        if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n            if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n                if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {\n                    return result;\n                }\n            }\n            else {\n                return result;\n            }\n        }\n        //Adjust bounds with Row and Column Spacing\n        bounds = this.adjustOuterLayoutArea(bounds, graphics);\n        let textPen = this.getTextPen();\n        let textBrush = this.getTextBrush();\n        if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n            textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        let font = this.getTextFont();\n        let strFormat = this.getStringFormat();\n        let innerLayoutArea = this.adjustContentLayoutArea(bounds);\n        this.drawCellBackground(graphics, bounds);\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            let temp;\n            temp = this.remaining === '' ? this.remaining : this.objectValue;\n            graphics.drawString(temp, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n            result = graphics.stringLayoutResult;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            let imageBounds;\n            if (this.objectValue.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n        }\n        if (this.style.borders != null) {\n            this.drawCellBorders(graphics, bounds);\n        }\n        return result;\n    }\n    /* tslint:enable */\n    /**\n     * Draws the `cell border` constructed by drawing lines.\n     * @private\n     */\n    drawCellBorders(graphics, bounds) {\n        if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        let p1 = new PointF(bounds.x, bounds.y + bounds.height);\n        let p2 = new PointF(bounds.x, bounds.y);\n        let pen = this.cellStyle.borders.left;\n        if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        // SetTransparency(ref graphics, pen);\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x + bounds.width, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.right;\n        if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n            p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n            p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n        }\n        if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y);\n        pen = this.cellStyle.borders.top;\n        if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        p2 = new PointF(bounds.x, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.bottom;\n        // if ((bounds.y + bounds.height) > (graphics.clientSize.height - (pen.width / 2))) {\n        //     p1 = new PointF((bounds.x + bounds.width), (graphics.clientSize.height - (pen.width / 2)));\n        //     p2 = new PointF(bounds.x, (graphics.clientSize.height - (pen.width / 2)));\n        // }\n        if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n    }\n    /**\n     * `Adjusts the outer layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    adjustOuterLayoutArea(bounds, g) {\n        let isHeader = false;\n        let cellSpacing = this.row.grid.style.cellSpacing;\n        if (cellSpacing > 0) {\n            bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n        }\n        let currentColIndex = this.row.cells.indexOf(this);\n        if (this.columnSpan > 1) {\n            let span = this.columnSpan;\n            let totalWidth = 0;\n            for (let i = currentColIndex; i < currentColIndex + span; i++) {\n                if (this.row.grid.style.allowHorizontalOverflow) {\n                    let width;\n                    let compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n                    if (this.row.grid.size.width > g.clientSize.width) {\n                        width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    else {\n                        width = totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    if (width > compWidth) {\n                        break;\n                    }\n                }\n                totalWidth += this.row.grid.columns.getColumn(i).width;\n            }\n            totalWidth -= this.row.grid.style.cellSpacing;\n            bounds.width = totalWidth;\n        }\n        if (this.rowSpan > 1 || this.row.rowSpanExists) {\n            let span = this.rowSpan;\n            let currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n            if (currentRowIndex == -1) {\n                currentRowIndex = this.row.grid.headers.indexOf(this.row);\n                if (currentRowIndex != -1) {\n                    isHeader = true;\n                }\n            }\n            let totalHeight = 0;\n            for (let i = currentRowIndex; i < currentRowIndex + span; i++) {\n                totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);\n                let row = this.row.grid.rows.getRow(i);\n                let rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n            }\n            let cellIndex = this.row.cells.indexOf(this);\n            totalHeight -= this.row.grid.style.cellSpacing;\n            // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n            //     this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n            //     totalHeight = this.row.cells.getCell(cellIndex).height;\n            //     bounds.height = totalHeight;\n            // } else {\n            bounds.height = totalHeight;\n            // }\n            if (!this.row.rowMergeComplete) {\n                bounds.height = totalHeight;\n            }\n        }\n        return bounds;\n    }\n    /* tslint:enable */\n    /**\n     * Gets the `text font`.\n     * @private\n     */\n    getTextFont() {\n        if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n            return this.style.font;\n        }\n        else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n            return this.row.style.font;\n        }\n        else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n            return this.row.grid.style.font;\n        }\n        else {\n            return PdfDocument.defaultFont;\n        }\n    }\n    /**\n     * Gets the `text brush`.\n     * @private\n     */\n    getTextBrush() {\n        if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n            return this.style.textBrush;\n        }\n        else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n            return this.row.style.textBrush;\n        }\n        else {\n            return this.row.grid.style.textBrush;\n        }\n    }\n    /**\n     * Gets the `text pen`.\n     * @private\n     */\n    getTextPen() {\n        if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n            return this.style.textPen;\n        }\n        else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n            return this.row.style.textPen;\n        }\n        else {\n            return this.row.grid.style.textPen;\n        }\n    }\n    /**\n     * Gets the `background brush`.\n     * @private\n     */\n    getBackgroundBrush() {\n        if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n            return this.style.backgroundBrush;\n        }\n        else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n            return this.row.style.backgroundBrush;\n        }\n        else {\n            return this.row.grid.style.backgroundBrush;\n        }\n    }\n    /**\n     * Gets the current `StringFormat`.\n     * @private\n     */\n    getStringFormat() {\n        if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n            return this.style.stringFormat;\n        }\n        else {\n            return this.stringFormat;\n        }\n    }\n    /**\n     * Calculates the `height`.\n     * @private\n     */\n    measureHeight() {\n        // .. Calculate the cell text height.\n        // .....Add border widths, cell spacings and paddings to the height.\n        let width = this.calculateWidth();\n        // //check whether the Current PdfGridCell has padding\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        else {\n            width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        let height = 0;\n        let layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string' || typeof this.remainingString === 'string') {\n            let currentValue = this.objectValue;\n            /* tslint:disable */\n            let slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            height += this.objectValue.height;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            let webLink = this.objectValue;\n            /* tslint:disable */\n            let slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n        }\n        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        //Add padding top and bottom value to height\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n        }\n        else {\n            height += (this.style.cellPadding.top + this.style.cellPadding.bottom);\n        }\n        height += this.row.grid.style.cellSpacing;\n        return height;\n    }\n    /**\n     * return the calculated `width` of the cell.\n     * @private\n     */\n    calculateWidth() {\n        let cellIndex = this.row.cells.indexOf(this);\n        let columnSpan = this.columnSpan;\n        let width = 0;\n        for (let i = 0; i < columnSpan; i++) {\n            width += this.row.grid.columns.getColumn(cellIndex + i).width;\n        }\n        return width;\n    }\n}\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nclass PdfGridCellCollection {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     * @private\n     */\n    constructor(row) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.cells = [];\n        this.gridRow = row;\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     * @private\n     */\n    getCell(index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    }\n    /**\n     * Gets the cells `count`.[Read-Only].\n     * @private\n     */\n    get count() {\n        return this.cells.length;\n    }\n    add(cell) {\n        if (typeof cell === 'undefined') {\n            let tempcell = new PdfGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.gridRow;\n            this.cells.push(cell);\n        }\n    }\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     * @private\n     */\n    indexOf(cell) {\n        return this.cells.indexOf(cell);\n    }\n}\n\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\nclass PdfGridColumn {\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n     * @private\n     */\n    constructor(grid) {\n        /**\n         * The `width` of the column.\n         * @default 0\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n    }\n    /**\n     * Gets or sets the `width` of the 'PdfGridColumn'.\n     * @private\n     */\n    get width() {\n        return this.columnWidth;\n    }\n    set width(value) {\n        this.isCustomWidth = true;\n        this.columnWidth = value;\n    }\n    /**\n     * Gets or sets the information about the text `formatting`.\n     * @private\n     */\n    get format() {\n        if (this.stringFormat == null) {\n            this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n        }\n        return this.stringFormat;\n    }\n    set format(value) {\n        this.stringFormat = value;\n    }\n}\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\nclass PdfGridColumnCollection {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n     * @private\n     */\n    constructor(grid) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n        this.internalColumns = [];\n    }\n    //Iplementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     * @private\n     */\n    add(count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (let i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfGridColumn(this.grid));\n            for (let index = 0; index < this.grid.rows.count; index++) {\n                let row = this.grid.rows.getRow(index);\n                let cell = new PdfGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    }\n    /**\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n     * @private\n     */\n    get count() {\n        return this.internalColumns.length;\n    }\n    /**\n     * Gets the `widths`.\n     * @private\n     */\n    get width() {\n        if (this.columnWidth === 0) {\n            this.columnWidth = this.measureColumnsWidth();\n        }\n        if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n            this.columnWidth = this.grid.initialWidth;\n            this.grid.isPageWidth = true;\n        }\n        return this.columnWidth;\n    }\n    /**\n     * Gets the `array of PdfGridColumn`.[Read-Only]\n     * @private\n     */\n    get columns() {\n        return this.internalColumns;\n    }\n    /**\n     * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n     * @private\n     */\n    getColumn(index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    }\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     * @private\n     */\n    measureColumnsWidth() {\n        let totalWidth = 0;\n        // this.m_grid.measureColumnsWidth();\n        for (let i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    }\n    /**\n     * Gets the `widths of the columns`.\n     * @private\n     */\n    getDefaultWidths(totalWidth) {\n        let widths = [];\n        let subFactor = this.count;\n        for (let i = 0; i < this.count; i++) {\n            if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n                this.internalColumns[i].width = 0;\n            }\n            else {\n                widths[i] = this.internalColumns[i].width;\n                if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n                    totalWidth -= this.internalColumns[i].width;\n                    subFactor--;\n                }\n                else {\n                    widths[i] = 0;\n                }\n            }\n        }\n        for (let i = 0; i < this.count; i++) {\n            let width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    }\n}\n\n/**\n * `PdfGridRow` class provides customization of the settings for the particular row.\n */\nclass PdfGridRow {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRow` class with the parent grid.\n     * @private\n     */\n    constructor(grid) {\n        /**\n         * Stores the index of the overflowing row.\n         * @private\n         */\n        this.gridRowOverflowIndex = 0;\n        /**\n         * Check whether the row height `is set explicitly`.\n         * @default false\n         * @private\n         */\n        this.isRowHeightSet = false;\n        /**\n         * Check weather the row merge `is completed` or not.\n         * @default true\n         * @private\n         */\n        this.isRowMergeComplete = true;\n        this.pdfGrid = grid;\n    }\n    //Properties\n    /**\n     * Gets or sets a value indicating [`row span exists`].\n     * @private\n     */\n    get rowSpanExists() {\n        return this.bRowSpanExists;\n    }\n    set rowSpanExists(value) {\n        this.bRowSpanExists = value;\n    }\n    /**\n     * Gets the `cells` from the selected row.[Read-Only].\n     * @private\n     */\n    get cells() {\n        if (this.gridCells == null) {\n            this.gridCells = new PdfGridCellCollection(this);\n        }\n        return this.gridCells;\n    }\n    /**\n     * Gets or sets the parent `grid`.\n     * @private\n     */\n    get grid() {\n        return this.pdfGrid;\n    }\n    set grid(value) {\n        this.pdfGrid = value;\n    }\n    /**\n     * Gets or sets the row `style`.\n     * @private\n     */\n    get style() {\n        if (typeof this.rowStyle === 'undefined') {\n            this.rowStyle = new PdfGridRowStyle();\n            this.rowStyle.setParent(this);\n        }\n        return this.rowStyle;\n    }\n    set style(value) {\n        this.rowStyle = value;\n        for (let i = 0; i < this.cells.count; i++) {\n            this.cells.getCell(i).style.borders = value.border;\n            if (typeof value.font !== 'undefined') {\n                this.cells.getCell(i).style.font = value.font;\n            }\n            if (typeof value.backgroundBrush !== 'undefined') {\n                this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\n            }\n            if (typeof value.textBrush !== 'undefined') {\n                this.cells.getCell(i).style.textBrush = value.textBrush;\n            }\n            if (typeof value.textPen !== 'undefined') {\n                this.cells.getCell(i).style.textPen = value.textPen;\n            }\n        }\n    }\n    /**\n     * `Height` of the row yet to be drawn after split.\n     * @private\n     */\n    get rowBreakHeight() {\n        if (typeof this.gridRowBreakHeight === 'undefined') {\n            this.gridRowBreakHeight = 0;\n        }\n        return this.gridRowBreakHeight;\n    }\n    set rowBreakHeight(value) {\n        this.gridRowBreakHeight = value;\n    }\n    get rowOverflowIndex() {\n        return this.gridRowOverflowIndex;\n    }\n    set rowOverflowIndex(value) {\n        this.gridRowOverflowIndex = value;\n    }\n    /**\n     * Gets or sets the `height` of the row.\n     * @private\n     */\n    get height() {\n        if (!this.isRowHeightSet) {\n            this.rowHeight = this.measureHeight();\n        }\n        return this.rowHeight;\n    }\n    set height(value) {\n        this.rowHeight = value;\n        this.isRowHeightSet = true;\n    }\n    /**\n     * Gets or sets a value indicating [`column span exists`].\n     * @private\n     */\n    get columnSpanExists() {\n        return this.bColumnSpanExists;\n    }\n    set columnSpanExists(value) {\n        this.bColumnSpanExists = value;\n    }\n    /**\n     * Check whether the Row `has row span or row merge continue`.\n     * @private\n     */\n    get rowMergeComplete() {\n        return this.isRowMergeComplete;\n    }\n    set rowMergeComplete(value) {\n        this.isRowMergeComplete = value;\n    }\n    /**\n     * Returns `index` of the row.\n     * @private\n     */\n    get rowIndex() {\n        return this.grid.rows.rowCollection.indexOf(this);\n    }\n    //Implementation\n    /**\n     * `Calculates the height`.\n     * @private\n     */\n    measureHeight() {\n        let rowSpanRemainingHeight = 0;\n        let rowHeight;\n        let maxHeight = 0;\n        // if(this.cells.getCell(0).RowSpan > 1) {\n        //     rowHeight=0;\n        // } else {\n        rowHeight = this.cells.getCell(0).height;\n        // }\n        for (let i = 0; i < this.cells.count; i++) {\n            let cell = this.cells.getCell(i);\n            //get the maximum rowspan remaining height.\n            if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\n                rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\n            }\n            //skip the cell if row spanned.\n            // if (cell.IsRowMergeContinue)\n            //     continue; \n            // if (!cell.IsRowMergeContinue)\n            this.rowMergeComplete = false;\n            if (cell.rowSpan > 1) {\n                if (maxHeight < cell.height) {\n                    maxHeight = cell.height;\n                }\n                continue;\n            }\n            rowHeight = Math.max(rowHeight, cell.height);\n        }\n        if (rowHeight === 0) {\n            rowHeight = maxHeight;\n        }\n        else if (rowSpanRemainingHeight > 0) {\n            rowHeight += rowSpanRemainingHeight;\n        }\n        return rowHeight;\n    }\n}\n/**\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\n * @private\n */\nclass PdfGridRowCollection {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\n     * @private\n     */\n    constructor(grid) {\n        this.rows = [];\n        this.grid = grid;\n    }\n    //Properties\n    /**\n     * Gets the number of header in the `PdfGrid`.[Read-Only].\n     * @private\n     */\n    get count() {\n        return this.rows.length;\n    }\n    //Implementation\n    /**\n     * Return the row collection of the `grid`.\n     * @private\n     */\n    get rowCollection() {\n        return this.rows;\n    }\n    addRow(arg) {\n        if (typeof arg === 'undefined') {\n            let temprow = new PdfGridRow(this.grid);\n            this.addRow(temprow);\n            return temprow;\n        }\n        else {\n            arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\n            arg.style.setFont(this.grid.style.font);\n            arg.style.setTextBrush(this.grid.style.textBrush);\n            arg.style.setTextPen(this.grid.style.textPen);\n            if (arg.cells.count === 0) {\n                for (let i = 0; i < this.grid.columns.count; i++) {\n                    arg.cells.add(new PdfGridCell());\n                }\n            }\n            this.rows.push(arg);\n        }\n    }\n    /**\n     * Return the row by index.\n     * @private\n     */\n    getRow(index) {\n        return this.rows[index];\n    }\n}\n/**\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\n * @private\n */\nclass PdfGridHeaderCollection {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\n     * @private\n     */\n    constructor(grid) {\n        /**\n         * The array to store the `rows` of the grid header.\n         * @private\n         */\n        this.rows = [];\n        this.grid = grid;\n        this.rows = [];\n    }\n    //Properties\n    /**\n     * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n     * @private\n     */\n    getHeader(index) {\n        // if (index < 0 || index >= Count) {\n        //     throw new IndexOutOfRangeException();\n        // }\n        return (this.rows[index]);\n    }\n    /**\n     * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n     * @private\n     */\n    get count() {\n        return this.rows.length;\n    }\n    add(arg) {\n        if (typeof arg === 'number') {\n            let row;\n            for (let i = 0; i < arg; i++) {\n                row = new PdfGridRow(this.grid);\n                for (let j = 0; j < this.grid.columns.count; j++) {\n                    row.cells.add(new PdfGridCell());\n                }\n                this.rows.push(row);\n            }\n            return this.rows;\n        }\n        else {\n            this.rows.push(arg);\n        }\n    }\n    indexOf(row) {\n        return this.rows.indexOf(row);\n    }\n}\n\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nclass PdfGridLayoutFormat extends PdfLayoutFormat {\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    constructor(baseFormat) {\n        if (typeof baseFormat === 'undefined') {\n            super();\n        }\n        else {\n            super(baseFormat);\n        }\n    }\n}\nclass PdfGrid extends PdfLayoutElement {\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    constructor() {\n        super();\n        /**\n         * @hidden\n         * @private\n         */\n        this.gridSize = new SizeF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        this.breakRow = true;\n    }\n    //Properties\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     * @private\n     */\n    get raiseBeginCellDraw() {\n        return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n    }\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     * @private\n     */\n    get raiseEndCellDraw() {\n        return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n    }\n    /**\n     * Gets a value indicating whether the `start page layout event` should be raised.\n     * @private\n     */\n    get raiseBeginPageLayout() {\n        return (typeof this.beginPageLayout !== 'undefined');\n    }\n    /**\n     * Gets a value indicating whether the `ending page layout event` should be raised.\n     * @private\n     */\n    get raiseEndPageLayout() {\n        return (typeof this.endPageLayout !== 'undefined');\n    }\n    /**\n     * Gets or sets a value indicating whether to `repeat header`.\n     * @private\n     */\n    get repeatHeader() {\n        if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n            this.bRepeatHeader = false;\n        }\n        return this.bRepeatHeader;\n    }\n    set repeatHeader(value) {\n        this.bRepeatHeader = value;\n    }\n    /**\n     * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n     * @private\n     */\n    get allowRowBreakAcrossPages() {\n        return this.breakRow;\n    }\n    set allowRowBreakAcrossPages(value) {\n        this.breakRow = value;\n    }\n    /**\n     * Gets the `column` collection of the PdfGrid.[Read-Only]\n     * @private\n     */\n    get columns() {\n        if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n            this.gridColumns = new PdfGridColumnCollection(this);\n        }\n        return this.gridColumns;\n    }\n    /**\n     * Gets the `row` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get rows() {\n        if (this.gridRows == null) {\n            this.gridRows = new PdfGridRowCollection(this);\n        }\n        return this.gridRows;\n    }\n    /**\n     * Gets the `headers` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get headers() {\n        if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n            this.gridHeaders = new PdfGridHeaderCollection(this);\n        }\n        return this.gridHeaders;\n    }\n    /**\n     * Indicating `initial width` of the page.\n     * @private\n     */\n    get initialWidth() {\n        return this.gridInitialWidth;\n    }\n    set initialWidth(value) {\n        this.gridInitialWidth = value;\n    }\n    /**\n     * Gets or sets the `grid style`.\n     * @private\n     */\n    get style() {\n        if (this.gridStyle == null) {\n            this.gridStyle = new PdfGridStyle();\n        }\n        return this.gridStyle;\n    }\n    set style(value) {\n        if (this.gridStyle == null) {\n            this.gridStyle = value;\n        }\n    }\n    /**\n     * Gets a value indicating whether the grid column width is considered to be `page width`.\n     * @private\n     */\n    get isPageWidth() {\n        return this.pageWidth;\n    }\n    set isPageWidth(value) {\n        this.pageWidth = value;\n    }\n    /**\n     * Gets or set if grid `is nested grid`.\n     * @private\n     */\n    get isChildGrid() {\n        return this.childGrid;\n    }\n    set isChildGrid(value) {\n        this.childGrid = value;\n    }\n    /**\n     * Gets the `size`.\n     * @private\n     */\n    get size() {\n        if (this.gridSize.width === 0 && this.gridSize.height === 0) {\n            this.gridSize = this.measure();\n            return this.gridSize;\n        }\n        else {\n            return this.gridSize;\n        }\n    }\n    set size(value) {\n        this.gridSize = value;\n    }\n    draw(arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            let width = (arg1.graphics.clientSize.width - arg2);\n            let layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    }\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    measure() {\n        let height = 0;\n        let width = this.columns.width;\n        for (let i = 0; i < this.headers.count; i++) {\n            let row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (let i = 0; i < this.rows.count; i++) {\n            let row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    }\n    layout(param, isGridLayouter) {\n        if (typeof isGridLayouter === 'undefined') {\n            this.setSpan();\n            this.layoutFormat = param.format;\n            this.gridLocation = param.bounds;\n            let result = this.layout(param, true);\n            return result;\n        }\n        else {\n            return this.layoutInternal(param);\n        }\n    }\n    setSpan() {\n        let colSpan;\n        let rowSpan = 1;\n        let currentCellIndex;\n        let currentRowIndex = 0;\n        let rowCount = this.headers.count;\n        for (let i = 0; i < rowCount; i++) {\n            let row = this.headers.getHeader(i);\n            let colCount = row.cells.count;\n            for (let j = 0; j < colCount; j++) {\n                let cell = row.cells.getCell(j);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    getFormat(format) {\n        let f = format;\n        return f;\n    }\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    layoutInternal(param) {\n        this.initialWidth = param.bounds.width;\n        let format = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            let pageHeight = this.currentPage.getClientSize().height;\n            let pageWidth = this.currentPage.getClientSize().width;\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        else {\n            throw Error('Can not set page as null');\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        let index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.headers.count !== 0) {\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        if (param.bounds.height > 0 && !this.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        this.hType = this.style.horizontalOverflowType;\n        if (!this.style.allowHorizontalOverflow) {\n            this.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.columns.count - 1]);\n        }\n        else {\n            this.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        let result = this.layoutOnPage(param);\n        return result;\n    }\n    measureColumnsWidth(bounds) {\n        if (typeof bounds !== 'undefined') {\n            let widths = this.columns.getDefaultWidths(bounds.width);\n            let tempWidth = this.columns.getColumn(0).width;\n            for (let i = 0, count = this.columns.count; i < count; i++) {\n                this.columns.getColumn(i).width = widths[i];\n            }\n        }\n        else {\n            let widths = [];\n            let cellWidth = 0;\n            if (this.headers.count > 0) {\n                let colCount = this.headers.getHeader(0).cells.count;\n                let rowCount = this.headers.count;\n                for (let i = 0; i < colCount; i++) {\n                    cellWidth = 0;\n                    for (let j = 0; j < rowCount; j++) {\n                        let rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            else {\n                let colCount = this.rows.getRow(0).cells.count;\n                let rowCount = this.rows.count;\n                for (let i = 0; i < colCount; i++) {\n                    cellWidth = 0;\n                    for (let j = 0; j < rowCount; j++) {\n                        let rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            cellWidth = 0;\n            for (let i = 0, colCount = this.columns.count; i < colCount; i++) {\n                for (let j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 || this.rows.getRow(j).cells.getCell(i).value !== null || this.rows.getRow(j).cells.getCell(i).rowSpan >= 1) {\n                        if (this.rows.getRow(j).cells.getCell(i).value !== null &&\n                            !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            let value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2\n                                + this.gridLocation.x;\n                            this.rows.getRow(j).cells.getCell(i).value.initialWidth = this.initialWidth - value;\n                        }\n                        let rowWidth = 0;\n                        let internalWidth = this.rows.getRow(j).cells.getCell(i).width;\n                        internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        let internalHeight = this.rows.getRow(j).cells.getCell(i).height;\n                        internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        let isCorrectWidth = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        let isCorrectHeight = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        if (isCorrectWidth || isCorrectHeight) {\n                            throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        }\n                        rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (let i = 0, count = this.columns.count; i < count; i++) {\n                this.columns.getColumn(i).width = widths[i];\n            }\n        }\n    }\n    /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    determineColumnDrawRanges() {\n        let startColumn = 0;\n        let endColumn = 0;\n        let cellWidths = 0;\n        let availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (let i = 0; i < this.columns.count; i++) {\n            cellWidths += this.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                let subWidths = 0;\n                for (let j = startColumn; j <= i; j++) {\n                    subWidths += this.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.columns.count - 1]);\n        // }\n    }\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    layoutOnPage(param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        let format = this.getFormat(param.format);\n        let result = null;\n        let layoutedPages = new TemporaryDictionary();\n        let startPage = param.page;\n        let cellBounds = [];\n        for (let index = 0; index < this.columnRanges.length; index++) {\n            let range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            let returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            // result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            // break;\n            // }\n            //Draw Headers.\n            for (let i = 0; i < this.headers.count; i++) {\n                let row = this.headers.getHeader(i);\n                let headerHeight = this.currentBounds.y;\n                // RowLayoutResult\n                let headerResult = this.drawRow(row);\n                // if (headerHeight === this.currentBounds.y) {\n                //     drawHeader = true;\n                //     if (PdfGrid.repeatRowIndex === -1) {\n                //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n                //     }\n                // } else {\n                \n                // }\n            }\n            let i = 0;\n            let length = this.rows.count;\n            let repeatRow;\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (let j = 0; j < this.rows.count; j++) {\n                let row = this.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                let originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGrid.repeatRowIndex = -1;\n                let rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGrid.repeatRowIndex = this.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGrid.repeatRowIndex = -1;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    this.currentPage = this.getNextPage(format);\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.repeatHeader) {\n                        for (let i = 0; i < this.headers.count; i++) {\n                            let header = this.headers.getHeader(i);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n            }\n            let isPdfGrid = false;\n            let maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            let largeNavigatePage = [[0, 0]];\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (let c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPage(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    // this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.style.allowHorizontalOverflow && this.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    } /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    getNextPage(format) {\n        let section = this.currentPage.section;\n        let nextPage = null;\n        let index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        let pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        // if ((format.PaginateBounds.x !== format.PaginateBounds.y) && (format.PaginateBounds.y !== format.PaginateBounds.height)\n        //     && (format.PaginateBounds.height !== format.PaginateBounds.width) && (format.PaginateBounds.width !== 0)) {\n        //     this.currentBounds.x = format.PaginateBounds.x;\n        //     this.currentBounds.y = format.PaginateBounds.y;\n        //     this.currentBounds.height = format.PaginateBounds.height;\n        // }\n        return nextPage;\n    }\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    getLayoutResult() {\n        let bounds;\n        /* tslint:disable */\n        bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    }\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    ReCalculateHeight(row, height) {\n        let newHeight = 0.0;\n        // for (let i : number = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        //     if (!(row.cells.getCell(i).RemainingString === null || row.cells.getCell(i).RemainingString === '' ||\n        //           typeof row.cells.getCell(i).RemainingString === 'undefined')) {\n        //         newHeight = Math.max(newHeight, row.cells.getCell(i).MeasureHeight());\n        //     }\n        // }\n        return Math.max(height, newHeight);\n    }\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    raiseBeforePageLayout(currentPage, currentBounds, currentRow) {\n        let cancel = false;\n        if (this.raiseBeginPageLayout) {\n            let args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.beginPageLayout(this, args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = args.cancel;\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    }\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    raisePageLayouted(result) {\n        let args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.raiseEndPageLayout) {\n            this.endPageLayout(this, args);\n        }\n        return args;\n    }\n    drawRow(row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.\n            let result = new RowLayoutResult();\n            let rowHeightWithSpan = 0;\n            let isHeader = false;\n            if (row.rowSpanExists) {\n                let maxSpan = 0;\n                let currRowIndex = this.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (let i = 0; i < row.cells.count; i++) {\n                    let cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (let i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.headers.getHeader(i).height : this.rows.getRow(i).height);\n                }\n                let rowMaxHeight = rowHeightWithSpan;\n                for (let i = 0; i < row.cells.count; i++) {\n                    rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                }\n                let nextRow = this.headers.getHeader(this.headers.indexOf(row) + 1);\n                let flag = true;\n                for (let i = 0; i < nextRow.cells.count; i++) {\n                    if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                    row.height += (rowMaxHeight - rowHeightWithSpan);\n                }\n            }\n            let calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                // If a row is repeated and still cannot fit in page, proceed draw.\n                // if (PdfGrid.repeatRowIndex > -1 && PdfGrid.repeatRowIndex === row.RowIndex) {\n                //     if (this.AllowRowBreakAcrossPages) {\n                //         result.IsFinish = true;\n                //         // this.DrawRowWithBreak(ref result, row, height);\n                //     } else {\n                //         result.IsFinish = false;\n                //         this.drawRow(row, result, height);\n                //     }\n                // } else {\n                result.isFinish = false;\n                // }\n            }\n            else {\n                result.isFinish = true;\n                this.drawRow(row, result, calculatedHeight);\n            }\n            return result;\n        }\n        else {\n            let location = new PointF(this.currentBounds.x, this.currentBounds.y);\n            result.bounds = new RectangleF(location, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (let i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                let cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (let j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                let size = new SizeF(this.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.ClientSize.width) {\n                //     size.width = this.currentGraphics.ClientSize.width;\n                // }\n                // if (this.IsChildGrid && this.style.AllowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.ClientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.columns.getColumn(i).format;\n                }\n                let cellstyle = row.cells.getCell(i).style;\n                let tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size), tempValue, cellstyle);\n                // if (!skipcell) {\n                // let stringResult : PdfStringLayoutResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n                let stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n                if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                    row.rowOverflowIndex = this.cellEndIndex;\n                }\n                if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                    row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ? stringResult.remainder : '' : '';\n                    row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                    row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                    row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                }\n                // }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                this.RaiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size), tempValue, row.cells.getCell(i).style);\n                location.x += this.columns.getColumn(i).width;\n            }\n            // if (!row.RowMergeComplete || row.isRowHeightSet) {\n            this.currentBounds.y += height;\n            // }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n        }\n    }\n    /**\n     * Checks if the given format `is default format` or not.\n     * @private\n     */\n    CheckIfDefaultFormat(format) {\n        let defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    }\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    RaiseBeforeCellDraw(graphics, rowIndex, cellIndex, bounds, value, style) {\n        let args = null;\n        if (this.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.beginCellDraw(this, args);\n            style = args.style;\n        }\n        return style;\n    }\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    RaiseAfterCellDraw(graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        let args = null;\n        if (this.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.endCellDraw(this, args);\n        }\n    }\n    /**\n     * `Rearranges the pages`.\n     * @private\n     */\n    reArrangePages(layoutedPages) {\n        let document = this.currentPage.document;\n        let pages = [];\n        let keys = layoutedPages.keys();\n        let values = layoutedPages.values();\n        for (let i = 0; i < keys.length; i++) {\n            let page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (let i = 0; i < layoutedPages.size(); i++) {\n            for (let j = i, count = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count) {\n                let page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    }\n}\n/**\n * @hidden\n * @private\n */\nPdfGrid.repeatRowIndex = -1;\n/**\n * `GridCellEventArgs` class is alternate for grid events.\n */\nclass GridCellEventArgs {\n    // Properties\n    /**\n     * Gets the value of current `row index`.\n     * @private\n     */\n    get rowIndex() {\n        return this.gridRowIndex;\n    }\n    /**\n     * Gets the value of current `cell index`.\n     * @private\n     */\n    get cellIndex() {\n        return this.gridCellIndex;\n    }\n    /**\n     * Gets the actual `value` of current cell.\n     * @private\n     */\n    get value() {\n        return this.internalValue;\n    }\n    /**\n     * Gets the `bounds` of current cell.\n     * @private\n     */\n    get bounds() {\n        return this.gridBounds;\n    }\n    /**\n     * Gets the instance of `current graphics`.\n     * @private\n     */\n    get graphics() {\n        return this.pdfGraphics;\n    }\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    constructor(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n}\n/**\n * `PdfGridBeginCellDrawEventArgs` class is alternate for begin cell draw events.\n */\nclass PdfGridBeginCellDrawEventArgs extends GridCellEventArgs {\n    // Properties\n    /**\n     * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n     * @private\n     */\n    get skip() {\n        return this.bSkip;\n    }\n    set skip(value) {\n        this.bSkip = value;\n    }\n    /**\n     * Gets or sets a `style` value of the cell.\n     * @private\n     */\n    get style() {\n        return this.cellStyle;\n    }\n    set style(value) {\n        this.cellStyle = value;\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    constructor(graphics, rowIndex, cellIndex, bounds, value, style) {\n        super(graphics, rowIndex, cellIndex, bounds, value);\n        this.style = style;\n    }\n}\n/**\n * `PdfGridEndCellDrawEventArgs` class is alternate for end cell draw events.\n */\nclass PdfGridEndCellDrawEventArgs extends GridCellEventArgs {\n    // Propertise\n    /**\n     * Get the `PdfGridCellStyle`.\n     * @private\n     */\n    get style() {\n        return this.cellStyle;\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    constructor(graphics, rowIndex, cellIndex, bounds, value, style) {\n        super(graphics, rowIndex, cellIndex, bounds, value);\n        this.cellStyle = style;\n    }\n}\n/**\n * `PdfGridCancelEventArgs` class is alternate for cancel events.\n */\nclass PdfCancelEventArgs {\n    // Properties\n    /**\n     * Gets and Sets the value of `cancel`.\n     * @private\n     */\n    get cancel() {\n        return this.isCancel;\n    }\n    set cancel(value) {\n        this.isCancel = value;\n    }\n}\n/**\n * `BeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nclass BeginPageLayoutEventArgs extends PdfCancelEventArgs {\n    // Properties\n    /**\n     * Gets or sets value that indicates the lay outing `bounds` on the page.\n     * @private\n     */\n    get bounds() {\n        return this.cellBounds;\n    }\n    set bounds(value) {\n        this.cellBounds = value;\n    }\n    /**\n     * Gets the `page` where the lay outing should start.\n     * @private\n     */\n    get page() {\n        return this.pdfPage;\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    constructor(bounds, page) {\n        super();\n        this.bounds = bounds;\n        this.pdfPage = page;\n    }\n}\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nclass EndPageLayoutEventArgs extends PdfCancelEventArgs {\n    // Properties\n    /**\n     * Gets the lay outing `result` of the page.\n     * @private\n     */\n    get result() {\n        return this.layoutResult;\n    }\n    /**\n     * Gets or sets a value indicating the `next page` where the element should be layout.\n     * @private\n     */\n    get nextPage() {\n        return this.nextPdfPage;\n    }\n    set nextPage(value) {\n        this.nextPdfPage = value;\n    }\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    constructor(result) {\n        super();\n        this.layoutResult = result;\n    }\n}\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nclass PdfGridBeginPageLayoutEventArgs extends BeginPageLayoutEventArgs {\n    // Properties\n    /**\n     * Gets the `start row index`.\n     * @private\n     */\n    get startRowIndex() {\n        return this.startRow;\n    }\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    constructor(bounds, page, startRow) {\n        super(bounds, page);\n        this.startRow = startRow;\n    }\n}\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nclass PdfGridEndPageLayoutEventArgs extends EndPageLayoutEventArgs {\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    constructor(result) {\n        super(result);\n    }\n}\n/**\n * `RowLayoutResult` class to store layout result of rows.\n */\nclass RowLayoutResult {\n    /**\n     * Gets or sets a value indicating whether this instance `is finish`.\n     * @private\n     */\n    get isFinish() {\n        return this.bIsFinished;\n    }\n    set isFinish(value) {\n        this.bIsFinished = value;\n    }\n    /**\n     * Gets or sets the `bounds`.\n     * @private\n     */\n    get bounds() {\n        return this.layoutedBounds;\n    }\n    set bounds(value) {\n        this.layoutedBounds = value;\n    }\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    constructor() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n}\n/**\n * `PdfGridLayoutResult` class represents the results of the PdfGrid including bounds and resultant page.\n */\nclass PdfGridLayoutResult extends PdfLayoutResult {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridLayoutResult` class with the current page and bounds.\n     * @private\n     */\n    constructor(page, bounds) {\n        super(page, bounds);\n    }\n}\n\n/**\n * Pdf all modules\n * @hidden\n */\n\nexport { PdfAction, PdfUriAction, PdfActionLinkAnnotation, PdfAnnotation, PdfAnnotationCollection, PdfDocumentLinkAnnotation, PdfLinkAnnotation, PdfTextWebLink, PdfUriAnnotation, Dictionary, defaultToString, PdfCatalog, PdfDocument, PdfDocumentBase, PdfDocumentTemplate, PdfPageNumberField, PdfCompositeField, PdfPageCountField, PointF, SizeF, RectangleF, PdfCacheCollection, PdfCollection, PdfDestination, PdfDestinationMode, ProcedureSets, PdfHorizontalAlignment, PdfVerticalAlignment, PdfTextAlignment, TextRenderingMode, PdfLineJoin, PdfLineCap, PdfDashStyle, PdfFillMode, PdfColorSpace, PdfBlendMode, PdfGraphicsUnit, PdfGridImagePosition, PdfColor, PdfGraphics, GetResourceEventHandler, PdfGraphicsState, PdfMargins, PdfPen, PdfResources, Guid, PdfTransformationMatrix, Matrix, PdfBrush, PdfSolidBrush, PdfTemplate, PdfLayoutElement, PdfTextElement, ElementLayouter, PdfLayoutFormat, PdfLayoutParams, PdfLayoutResult, TextLayouter, TextPageLayoutResult, PdfTextLayoutResult, PdfLayoutType, PdfLayoutBreakType, PdfFontStyle, PdfFontFamily, PdfFontType, PdfWordWrapType, PdfSubSuperScript, FontEncoding, PdfFont, PdfFontMetrics, WidthTable, StandardWidthTable, PdfStandardFont, PdfStandardFontMetricsFactory, PdfStringFormat, PdfStringLayouter, PdfStringLayoutResult, LineInfo, LineType, StringTokenizer, ByteArray, ImageFormat, ImageDecoder, PdfBitmap, PdfImage, PdfTransparency, ObjectStatus, ObjectType, PdfCrossTable, RegisteredObject, DictionaryProperties, PdfMainObjectCollection, ObjectInfo, Operators, PdfStreamWriter, PdfWriter, PdfPageOrientation, PdfPageRotateAngle, PdfNumberStyle, PdfDockStyle, PdfAlignmentStyle, TemplateType, PageAddedEventArgs, PdfDocumentPageCollection, PdfPage, PdfPageBase, PdfPageLayer, PdfPageLayerCollection, PdfPageSettings, PdfPageSize, PdfPageTemplateElement, PdfSection, PageSettingsState, PdfSectionCollection, PdfSectionPageCollection, PdfSectionTemplate, PdfArray, PdfDictionary, SaveSectionCollectionEventHandler, SaveAnnotationEventHandler, SaveSectionEventHandler, SaveTemplateEventHandler, PdfName, PdfNumber, PdfReference, PdfReferenceHolder, PdfStream, InternalEnum, PdfString, PdfGridStyleBase, PdfGridStyle, PdfGridCellStyle, PdfGridRowStyle, PdfHorizontalOverflowType, PdfBorders, PdfPaddings, PdfBorderOverlapStyle, PdfGridLayoutFormat, PdfGrid, GridCellEventArgs, PdfGridBeginCellDrawEventArgs, PdfGridEndCellDrawEventArgs, PdfCancelEventArgs, BeginPageLayoutEventArgs, EndPageLayoutEventArgs, PdfGridBeginPageLayoutEventArgs, PdfGridEndPageLayoutEventArgs, RowLayoutResult, PdfGridLayoutResult, PdfGridColumn, PdfGridColumnCollection, PdfGridRow, PdfGridRowCollection, PdfGridHeaderCollection, PdfGridCell, PdfGridCellCollection };\n//# sourceMappingURL=ej2-pdf-export.es2015.js.map\n"]}