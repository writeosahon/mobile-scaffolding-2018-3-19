{"version":3,"sources":["ej2-data.es2015.js"],"names":[],"mappings":"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","file":"ej2-data.es2015-compiled.js","sourcesContent":["import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        operator = operator || 'contains';\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        let order = 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            grouped[val].items.push(jsonData[i]);\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        return groupedArray;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName)) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!this.fnOperators.isnull(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = DataUtil.getVal(json, index, fieldName);\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object') {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object') {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        let dupValue = value;\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), DataUtil.serverTimezoneOffset, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let arr = dupValue.split(/[^0-9]/);\n                value = DataUtil.dateParse\n                    .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, true);\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), DataUtil.serverTimezoneOffset).toJSON();\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    }\n};\n\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < changes.deletedRecords.length; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object') {\n            value = value[keyField];\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (ds[i][keyField] === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key = value[keyField];\n        for (i = 0; i < ds.length; i++) {\n            if (ds[i][keyField] === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.expand) {\n            req[options.expand] = query.expands;\n        }\n        req[options.select] = 'onSelect' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data.groupDs;\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if ('count' in data) {\n            args.count = data.count;\n        }\n        args.result = data.result ? data.result : data;\n        this.getAggregateResult(pvt, data, args, groupDs);\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify({\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            })\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                value: data,\n                table: tableName,\n                action: 'insert'\n            })\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            })\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify({\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: value[keyField],\n                table: tableName\n            })\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        if (pvt && pvt.groups && pvt.groups.length) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor() {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 '\n        });\n        this.getModuleName = getValue('getModulename', this);\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName)) {\n            if (this.getModuleName() === 'ODataV4Adaptor') {\n                operator = DataUtil.odv4UniOperator[predicate.operator];\n            }\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url.replace(/\\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',\n            data: JSON.stringify(value),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args);\n        req += this.generateUpdateRequest(changes.changedRecords, args);\n        req += this.generateDeleteRequest(changes.deletedRecords, args);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => '(' + data[i][key] + ')',\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'PUT ',\n            'url': (data, i, key) => '(' + data[i][key] + ')',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            req += e.url + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n\\n';\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor() {\n        super(...arguments);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 '\n        });\n    }\n    /**\n     * @hidden\n     */\n    getModulename() {\n        return 'ODataV4Adaptor';\n    }\n    ;\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = data.value;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n        setValue('insert', UrlAdaptor.prototype.insert, this);\n        setValue('update', UrlAdaptor.prototype.update, this);\n        setValue('remove', UrlAdaptor.prototype.remove, this);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            JsonAdaptor.prototype.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            JsonAdaptor.prototype.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < changes.deletedRecords.length; i++) {\n            JsonAdaptor.prototype.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify({\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            })\n        };\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && this.dataSource.url !== undefined) {\n            let result = this.adaptor.processQuery(this, query);\n            this.makeRequest(result, deffered, args, query);\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        let ajax = new Ajax(req);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch((e) => true); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query);\n        if (this.dataSource.offline) {\n            return req;\n        }\n        let deff = new Deferred();\n        let ajax = new Ajax(req);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = (data, request) => {\n            deff.resolve(this.adaptor.processResponse(DataUtil.parse.parseJson(data), this, null, request.httpRequest, request, changes));\n        };\n        ajax.onFailure = (e) => {\n            deff.reject([{ error: e }]);\n        };\n        ajax.send().catch((e) => true); // to handle the failure requests.        \n        return deff.promise;\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        if (this.dataSource.offline) {\n            return req;\n        }\n        return this.doAjaxRequest(req);\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = value[keyField];\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        if (this.dataSource.offline) {\n            return res;\n        }\n        return this.doAjaxRequest(res);\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query);\n        if (this.dataSource.offline) {\n            return res;\n        }\n        return this.doAjaxRequest(res);\n    }\n    doAjaxRequest(res) {\n        let defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        let ajax = new Ajax(res);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = (record, request) => {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n            defer.resolve(record);\n        };\n        ajax.onFailure = (e) => {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch((e) => true); // to handle the failure requests.\n        return defer.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CacheAdaptor, DataUtil };\n//# sourceMappingURL=ej2-data.es2015.js.map\n"]}